{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":541,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.2619925131275005,\"hacking_speed_mult\":1.2556897491514998,\"hacking_money_mult\":1.9745461089749998,\"hacking_grow_mult\":1.3007550125,\"hacking_exp\":13059514.700113775,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":1.2591308521000002,\"agility_exp\":1.2591308521000002,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.669091358380725,\"strength_mult\":1.5078352104900001,\"defense_mult\":1.3111610526,\"dexterity_mult\":1.7415496681159501,\"agility_mult\":1.20462921707625,\"charisma_mult\":1.3111610526,\"hacking_exp_mult\":1.6288116702765607,\"strength_exp_mult\":1.2591308521000002,\"defense_exp_mult\":1.2591308521000002,\"dexterity_exp_mult\":1.2591308521000002,\"agility_exp_mult\":1.2591308521000002,\"charisma_exp_mult\":1.2591308521000002,\"company_rep_mult\":1.4360335337999999,\"faction_rep_mult\":1.1966946115,\"money\":1083947017.5607183,\"city\":\"Aevum\",\"location\":\"Galactic Cybersystems\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"run4theh111z\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25201.600000056587,\"ram\":64,\"totalMoneyGenerated\":428612803.4180441,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25201.400000056587,\"ram\":64,\"totalMoneyGenerated\":427980059.5960164,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25201.200000056586,\"ram\":64,\"totalMoneyGenerated\":427539692.9946261,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25201.000000056585,\"ram\":64,\"totalMoneyGenerated\":427137718.6344611,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25200.200000056582,\"ram\":64,\"totalMoneyGenerated\":423640405.97950375,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25199.000000056578,\"ram\":64,\"totalMoneyGenerated\":420977795.34924734,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25196.80000005657,\"ram\":64,\"totalMoneyGenerated\":420565162.0729444,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25193.60000005656,\"ram\":64,\"totalMoneyGenerated\":420154685.8617641,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25189.200000056542,\"ram\":64,\"totalMoneyGenerated\":419744065.07593095,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25183.600000056522,\"ram\":64,\"totalMoneyGenerated\":419334361.24167186,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":25011.800000055897,\"ram\":64,\"totalMoneyGenerated\":418810521.6738793,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":24337.60000005348,\"ram\":64,\"totalMoneyGenerated\":417324863.6131372,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":24101.800000052623,\"ram\":64,\"totalMoneyGenerated\":415666204.2980415,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":23233.400000049463,\"ram\":64,\"totalMoneyGenerated\":413874340.788657,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":23216.0000000494,\"ram\":64,\"totalMoneyGenerated\":412432158.24033827,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":23210.60000004938,\"ram\":64,\"totalMoneyGenerated\":411062320.0304852,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":23201.000000049346,\"ram\":64,\"totalMoneyGenerated\":409753191.04499036,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":22986.000000048563,\"ram\":64,\"totalMoneyGenerated\":408398882.34059566,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":22962.200000048477,\"ram\":64,\"totalMoneyGenerated\":407180176.7835745,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":22048.00000004515,\"ram\":64,\"totalMoneyGenerated\":405758821.7338872,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":21571.200000043416,\"ram\":64,\"totalMoneyGenerated\":399400978.55615556,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":19215.80000003485,\"ram\":64,\"totalMoneyGenerated\":366217038.12018067,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":15382.6000000209,\"ram\":64,\"totalMoneyGenerated\":304380153.87386495,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":11652.400000007328,\"ram\":64,\"totalMoneyGenerated\":236855599.80023527,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":21777.717672353963,\"onlineTimeSeconds\":4769.999999997853,\"ram\":64,\"totalMoneyGenerated\":99254940.76058018,\"name\":\"hacknet-node-24\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Aevum\",\"The Black Hand\",\"NiteSec\"],\"factionInvitations\":[\"Netburners\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-43.1,\"crime_money_mult\":1.1446644110000002,\"crime_success_mult\":1.04060401,\"isWorking\":true,\"focus\":false,\"workType\":\"Studying or Taking a class at university\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":3.9091480086637453,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":256,\"workHackExpGained\":301.0043966671086,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":-19712,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"taking an Algorithms course\",\"crimeType\":\"\",\"timeWorked\":15400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1446644110000002,\"hacknet_node_money_mult\":2.6245008698459373,\"hacknet_node_purchase_cost_mult\":0.73485594765,\"hacknet_node_ram_cost_mult\":0.96059601,\"hacknet_node_core_cost_mult\":0.96059601,\"hacknet_node_level_cost_mult\":0.8165066085,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644641926970,\"totalPlaytime\":278402200,\"playtimeSinceLastAug\":25223800,\"playtimeSinceLastBitnode\":278402200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-26611840,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":635848689.8035362,\"hacknet\":9762056942.218859,\"hacknet_expenses\":-8975246774.145868,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1082947017.5606973,\"work\":0,\"servers\":0,\"other\":-313100000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-55323392,\"codingcontract\":600000000,\"corporation\":0,\"crime\":795000,\"gang\":0,\"hacking\":65328277170.43985,\"hacknet\":96822648459.82594,\"hacknet_expenses\":-60230611844.317276,\"hospitalization\":-34340000,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":1875944877.6044395,\"work\":193300,\"servers\":-23425957257.018974,\"other\":-1253098898.7287593,\"augmentations\":-75676637657.25772}},\"scriptProdSinceLastAug\":635848689.8035362,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1644364076521},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1644364796512},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644365636510},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1644369056521},{\"ID\":\"TOR\",\"unlockedOn\":1644370256520},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1644372116520},{\"ID\":\"TRAVEL\",\"unlockedOn\":1644372296511},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1644374516517},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1644377936516},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1644411651922},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644411651933},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644411651935},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644413931922},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644414351923},{\"ID\":\"NITESEC\",\"unlockedOn\":1644416091923},{\"ID\":\"FROZE\",\"unlockedOn\":1644416137121},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1644429277114},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1644490597118},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644493537117}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.8.0.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetServer = ns.args[0];\\n\\twhile (true){\\n\\t\\tns.print(`Hacking ${targetServer}`);\\n\\t\\tawait ns.hack(targetServer);\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"blob:file:///3066b819-a1a0-4fc9-b19b-3425b4eb3cda\",\"moduleSequenceNumber\":2223}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":41116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet topTargets = []\\nlet exploits = 0;\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\nlet virus = \\\"/SimpleScripts/virus.js\\\"\\n\\nexport async function main(ns) {\\n\\tawait countExploits(ns);\\n\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n\\tns.print(`Vulnerable Servers: ${vulnerableServers}`);\\n\\n\\t// SCPs virus to vulnerable servers\\n\\tawait infectVulnerableServers(ns);\\n\\tns.print(`Servers infected.`)\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits){\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\t\\t\\tcase 4:\\n\\t\\t\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\t\\t\\tcase 2:\\n\\t\\t\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\t\\t\\tcase 1:\\n\\t\\t\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}catch{\\n\\t\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif(ns.hasRootAccess(server)){\\n\\t\\tvulnerableServers.push(server)\\n\\t\\tlet subServers = ns.scan(server)\\n\\t\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(virus, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\n\\t\\t// TODO: Run virus on vulnerable server(s) against selected target server(s)\\n\\t\\n\\t// TODO: Determine highest value targetable server (Profile hacking targets)\\n\\t// TODO: Target most valuable servers (make a list)\\n\\t\\t// Then send out `hack` command to all vulnerable servers targeting X server\\n\\t// ns.print(`Hacking ${targetServer}`);\\n\\t// await ns.hack(targetServer);\\n\\t// await ns.grow(targetServer);\\n\\t// await ns.weaken(targetServer);\\n\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\n\\n// TODO: Determine highest value targetable server (Profile hacking targets)\\nexport async function profileTargets(ns) {\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\t// For now, we're just going with the highest dollar amount :P\\n\\t\\tif (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(server)){\\n\\t\\t\\tif(topTargets.length < 5 && !topTargets.includes(server)){\\n\\t\\t\\t\\ttopTargets.push(server);\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tfor (let i = 0; i < topTargets.length; i++) {\\n\\t\\t\\t\\t\\tif(ns.getServerMaxMoney(topTargets[i]) < ns.getServerMaxMoney(server) && !topTargets.includes(server)){\\n\\t\\t\\t\\t\\t\\ttopTargets[i] = server;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// let server = vulnerableServers[index];\\n\\t// \\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\t// \\tlet hackSuccessChance = ns.hackSuccessChance(server);\\n\\t// \\t// let threadScale = threadsUsed\\n\\t// \\tlet weakenTime = security/weakenProgress\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(virus);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif(maxThreadCount <= 0){\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t}else{\\n\\t\\t\\tswitch(topTargets.length){\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet home = \\\"home\\\";\\n\\tlet homeThreadCount =  Math.floor((ns.getServerMaxRam(home) - ns.getServerUsedRam(home)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch(topTargets.length){\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\",\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"blob:file:///bb9f2541-c77f-45a6-bf6e-072d3fb728a6\",\"moduleSequenceNumber\":41157}],\"dependents\":[],\"ramUsage\":5.2,\"server\":\"home\",\"moduleSequenceNumber\":41157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet exploits = 0;\\n\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\n\\nexport async function main(ns) {\\n\\tawait countExploits();\\n\\t\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits)\\n\\t\\ttry{\\n\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\tcase 5:\\n\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\tcase 4:\\n\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t}\\n\\t\\t}catch{\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t}\\n\\n\\t\\tif(ns.hasRootAccess(server)){\\n\\t\\t\\tlet subServers = scan(server)\\n\\t\\t\\tfor (let index = 0; index < subServers.length; ++index) {\\n\\t\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"blob:file:///d31df9bb-5e5a-4fcd-9aed-bd62053860fa\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":41118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b4bc4e06-ebe2-4738-b43a-f96d5fe190be\",\"moduleSequenceNumber\":41740}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":41740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":41120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { \\n\\tPAUSE, UNPAUSE,KILL, \\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT, \\n\\tHOME\\n\\t} from \\\"lib/customConstants.js\\\";\\nconst LVL = 0;\\nconst RAM = 1;\\nconst CORE = 2;\\nconst DEATH_MSG = \\\"AUTO_NET\\\"\\n\\nexport async function main(ns) {\\n\\tlet paused = false;\\n\\twhile (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n\\t\\tswitch (ns.readPort(AUTO_NODE_INBOUND_PORT)) {\\n\\t\\t\\tcase PAUSE:\\n\\t\\t\\t\\tpaused = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase UNPAUSE:\\n\\t\\t\\t\\tpaused = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase KILL:\\n\\t\\t\\t\\tns.tryWritePort(CONTROL_INBOUND_PORT, DEATH_MSG)\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (!paused) {\\n\\t\\t\\tlet newNodeRatio = await calcNewNodeValueRatio(ns);\\n\\n\\t\\t\\t// Find highest ratio from all current nodes!\\n\\t\\t\\tlet bestNodeToUpgrade = -1;\\n\\t\\t\\tlet bestProperty = -1; // 0-2 are level, ram, and core\\n\\t\\t\\tlet bestRatio = 0;\\n\\t\\t\\tlet lvlRatio;\\n\\t\\t\\tlet ramRatio;\\n\\t\\t\\tlet coreRatio;\\n\\t\\t\\t// Finds the best upgrade value amongst existing nodes\\n\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\tlvlRatio = await calcLevelUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\tramRatio = await calcRamUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\tcoreRatio = await calcCoreUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\t// ns.print(`Node${i}: lvl:${lvlRatio}, ram:${ramRatio}, core:${coreRatio}`);\\n\\t\\t\\t\\tif (lvlRatio > ramRatio && lvlRatio > coreRatio) {\\n\\t\\t\\t\\t\\t// Lvl ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (lvlRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = lvlRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = LVL;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else if (ramRatio > coreRatio) {\\n\\t\\t\\t\\t\\t// Ram ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (ramRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = ramRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = RAM;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Core ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (coreRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = coreRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = CORE;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Buys a new node or the best valued upgrade\\n\\t\\t\\tlet bal = ns.getServerMoneyAvailable(HOME);\\n\\t\\t\\t// ns.print(`NewNodw:${newNodeRatio} > BestRatio:${bestRatio}`)\\n\\t\\t\\tif (newNodeRatio > bestRatio) {\\n\\t\\t\\t\\t// Buy a new node!\\n\\t\\t\\t\\tns.print(\\\"Trying to buy a new Node...\\\")\\n\\t\\t\\t\\tif (ns.hacknet.getPurchaseNodeCost() < bal) {\\n\\t\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\t\\tns.print(\\\"Bought a new Node!\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tswitch (bestProperty) {\\n\\t\\t\\t\\t\\tcase LVL:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getLevelUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading LVL of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase RAM:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getRamUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeRam(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading RAM of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase CORE:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getCoreUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeCore(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading CORES of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tns.print(\\\"No best property chosen?\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(\\\"50\\\");\\n\\t}\\n}\\n\\nexport async function findWeakestNode(ns) {\\n\\t// Returns the node that produces the least, i.e. needs to be upgraded\\n\\tlet weakest = 0;\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tif (ns.hacknet.getNodeStats(i).production < ns.hacknet.getNodeStats(weakest).production) {\\n\\t\\t\\tweakest = i;\\n\\t\\t}\\n\\t}\\n\\treturn weakest;\\n}\\n\\n// export async function calcAvgNodeProduction(ns) {\\n// \\t// Returns average production of current nodes\\n// }\\n\\n///\\n/// These functions translate the cost of the next upgrade to a ratio for comparison to see what is worth saving for\\n///\\nexport async function calcLevelUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getLevelUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await levelUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`lvl: ${lvl} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio\\n}\\n\\nexport async function calcRamUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getRamUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await ramUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\treturn ratio;\\n}\\n\\nexport async function calcCoreUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getCoreUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await coreUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`core: ${core} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio;\\n}\\n\\nexport async function calcNewNodeValueRatio(ns) {\\n\\tlet totalHacknetNodeProduction = 0;\\n\\tlet numberOfNodes = await ns.hacknet.numNodes();\\n\\tfor (let i = 0; i < numberOfNodes; i++) {\\n\\t\\ttotalHacknetNodeProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\tlet valueRatio = (totalHacknetNodeProduction / numberOfNodes) / ns.hacknet.getPurchaseNodeCost();\\n\\t// ns.print(`valueRatio:${valueRatio}, totalProduction:${totalHacknetNodeProduction}, Node#${numberOfNodes}`)\\n\\tif (isNaN(valueRatio)) {\\n\\t\\tvalueRatio = 1;\\n\\t}\\n\\treturn valueRatio;\\n}\\n\\n///\\n/// Functions for gaining profit of lvl ups\\n///\\n\\nexport async function levelUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (1 * 1.5) * Math.pow(1.035, currentRam - 1) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function ramUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * (Math.pow(1.035, (2 * currentRam) - 1) - Math.pow(1.035, currentRam - 1)) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function coreUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * Math.pow(1.035, currentRam - 1) * (1 / 6);\\n}\",\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///80c58018-014d-4026-8620-96c052f3c0a1\",\"moduleSequenceNumber\":41132},{\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"blob:file:///9f757a59-69b8-4c71-8823-fec11920632a\",\"moduleSequenceNumber\":41156}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":41156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hackPercent(server, player){\\n \\n    const balanceFactor = 240;\\n    const difficultyMult = (100 - server.hackDifficulty) / 100;\\n    const skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n    const percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / balanceFactor;\\n    if (percentMoneyHacked < 0) {\\n      return 0;\\n    }\\n    if (percentMoneyHacked > 1) {\\n      return 1;\\n    }\\n    return percentMoneyHacked * 1//BitNodeMultipliers.ScriptHackMoney;\\n}\\n \\nexport function growPercent(server, threads, player, cores = 1) {\\n \\n    const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n    const growthRate = 1.03//CONSTANTS.ServerBaseGrowthRate;\\n    let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n    if (adjGrowthRate > 1.0035/*CONSTANTS.ServerMaxGrowthRate*/) {\\n        adjGrowthRate = 1.0035/*CONSTANTS.ServerMaxGrowthRate*/;\\n    }\\n    const serverGrowthPercentage = server.serverGrowth / 100;\\n    const numServerGrowthCyclesAdjusted =\\n        numServerGrowthCycles * serverGrowthPercentage * 1//BitNodeMultipliers.ServerGrowthRate;\\n    const coreBonus = 1 + (cores - 1) / 16;\\n    return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.hacking_grow_mult * coreBonus);\\n}\\n \\nexport function weakenTime(server, player) {\\n \\n    const weakenTimeMultiplier = 4;\\n    return weakenTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function growTime(server, player) {\\n \\n    const growTimeMultiplier = 3.2;\\n    return growTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function hackTime(server, player) {\\n \\n    return utilCalculateHackingTime(server,player) * 1000;\\n}\\n \\nfunction utilCalculateIntelligenceBonus(intelligence, weight = 1) {\\n    return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n \\nfunction utilCalculateHackingTime(server, player) {\\n    \\n    const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n    const baseDiff = 500;\\n    const baseSkill = 50;\\n    const diffFactor = 2.5;\\n    let skillFactor = diffFactor * difficultyMult + baseDiff;\\n    skillFactor /= player.hacking + baseSkill;\\n    const hackTimeMultiplier = 5;\\n    const hackingTime =\\n        (hackTimeMultiplier * skillFactor) /\\n        (player.hacking_speed_mult * utilCalculateIntelligenceBonus(player.intelligence, 1));\\n    return hackingTime;\\n}\",\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":41122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as formulasFacade from '/SimpleScripts/formulasHackingFacade.js',\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// TODO: Only use formulasFacade if formulas.exe is missing.\\n\\tx = formulasFacade.hackTime(fserver, player)\\n}\",\"filename\":\"/SimpleScripts/wirus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":41123}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nvar server = ns.args[0];   //Host to hack\\nvar server2 = ns.getHostname(); //Server to run scripts on\\nvar i=0;\\nvar c=0;\\nvar player = ns.getPlayer();\\nvar fserver = ns.getServer(server);\\nvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.ns\\\"); //grabbing script RAM values\\nvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\nvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\nvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\nvar maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\nvar weakenThreads = (2000-((ns.getServerMinSecurityLevel(server))/0.05));\\nvar maxGrowThreads = ((maxRam/growscriptRam)-(weakenscriptRam*2000));\\nvar cs = ns.getServerSecurityLevel(server);\\nvar ms = ns.getServerMinSecurityLevel(server);\\nvar mm = ns.getServerMaxMoney(server);\\nvar ma = ns.getServerMoneyAvailable(server);\\n \\n \\n \\n//Priming the server.  Max money and Min security must be acheived for this to work\\nif ((ma < mm)==true)\\n{\\nns.exec('/newserver/weaken.js',server2,2000,server,0);\\nns.exec('/newserver/grow.js',server2,maxGrowThreads,server,0);\\nvar WeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\nmm = ns.getServerMaxMoney(server);\\nma = ns.getServerMoneyAvailable(server);\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n \\n//If Max Money is true, making sure security level is at its minimum\\nif((cs>ms)==true)\\n{\\n \\nns.exec('/newserver/weaken.js',server2,2000,server,0);\\nWeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n//Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\n \\nvar HPercent = (ns.formulas.hacking.hackPercent(fserver,player)*100);\\nvar GPercent = (ns.formulas.hacking.growPercent(fserver,1,player,1));\\nWeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nvar GrowTime = (ns.formulas.hacking.growTime(fserver,player));\\nvar HackTime = (ns.formulas.hacking.hackTime(fserver,player));\\n \\nvar growThreads = Math.round(((5/(GPercent-1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\nvar hackThreads = Math.round((50/HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\nweakenThreads = Math.round((weakenThreads - (growThreads*0.004))); //Getting required threads to fully weaken the server\\n \\nvar totalRamForRun = (hackscriptRam*hackThreads)+(growscriptRam*growThreads)+(weakenscriptRam*weakenThreads) //Calculating how much RAM is used for a single run\\nvar sleepTime = (WeakenTime/(maxRam/totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n \\n//if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n//{sleepTime = 500;\\n//}\\n \\nvar shiftCount = maxRam/totalRamForRun;\\nvar offset = sleepTime/2\\nvar gOffset = offset/4\\nvar hOffset = offset/2\\n \\n \\nwhile(true)\\n {  \\n     var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n     var gsleep = ((WeakenTime - GrowTime-gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n     var hsleep = ((WeakenTime - HackTime-hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n     var UsedRam = ns.getServerUsedRam(server2);\\n    \\n \\n    if((totalRamForRun>= (maxRam-UsedRam))==false) //making sure I have enough RAM to do a full run\\n    {\\n    ns.exec('/newserver/weaken.js',server2,weakenThreads,server,wsleep,i);\\n    ns.exec('/newserver/grow.js',server2,growThreads,server,gsleep,i);\\n    ns.exec('/newserver/hack.js',server2,hackThreads,server,hsleep,i);\\n    \\n    if (c<shiftCount)\\n    {await ns.sleep(sleepTime)\\n    c++\\n    }\\n    else\\n    {\\n       await ns.sleep(sleepTime+offset);\\n       c=0;\\n    }\\n    \\n    \\n    i++\\n    }\\n    else{\\n       await ns.sleep(1000) \\n    }\\n }\\n await ns.sleep(120000)\\n}\",\"filename\":\"/newserver/OpsScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":41124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":41125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":41126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":41127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst HOME = \\\"home\\\"\\n\\tvar serverName = ns.args[0]; // This way it can be used in other scripts?\\n\\tvar maxAffordableRamSize = 2;\\n\\tvar powerIter = 1;\\n\\tvar lastAffordableRamSize = maxAffordableRamSize;\\n\\tvar currentServerSizeCost = ns.getPurchasedServerCost(maxAffordableRamSize);\\n\\twhile(currentServerSizeCost < ns.getServerMoneyAvailable(HOME)){\\n\\t\\tlastAffordableRamSize = maxAffordableRamSize;\\n\\t\\tmaxAffordableRamSize = Math.pow(2, powerIter);\\n\\t\\tpowerIter++;\\n\\t\\tcurrentServerSizeCost = ns.getPurchasedServerCost(maxAffordableRamSize);\\n\\t}\\n\\tns.print(`Purchasing ${lastAffordableRamSize} for \\\\$${ns.getPurchasedServerCost(lastAffordableRamSize)}`)\\n\\tns.print(`Couldn't afford ${maxAffordableRamSize}ram for \\\\$${ns.getPurchasedServerCost(maxAffordableRamSize)}.`)\\n\\tns.purchaseServer(serverName, lastAffordableRamSize);\\n\\tawait ns.sleep(100000)\\n}\",\"filename\":\"/SimpleScripts/buyMaxServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/buyMaxServer.js\",\"url\":\"blob:file:///09ab40e9-f561-4d67-8dfa-23ef6db85fdf\",\"moduleSequenceNumber\":132886}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":41128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nvar server = ns.args[0];   //Host to hack\\nvar server2 = ns.getHostname(); //Server to run scripts on\\nvar i=0;\\nvar c=0;\\nvar player = ns.getPlayer();\\nvar fserver = ns.getServer(server);\\nvar contstantRam = ns.getScriptRam(\\\"/newserver/OpsScript.js\\\"); //grabbing script RAM values\\nvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\nvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\nvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\nvar maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n// ns.print(`ServerSecurity:${ns.getServerSecurityLevel(server)} - MinSecurity:${((ns.getServerMinSecurityLevel(server))/0.05)}`)\\n// var weakenThreads = (ns.getServerSecurityLevel(server)-((ns.getServerMinSecurityLevel(server))/0.05));\\nvar weakenThreads = (ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)) / 0.05;\\n// var maxGrowThreads = ((maxRam/growscriptRam)-(weakenscriptRam*2000));\\nvar maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * weakenThreads));\\nvar cs = ns.getServerSecurityLevel(server);\\nvar ms = ns.getServerMinSecurityLevel(server);\\nvar mm = ns.getServerMaxMoney(server);\\nvar ma = ns.getServerMoneyAvailable(server);\\n\\n// ns.print(`Security:${ns.getServerMinSecurityLevel(server)}, hackscriptRam:${hackscriptRam}, weakenThreads:${weakenThreads}`)\\n// ns.print(`Growth threads:${maxGrowThreads}`)\\nif(weakenThreads < 1){ weakenThreads = 1}\\n \\n \\n//Priming the server.  Max money and Min security must be acheived for this to work\\nif ((ma < mm)==true)\\n{\\nns.exec('/newserver/weaken.js',server2,weakenThreads,server,0);\\nns.exec('/newserver/grow.js',server2,maxGrowThreads,server,0);\\nvar WeakenTime = (weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\nmm = ns.getServerMaxMoney(server);\\nma = ns.getServerMoneyAvailable(server);\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n \\n//If Max Money is true, making sure security level is at its minimum\\nif((cs>ms)==true)\\n{\\n \\nns.exec('/newserver/weaken.js',server2,weakenThreads,server,0);\\nWeakenTime = (weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n//Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\n \\nvar HPercent = (hackPercent(fserver,player)*100);\\nvar GPercent = (growPercent(fserver,1,player,1));\\nWeakenTime = (weakenTime(fserver,player));\\nvar GrowTime = (growTime(fserver,player));\\nvar HackTime = (hackTime(fserver,player));\\n \\nvar growThreads = Math.round(((5/(GPercent-1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\nvar hackThreads = Math.round((50/HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\nweakenThreads = Math.round((weakenThreads - (growThreads*0.004))); //Getting required threads to fully weaken the server\\n \\nvar totalRamForRun = (hackscriptRam*hackThreads)+(growscriptRam*growThreads)+(weakenscriptRam*weakenThreads) //Calculating how much RAM is used for a single run\\nvar sleepTime = (WeakenTime/(maxRam/totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n \\n//if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n//{sleepTime = 500;\\n//}\\n \\nvar shiftCount = maxRam/totalRamForRun;\\nvar offset = sleepTime/2\\nvar gOffset = offset/4\\nvar hOffset = offset/2\\n \\n \\nwhile(true)\\n {  \\n     var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n     var gsleep = ((WeakenTime - GrowTime-gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n     var hsleep = ((WeakenTime - HackTime-hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n     var UsedRam = ns.getServerUsedRam(server2);\\n    \\n \\n    if((totalRamForRun>= (maxRam-UsedRam))==false) //making sure I have enough RAM to do a full run\\n    {\\n    ns.exec('/newserver/weaken.js',server2,weakenThreads,server,wsleep,i);\\n    ns.exec('/newserver/grow.js',server2,growThreads,server,gsleep,i);\\n    ns.exec('/newserver/hack.js',server2,hackThreads,server,hsleep,i);\\n    \\n    if (c<shiftCount)\\n    {await ns.sleep(sleepTime)\\n    c++\\n    }\\n    else\\n    {\\n       await ns.sleep(sleepTime+offset);\\n       c=0;\\n    }\\n    \\n    \\n    i++\\n    }\\n    else{\\n       await ns.sleep(1000) \\n    }\\n }\\n await ns.sleep(120000)\\n}\\n\\nexport function hackPercent(server, player){\\n \\n    const balanceFactor = 240;\\n    const difficultyMult = (100 - server.hackDifficulty) / 100;\\n    const skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n    const percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / balanceFactor;\\n    if (percentMoneyHacked < 0) {\\n      return 0;\\n    }\\n    if (percentMoneyHacked > 1) {\\n      return 1;\\n    }\\n    return percentMoneyHacked * 1//BitNodeMultipliers.ScriptHackMoney;\\n}\\n\\n\\nexport function growPercent(server, threads, player, cores = 1) {\\n \\n    const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n    const growthRate = 1.03//CONSTANTS.ServerBaseGrowthRate;\\n    let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n    if (adjGrowthRate > 1.0035/*CONSTANTS.ServerMaxGrowthRate*/) {\\n        adjGrowthRate = 1.0035/*CONSTANTS.ServerMaxGrowthRate*/;\\n    }\\n    const serverGrowthPercentage = server.serverGrowth / 100;\\n    const numServerGrowthCyclesAdjusted =\\n        numServerGrowthCycles * serverGrowthPercentage * 1//BitNodeMultipliers.ServerGrowthRate;\\n    const coreBonus = 1 + (cores - 1) / 16;\\n    return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.hacking_grow_mult * coreBonus);\\n}\\n \\nexport function weakenTime(server, player) {\\n \\n    const weakenTimeMultiplier = 4;\\n    return weakenTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function growTime(server, player) {\\n \\n    const growTimeMultiplier = 3.2;\\n    return growTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function hackTime(server, player) {\\n \\n    return utilCalculateHackingTime(server,player) * 1000;\\n}\\n \\nfunction utilCalculateIntelligenceBonus(intelligence, weight = 1) {\\n    return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n \\nfunction utilCalculateHackingTime(server, player) {\\n    \\n    const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n    const baseDiff = 500;\\n    const baseSkill = 50;\\n    const diffFactor = 2.5;\\n    let skillFactor = diffFactor * difficultyMult + baseDiff;\\n    skillFactor /= player.hacking + baseSkill;\\n    const hackTimeMultiplier = 5;\\n    const hackingTime =\\n        (hackTimeMultiplier * skillFactor) /\\n        (player.hacking_speed_mult * utilCalculateIntelligenceBonus(player.intelligence, 1));\\n    return hackingTime;\\n}\",\"filename\":\"/SimpleScripts/OPsScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"alpha-2\",\"moduleSequenceNumber\":41129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The goal here is to make a usable priority queue for usage in other functions.\\n// Credit for code used for priority queue goes to: https://www.geeksforgeeks.org/implementation-priority-queue-javascript/\\n\\n// User defined class to store element and its priority\\nexport class QElement {\\n\\tconstructor(element, priority) {\\n\\t\\tthis.element = element;\\n\\t\\tthis.priority = priority;\\n\\t}\\n}\\n\\n// PriorityQueue class\\nexport default class PriorityQueue {\\n\\n\\t// An array is used to implement priority\\n\\tconstructor() {\\n\\t\\tthis.items = [];\\n\\t}\\n\\n\\t// functions to be implemented enqueue function to add element to the queue as per priority\\n\\tenqueue(element, priority) {\\n\\t\\t// creating object from queue element\\n\\t\\tvar qElement = new QElement(element, priority);\\n\\t\\tvar contain = false;\\n\\n\\t\\t// iterating through the entire item array to add element at the correct location of the Queue\\n\\t\\tfor (var i = 0; i < this.items.length; i++) {\\n\\t\\t\\tif (this.items[i].priority > qElement.priority) {\\n\\t\\t\\t\\t// Once the correct location is found it is\\n\\t\\t\\t\\t// enqueued\\n\\t\\t\\t\\tthis.items.splice(i, 0, qElement);\\n\\t\\t\\t\\tcontain = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// if the element have the highest priority it is added at the end of the queue\\n\\t\\tif (!contain) {\\n\\t\\t\\tthis.items.push(qElement);\\n\\t\\t}\\n\\t}\\n\\n\\t// dequeue method to remove element from the queue\\n\\tdequeue() {\\n\\t\\t// return the dequeued element and remove it. if the queue is empty returns Underflow\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"Underflow\\\";\\n\\t\\treturn this.items.shift();\\n\\t}\\n\\n\\t// front function\\n\\tfront() {\\n\\t\\t// returns the highest priority element in the Priority queue without removing it.\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"No elements in Queue\\\";\\n\\t\\treturn this.items[0];\\n\\t}\\n\\n\\t// rear function\\n\\trear() {\\n\\t\\t// returns the lowest priority element of the queue\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"No elements in Queue\\\";\\n\\t\\treturn this.items[this.items.length - 1];\\n\\t}\\n\\n\\t// isEmpty function\\n\\tisEmpty() {\\n\\t\\t// return true if the queue is empty.\\n\\t\\treturn this.items.length == 0;\\n\\t}\\n\\n\\t// printQueue function\\n\\t// prints all the element of the queue\\n\\tprintPQueue() {\\n\\t\\tvar str = \\\"\\\";\\n\\t\\tfor (var i = 0; i < this.items.length; i++)\\n\\t\\t\\tstr += this.items[i].element + \\\" \\\";\\n\\t\\treturn str;\\n\\t}\\n\\n}\",\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":41130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default class ServerNode {\\n\\n\\tconstructor(name, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, servers) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.hackLvlReq = hackLvlReq;\\n\\t\\tthis.reqPorts = reqPorts;\\n\\t\\tthis.exploited = exploited;\\n\\t\\tthis.traversed = traversed;\\n\\t\\tthis.hasCCT = hasCCT;\\n\\t\\tthis.cctName; // Probably want to include what type it is, catagorize it, solve, somehow later down the line.\\n\\t\\tthis.maxRam = maxRam;\\n\\t\\tthis.freeRam; // Consider tracking usedRam instead? [Add when running script, remove on completed (will need to await)]\\n\\t\\tthis.reservedRam = 0;\\n\\t\\tthis.adjServerNodes = servers;\\n\\t\\t// TODO: possibly track running scripts/RAM  too?\\n\\t}\\n\\n\\tgetName(){\\n\\t\\treturn this.name;\\n\\t}\\n\\t\\n\\tgetExploitsReq() {\\n\\t\\treturn this.reqPorts;\\n\\t}\\n\\n\\tsetExploited() {\\n\\t\\tthis.exploited = true;\\n\\t}\\n\\tisExploited(){\\n\\t\\treturn this.exploited;\\n\\t}\\n\\n\\tgetReqHackLvl(){\\n\\t\\treturn this.hackLvlReq;\\n\\t}\\n\\n\\treserveRam(ram){\\n\\t\\tthis.reservedRam += ram;\\n\\t}\\n\\tfreeRam(ram){\\n\\t\\tthis.reservedRam -= ram;\\n\\t}\\n\\n\\t// TODO: Account for RAM usage/calculation & reservation for optimizing script usage!\\n\\t// When executing a script on the given server, add it to the usedRam value here, as well as a handle for the\\n\\t// script that was ran (so it can be killed? Or so it can be tracked?)\\n\\t// Ideally I'd like to spawn these exec's off as threads, such that when they are completed, that RAM is 'freed' here.\\n\\t// \\t\\t- This would mean calling back to the controlScript from the exec'd script.\\n\\t// Alternatively, if we know exactly how much time it's going to take, we can free the RAM after that amount of time.\\n\\n\\t// The proper method to do this would be using Netscript PORTS! (OR javascript sockets I guess if I wanted to cheat)\\n}\",\"filename\":\"/lib/ServerNode.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":43348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Common constants\\nexport const HOME = \\\"home\\\";\\n\\n// Common script names\\nexport const WEAKEN = \\\"weaken.js\\\";\\nexport const GROW = \\\"grow.js\\\";\\nexport const HACK = \\\"hack.js\\\";\\nexport const VIRUS = \\\"/SimpleScripts/virus.js\\\"\\n\\n// Port labels\\nexport const CONTROL_INBOUND_PORT = 0;\\nexport const AUTO_NODE_INBOUND_PORT = 20 \\n// Port commands\\nexport const PAUSE = \\\"PAUSE\\\";\\nexport const UNPAUSE = \\\"UNPAUSE\\\"\\nexport const KILL = \\\"KILL\\\";\",\"filename\":\"/lib/customConstants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":41132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO: Make this the ultimate controll script!\\n * The goal of this script is to basically be a glorified events manager.\\n * [] Then the hackEventCoordinator should manage how we stagger out weaken, grow, and hack commands, \\n * and what vulnerable servers run how many of the threads for each distributed attack!\\n * \\n * The contractSolver will ideally automatically solve contracts, and noify me of their completion, so I can choose rep or $$$.\\n * - possibly allow myself to assign which company to build rep for, if this is even automatable.\\n * [] MVP for now is just identifying which servers have cct files and notifying me.\\n * \\t\\t- Might be able to run them with a script? Needs further research.\\n * \\n * Should map out programs that need stop/start from this script w/ their RAM usage, so we know how much we need to\\n * reserve for their respective server! (I.E. autoNode on home takes up X ram, so when we calculate how much to \\n * use for threading, we take that reserved amount into account and avoid using it)\\n * - More along this vein, I could very well do ram calcs ahead of time and pass them on as args to other scripts to avoid\\n *   eating up unnecessary RAM. [OPTIMIZATION] \\n * - Or try to keep track of this via ports... (Seems messy)\\n * \\n * // Would be nice if we had a list of known servers we need to backdoor for FACTIONS, so it would give a toast notification!\\n */\\nimport PriorityQueue from \\\"lib/PriorityQueue.js\\\";\\nimport ServerNode from \\\"lib/ServerNode.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport {\\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n} from \\\"lib/formulasHackingFacade.js\\\";\\nimport Bucket from \\\"lib/Bucket.js\\\";\\nvar player;\\nvar serverMap;\\nvar controlCycle;\\n// Servers to check through for value/hacking list\\nvar vulnerableServers; // List of servers that have already been cracked (Possibly not hackable yet)\\nvar serversToExploit;\\nvar hackableServers;\\nvar notHackableServers;\\nvar topTargets;\\nvar exploits;\\n// For traversal\\nlet queuedServers;\\nlet traversedServers;\\n\\n// Function labels for control cycle\\nconst EXPLOIT_CHECK = 0;\\nconst LVL_UP_CHECK = 1;\\n\\n// Timers\\nvar lastAvailableExploitsCheck;\\n\\n//Player stats to listen to\\nvar hackingLvl;\\n\\nasync function init(ns) {\\n\\tplayer = ns.getPlayer();\\n\\t// If need be, could make an \\\"Event\\\" wrapper class that is the function, \\n\\t// UUID(name, effectively), and other useful vars for ordering.\\n\\n\\t// High level functions for the main control loop!\\n\\t// Can be inserted & removed as deemed necessary!\\n\\n\\tcontrolCycle = new Map();\\n\\tcontrolCycle.set(EXPLOIT_CHECK, function (ns) { exploitCheck(ns) });\\n\\tcontrolCycle.set(LVL_UP_CHECK, function (ns) { levelUpCheck(ns) });\\n\\t// controlCycle.set(EVALUATE_TARGETS, function (ns) { primeHackableServers(ns) });\\n\\tcontrolCycle.set(PRIME_ATTACK, function (ns) { multiStaggeredHack(ns) });\\n\\t// controlCycle.set() //Idk, X_PORT_LISTEN maybe? (I.E. for Node, when that is useful...)\\n\\t// Additional EventQueue?\\n\\tserverMap = new Map();\\n\\tvulnerableServers = [];\\n\\tserversToExploit = new PriorityQueue(); // Prioritized by # of exploits required\\n\\texploits = 0;\\n\\n\\thackableServers = [];\\n\\tnotHackableServers = new PriorityQueue(); // Prioritized by min hacking level required\\n\\n\\ttopTargets = []\\n\\n\\tqueuedServers = []\\n\\ttraversedServers = [HOME]\\n\\tlastAvailableExploitsCheck = 0;\\n\\thackingLvl = 1;\\n}\\n\\nexport async function main(ns) {\\n\\tinit(ns);\\n\\tcountExploits(ns);\\n\\n\\t// Traversal should generate a list of all servers, ideally seperating them into hackable/notHackable\\n\\t// Evaluating Servers & Cracking them!\\n\\ttraverseServers(ns);\\n\\n\\tlet running = true;\\n\\twhile (running) {\\n\\t\\tfor (let [key, value] of controlCycle.entries()) {\\n\\t\\t\\t// ns.print(`Key: ${key}, ${controlCycle.size}`)\\n\\t\\t\\tvalue(ns);\\n\\t\\t}\\n\\t\\tawait ns.sleep(2500);\\n\\t}\\n\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tprofileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tattackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\n// INITIAL traversal of ALL servers, to split them up into catagories for future processing!\\n// Evaluating Servers & Cracking them!\\nasync function traverseServers(ns) {\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\tns.print(`Initial servers:${queuedServers}`)\\n\\tlet server;\\n\\twhile (queuedServers.length > 0) {\\n\\t\\tserver = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\t\\tns.print(`Traversing server: ${server}`)\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n}\\n\\nasync function levelUpCheck(ns) {\\n\\tns.print(\\\"Entered Level Up Check\\\")\\n\\tif (ns.getHackingLevel() !== hackingLvl) {\\n\\t\\thackingLvl = ns.getHackingLevel();\\n\\t\\t// Checks if there are no un-hackable servers remaining, will remove this from controlCycle\\n\\t\\tif (notHackableServers.length < 1) {\\n\\t\\t\\tcontrolCycle.delete(LVL_UP_CHECK);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Servers that are now hackable will be moved onto the hackable stack/list\\n\\t\\tlet server;\\n\\t\\twhile (serverMap[notHackableServers[0]].getReqHackLvl() <= hackingLvl) {\\n\\t\\t\\tserver = notHackableServers.shift();\\n\\t\\t\\thackableServers.push(server);\\n\\n\\t\\t}\\n\\t\\t// sort after adding\\n\\t\\tsortHackableServers(ns);\\n\\t\\t// TODO: Pick top X servers to put in event queue for Priming/Attacking\\n\\t\\t// - Priming & attack bits should target the top X positions!\\n\\t\\t// - Create them based on number of available hackable servers.\\n\\t}\\n}\\n\\nasync function multiStaggeredHack(ns){\\n\\tlet topN = 5; // Maybe tweak this value later\\n\\tfor(let i = 0; i < topN; i++){\\n\\t\\tlet server = hackableServers[i]\\n\\t\\tif(isPrimed(ns, server)){\\n\\t\\t\\tattackTarget(ns, server);\\n\\t\\t}else{\\n\\t\\t\\tprimeServer(ns, server);\\n\\t\\t}\\n\\t}\\n}\\n\\n// Kicks off the initial round of priming servers!\\nasync function primeHackableServers(ns){\\n\\t\\n}\\n\\nexport async function countExploits(ns) {\\n\\tlet changed = false;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tlastAvailableExploitsCheck = getTime();\\n\\treturn changed;\\n}\\n\\nasync function exploitCheck(ns) {\\n\\tns.print(\\\"Entered Exploit Check\\\")\\n\\tif (exploits < 5 && (getTime() - lastAvailableExploitsCheck) > 10) {\\n\\t\\tlet changed = countExploits(ns);\\n\\t\\tif (changed) {\\n\\t\\t\\tcrackExploitableServers(ns);\\n\\t\\t}\\n\\t} else if (exploits === 5) {\\n\\t\\tcontrolCycle.delete(EXPLOIT_CHECK);\\n\\t\\tns.print(\\\"Canceling Exploit Check Task\\\")\\n\\t}\\n}\\n\\nasync function crackExploitableServers(ns) {\\n\\tlet server;\\n\\twhile (exploits >= serversToExploit.front().getExploitsReq()) {\\n\\t\\tserver = serversToExploit.dequeue();\\n\\t\\tcrackServer(ns, server.getName(), server.getExploitsReq);\\n\\t\\tinfectVulnerableServer(ns, server);\\n\\t\\tvulnerableServers.push(server);\\n\\t\\tserverMap[server].setExploited();\\n\\t}\\n}\\n\\nasync function crackServer(ns, server, reqPorts) {\\n\\tswitch (reqPorts) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.sqlinject(server)\\n\\t\\tcase 4:\\n\\t\\t\\tns.httpworm(server)\\n\\t\\tcase 3:\\n\\t\\t\\tns.relaysmtp(server)\\n\\t\\tcase 2:\\n\\t\\t\\tns.ftpcrack(server)\\n\\t\\tcase 1:\\n\\t\\t\\tns.brutessh(server)\\n\\t\\tdefault:\\n\\t\\t\\tns.nuke(server)\\n\\t}\\n}\\n\\n// Used for initial traversal\\nexport async function processServer(ns, server) {\\n\\tns.print(`Processing Server: ${server}`)\\n\\tlet exploited = ns.hasRootAccess(server);\\n\\tif (!exploited) {\\n\\t\\tlet reqPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t// Attempt to crack\\n\\t\\tif (reqPorts <= exploits) {\\n\\t\\t\\tcrackServer(ns, server, reqPorts);\\n\\t\\t} else {\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\tserversToExploit.enqueue(server, reqPorts);\\n\\t\\t}\\n\\t}\\n\\n\\t// Add to vulnerable server list\\n\\texploited = ns.hasRootAccess(server);\\n\\tif (exploited) {\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n\\t// Continues with the traversal\\n\\tlet subServers = ns.scan(server)\\n\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\tlet subServer = subServers[index];\\n\\t\\tif (!traversedServers.includes(subServer) && !queuedServers.includes(subServer)) {\\n\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t}\\n\\t}\\n\\tns.print(`${server}'s subservers: ${subServers}`)\\n\\n\\t// Split into hackable/notHackable groupings\\n\\tlet hackLvlReq = ns.getServerRequiredHackingLevel(server);\\n\\tlet maxRam = ns.getServerMaxRam(server);\\n\\tisHackable();\\n\\tlet traversed = true;\\n\\t// TODO: hasCCT check?\\n\\tlet hasCCT = false;\\n\\t// Add server to map w/ it's relevant info stored in a ServerNode for later ease of access.\\n\\tmap.set(server, new ServerNode(server, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, subServers));\\n}\\n\\nasync function isHackable(server) {\\n\\tlet reqHackingLvl = ns.getServerRequiredHackingLevel(server);\\n\\tif (ns.getHackingLevel() >= reqHackingLvl) {\\n\\t\\thackableServers.push(server);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tnotHackableServers.enqueue(server, reqHackingLvl);\\n\\t}\\n\\treturn false;\\n}\\n\\nasync function infectVulnerableServer(ns, server) {\\n\\tawait ns.scp(WEAKEN, server);\\n\\tawait ns.scp(GROW, server);\\n\\tawait ns.scp(HACK, server);\\n}\\n\\nexport async function profileTargets(ns) {\\n\\t// TODO: What we REALLY want this function to do is SORT targets by value!\\n\\t// topTargets should no longer exist once this is accomplished!\\n\\t// Q1. How to establish server value\\n\\t// Q2. How to initially sort, and then maintain the sorted list?\\n\\t// - Probably with a datastructure capable of storing &\\n\\t//\\t sorting ServerNodes with it's own evaluation & comparison function\\n\\n\\tsortHackableServers(ns);\\n\\t// Once sorted, we want to allocate the right order & correct amount of threads distributed accross servers.\\n\\t// Then, once we have enough allocated to doing those three things (perhaps with a 2nd layer to buffer)\\n\\t// we can move on to the next highest valued server to do the same thing, and so on...\\n\\t// - To avoid having to re-allocate, we would be listening via ports for when they complete, so we know when we need to launch new tasks.\\n\\t//  - OR scheduling them such that they are back to back always (second layer)\\n}\\n\\nfunction sortHackableServers(ns) {\\n\\thackableServers.sort(function (a, b) {\\n\\t\\t// Determines which server has a higher value based on amount possible to earn per second. ($/rate)\\n\\t\\tlet serverA = ns.getServer(a);\\n\\t\\tlet serverB = ns.getServer(b);\\n\\n\\t\\tlet hackValueA = hackPercent(serverA, player) * getServerMaxMoney(serverA, player);\\n\\t\\tlet timeA = weakenTime(serverA, player) + growTime(serverA, player) + hackTime(serverA, player);\\n\\t\\tlet hackValueB = hackPercent(serverB, player) * getServerMaxMoney(serverB, player);\\n\\t\\tlet timeB = weakenTime(serverB, player) + growTime(serverB, player) + hackTime(serverB, player);\\n\\n\\t\\tlet serverAValue = hackValueA / timeA;\\n\\t\\tlet serverBValue = hackValueB / timeB;\\n\\t\\treturn serverAValue > serverBValue ? 1 : serverAValue < serverBValue ? -1 : 0;\\n\\t});\\n}\\n\\n// Could also use ports to ensure things are synced up via comm channels, but not sure if that would add to RAM usage..\\n// It does not! Wow. I'll totally just do that then, that seems way easier than guessing timings!\\n// Say port 1 is for weaken comms, 2 is for growth, and 3 is for hacking!\\nasync function primeServer(ns, server) {\\n\\t/**\\n\\t * PRIMING server.\\n\\t * Growing to max, and weakening to min\\n\\t */\\n\\tlet _server = ns.getServer(server);\\n\\tvar maxRam = (ns.getServerMaxRam(server) - ns.getScriptRam(WEAKEN));\\n\\n\\tvar sleepBuffer = 1000; // This can likely be lowered a lot.\\n\\n\\tvar weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n\\tvar maxGrowThreads = ((maxRam / ns.getScriptRam(GROW)) - (ns.getScriptRam(WEAKEN) * 2000));\\n\\n\\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\tlet availalbeMoney = ns.getServerMoneyAvailable(server);\\n\\tif (availalbeMoney < maxMoney) {\\n\\t\\t// Grow money\\n\\t\\tdistributeAttackLoad(server, WEAKEN, weakenThreads, 0);\\n\\t\\tdistributeAttackLoad(server, Grow, weakenThreads, 50);\\n\\t\\t// ns.exec(WEAKEN, bucketServer, weakenThreads, server, 0);\\n\\t\\t// ns.exec(GROW, bucketServer, maxGrowThreads, server, 0);\\n\\t\\tawait ns.sleep(weakenTime(_server, player) + sleepBuffer);\\n\\t}\\n\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(server);\\n\\tlet securityLvl = ns.getServerSecurityLevel(server);\\n\\tif (securityLvl > minSecurity) {\\n\\t\\t// Weaken Security\\n\\t\\t// ns.exec(WEAKEN, bucketServer, weakenThreads, server, 0);\\n\\t\\tdistributeAttackLoad(server, WEAKEN, weakenThreads, 100);\\n\\t\\tawait ns.sleep(weakenTime(_server, player) + sleepBuffer);\\n\\t}\\n\\n\\t/**\\n\\t * Server is PRIMED\\n\\t */\\n}\\n\\nasync function attackTarget(ns, server) {\\n\\t/** \\n\\t * All of this should be seperated out into a seperate ATTACK portion!\\n\\t * So it can easily be looped.\\n\\t * Ideally what I should do for the first round is say, choose the top 5 valued servers\\n\\t * - Focus on priming them as fast as possible\\n\\t * Then move into the next stage for them, which would be the ATTACK phase!\\n\\t * - Attack phase could even be thought of as a unique EVENT in the EVENT_CYCLE that gets added once it is PRIMED\\n\\t * - Then we remove the PRIME EVENT from the EVENT_CYCLE\\n\\t */\\n\\n\\tlet _server = ns.getServer(server);\\n\\t// PRINCIPLE: Make all calculations in real time! (Don't store the values!)\\n\\t// Should make functions for more complex vars. I.E. threadCounts for grow, weaken, hack.\\n\\t// Should give the amount of threads needed to grow by 200%\\n\\tvar growThreads = Math.ceil(((5 / (growPercent(_server, 1, player, 1) - 1))));\\n\\t// Should use this amount once determined to split growth across bucket servers\\n\\tvar hackThreads = threadsToHackPercent(_server, .5);  //Getting the amount of threads I need to hack 50% of the funds\\n\\t// TODO: Double check this calculation. It looks horrendously wrong\\n\\tvar weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n\\tweakenThreads = Math.ceil((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n\\t// TODO: Use calculated thread counts & timing to do segmented hack!\\n\\t// TODO: Split out bit that isn't related to getting the server to max/min state to it's own function!\\n\\tdistributeAttackLoad(server, WEAKEN, weakenThreads, 0);\\n\\tdistributeAttackLoad(server, GROW, growThreads, 50);\\n\\tdistributeAttackLoad(server, HACK, hackThreads, 100);\\n}\\n\\nasync function distributeAttackLoad(targetServer, script, totalThreads, delay) { // Consider doing delays by time stamp?\\n\\tlet scriptRam = ns.getScriptRam(script);\\n\\tlet host;\\n\\tlet ram;\\n\\tlet threads;\\n\\t// Sorted list of vulnerable servers by available free RAM\\n\\tsortVulnerableServersByFreeRam();\\n\\tfor (let i = 0; i < vulnerableServers.length; i++) {\\n\\t\\t// figure out how many threads we can run of our script on the given server\\n\\t\\thost = vulnerableServers[i];\\n\\t\\tram = getServerRam(host);\\n\\t\\tthreads = Math.floor((ram[0] - ram[1]) / scriptRam);\\n\\t\\tif (threads > 0) {\\n\\t\\t\\t// Subtract threads from totalThreads value!\\n\\t\\t\\ttotalThreads -= threads;\\n\\t\\t\\tns.exec(script, host, threads, targetServer, delay);\\n\\t\\t} else {\\n\\t\\t\\t// Not enough threads to continue attacking target...\\n\\t\\t\\t// This will defaintely throw off the timing, so I do need some kind of schedule manager for timing attacks\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif(totalThreads <= 0){\\n\\t\\t\\treturn; // Done distributing the attack load!\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Queue EVENT for this!\\n\\t// TODO: Remove EVENT for this!\\n}\\n\\n// TODO: EVENT for determining current set of targets!\\n// - Prep server\\n\\nfunction sortVulnerableServersByFreeRam() {\\n\\tvulnerableServers.sort(function (a, b) {\\n\\t\\tlet serverAFreeRam = ns.getServerMaxRam(a) - ns.getServerUsedRam(a);\\n\\t\\tlet serverBFreeRam = ns.getServerMaxRam(b) - ns.getServerUsedRam(b);\\n\\t\\treturn serverAFreeRam < serverBFreeRam ? 1 : serverAFreeRam > serverBFreeRam ? -1 : 0;\\n\\t});\\n}\\n\\nasync function distribute(totalThreads, baseRam) {\\n\\tbuckets = [];\\n\\t// TODO: Iterate through vulnerable serverNodes, creating a 'bucket' for each one\\n\\t// TODO: Figure out calculation to determine how many threads can fit on each server!\\n\\tfor (let [key, value] of serverMap.entries()) {\\n\\t\\tif (value.isExploited()) {\\n\\t\\t\\t// Vulnerable serverNode.\\n\\t\\t\\t// Calc how manny threads can be run on this server!\\n\\t\\t\\tlet threads = 0;\\n\\t\\t\\tlet resourcesToUse = 0;\\n\\t\\t\\t// TODO: Reserve serverNode's resources (calc ram usage & set it?)\\n\\t\\t\\t// \\t- might want to set up serverNode resource w/ bucket UUID, such that once the bucket task is complete,\\n\\t\\t\\t//    and being removed, it can clear the reserved RAM from the serverNode.\\n\\t\\t\\tif (fits) {\\n\\t\\t\\t\\tvalue.reserveRam(resourcesToUse);\\n\\t\\t\\t\\t// Will need to free ram when either:\\n\\t\\t\\t\\t// - Ceasing Priming for a server\\n\\t\\t\\t\\t// - Changing targeted server priority (deciding to target another server)\\n\\t\\t\\t\\tbuckets.push(new Bucket(value, threads));\\n\\t\\t\\t}\\n\\t\\t\\t// Q. How to free ram once the task is completed?\\n\\t\\t\\t// \\t\\twait, don't we only actually need to free the reserved RAM once we execute the script!\\n\\t\\t\\t// \\t\\tOtherwise we can just check that server's free RAM!\\n\\t\\t}\\n\\t}\\n\\treturn buckets; // Buckets can then be iterated through to issue executes on the correct targets w/ appropriate threading!\\n}\\n\\nasync function doesScriptFitOnServer(script, server, threads) {\\n\\t// use script & threads to calc the RAM that will be taken up.\\n\\t// Check current Reserved RAM to see if that would be an issue\\n\\n\\t//Calculating how much RAM is used for a single run\\n\\tvar totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads)\\n}\\n\\n// Returns the amount of threads needed to hack X% of a server's money. (Enter percent as float)\\nfunction threadsToHackPercent(server, percent) {\\n\\treturn Math.floor(hackPercent(server, player) * percent);\\n}\\n// Returns time in seconds!\\nasync function getTime() {\\n\\treturn Date.now() / 1000;\\n}\",\"filename\":\"controllScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/Bucket.js\",\"url\":\"blob:file:///ed62d9d9-008e-4d29-9c37-6929be59f060\",\"moduleSequenceNumber\":41135},{\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"blob:file:///cb9d2606-3d55-45eb-ba68-ebda4a9bc84e\",\"moduleSequenceNumber\":41122},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///6d380b36-ca68-4adc-aeb7-eaad0a4ec008\",\"moduleSequenceNumber\":41132},{\"filename\":\"/lib/ServerNode.js\",\"url\":\"blob:file:///a6b3e82a-7636-49db-b9be-148c98dd1048\",\"moduleSequenceNumber\":43348},{\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"blob:file:///55117f52-8fd6-441f-adf0-939f4094b5d8\",\"moduleSequenceNumber\":41130},{\"filename\":\"controllScript.js\",\"url\":\"blob:file:///6396c0c5-3b5c-4dd8-b54e-cd125f74ec47\",\"moduleSequenceNumber\":47693}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":58797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO: Make this the ultimate controll script!\\n * The goal of this script is to basically be a glorified events manager.\\n * [] Then the hackEventCoordinator should manage how we stagger out weaken, grow, and hack commands, \\n * and what vulnerable servers run how many of the threads for each distributed attack!\\n * \\n * The contractSolver will ideally automatically solve contracts, and noify me of their completion, so I can choose rep or $$$.\\n * - possibly allow myself to assign which company to build rep for, if this is even automatable.\\n * [] MVP for now is just identifying which servers have cct files and notifying me.\\n * \\t\\t- Might be able to run them with a script? Needs further research.\\n * \\n * Should map out programs that need stop/start from this script w/ their RAM usage, so we know how much we need to\\n * reserve for their respective server! (I.E. autoNode on home takes up X ram, so when we calculate how much to \\n * use for threading, we take that reserved amount into account and avoid using it)\\n * - More along this vein, I could very well do ram calcs ahead of time and pass them on as args to other scripts to avoid\\n *   eating up unnecessary RAM. [OPTIMIZATION] \\n * - Or try to keep track of this via ports... (Seems messy)\\n * \\n * // Would be nice if we had a list of known servers we need to backdoor for FACTIONS, so it would give a toast notification!\\n */\\nimport PriorityQueue from \\\"lib/PriorityQueue.js\\\";\\nimport ServerNode from \\\"lib/ServerNode.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport { \\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n } from \\\"lib/formulasHackingFacade.js\\\";\\nvar player;\\nvar serverMap;\\nvar controlCycle;\\n// Servers to check through for value/hacking list\\nvar vulnerableServers; // List of servers that have already been cracked (Possibly not hackable yet)\\nvar serversToExploit;\\nvar hackableServers;\\nvar notHackableServers;\\nvar topTargets;\\nvar exploits;\\n// For traversal\\nlet queuedServers;\\nlet traversedServers;\\n\\n// Function labels for control cycle\\nconst EXPLOIT_CHECK = 0;\\nconst LVL_UP_CHECK = 1;\\n\\n// Timers\\nvar lastAvailableExploitsCheck;\\n\\n//Player stats to listen to\\nvar hackingLvl;\\n\\nasync function init(ns) {\\n\\tplayer = ns.getPlayer();\\n\\t// If need be, could make an \\\"Event\\\" wrapper class that is the function, \\n\\t// UUID(name, effectively), and other useful vars for ordering.\\n\\n\\t// High level functions for the main control loop!\\n\\t// Can be inserted & removed as deemed necessary!\\n\\n\\tcontrolCycle = new Map();\\n\\tcontrolCycle.set(EXPLOIT_CHECK, function () { exploitCheck(ns) });\\n\\tcontrolCycle.set(LVL_UP_CHECK, function () { levelUpCheck(ns) });\\n\\t// controlCycle.set() //Idk, X_PORT_LISTEN maybe? (I.E. for Node, when that is useful...)\\n\\t// Additional EventQueue?\\n\\tserverMap = new Map();\\n\\tvulnerableServers = [];\\n\\tserversToExploit = new PriorityQueue(); // Prioritized by # of exploits required\\n\\texploits = 0;\\n\\n\\thackableServers = [];\\n\\tnotHackableServers = new PriorityQueue(); // Prioritized by min hacking level required\\n\\n\\ttopTargets = []\\n\\n\\tqueuedServers = []\\n\\ttraversedServers = [HOME]\\n\\tlastAvailableExploitsCheck = 0;\\n\\thackingLvl = 1;\\n}\\n\\nexport async function main(ns) {\\n\\tns.print(\\\"TEST\\\")\\n\\tawait ns.sleep(\\\"50\\\");\\n\\tinit(ns);\\n\\tawait countExploits(ns);\\n\\n\\t// Traversal should generate a list of all servers, ideally seperating them into hackable/notHackable\\n\\t// Evaluating Servers & Cracking them!\\n\\ttraverseServers(ns);\\n\\n\\tlet running = true;\\n\\twhile (running) {\\n\\t\\tfor (let [key, value] of controlCycle.entries()) {\\n\\t\\t\\tvalue();\\n\\t\\t}\\n\\t\\tns.sleep(25);\\n\\t}\\n\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\n// INITIAL traversal of ALL servers, to split them up into catagories for future processing!\\n// Evaluating Servers & Cracking them!\\nasync function traverseServers(ns) {\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\tlet server;\\n\\twhile (queuedServers.length > 0) {\\n\\t\\tserver = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n}\\n\\nasync function levelUpCheck(ns) {\\n\\tif (ns.getHackingLevel() !== hackingLvl) {\\n\\t\\thackingLvl = ns.getHackingLevel();\\n\\t\\t// Checks if there are no un-hackable servers remaining, will remove this from controlCycle\\n\\t\\tif (notHackableServers.length < 1) {\\n\\t\\t\\tcontrolCycle.delete(LVL_UP_CHECK);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Servers that are now hackable will be moved onto the hackable stack/list\\n\\t\\tlet server;\\n\\t\\twhile (serverMap[notHackableServers[0]].getReqHackLvl() <= hackingLvl) {\\n\\t\\t\\tserver = notHackableServers.shift();\\n\\t\\t\\thackableServers.push(server);\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\t// sort after adding\\n\\t\\tsortHackableServers(ns);\\n\\t}\\n}\\n\\nexport async function countExploits(ns) {\\n\\tlet changed = false;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tlastAvailableExploitsCheck = getTime();\\n\\treturn changed;\\n}\\n\\nasync function exploitCheck(ns) {\\n\\tif (exploits < 5 && (getTime() - lastAvailableExploitsCheck) > 10) {\\n\\t\\tlet changed = await countExploits(ns);\\n\\t\\tif (changed) {\\n\\t\\t\\tcrackExploitableServers(ns);\\n\\t\\t}\\n\\t} else if (exploits === 5) {\\n\\t\\tcontrolCycle.delete(EXPLOIT_CHECK);\\n\\t}\\n}\\n\\nasync function crackExploitableServers(ns) {\\n\\tlet server;\\n\\twhile (exploits >= serversToExploit.front().getExploitsReq()) {\\n\\t\\tserver = serversToExploit.dequeue();\\n\\t\\tcrackServer(ns, server.getName(), server.getExploitsReq);\\n\\t\\tinfectVulnerableServer(ns, server);\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n}\\n\\nasync function crackServer(ns, server, reqPorts) {\\n\\tswitch (reqPorts) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.sqlinject(server)\\n\\t\\tcase 4:\\n\\t\\t\\tns.httpworm(server)\\n\\t\\tcase 3:\\n\\t\\t\\tns.relaysmtp(server)\\n\\t\\tcase 2:\\n\\t\\t\\tns.ftpcrack(server)\\n\\t\\tcase 1:\\n\\t\\t\\tns.brutessh(server)\\n\\t\\tdefault:\\n\\t\\t\\tns.nuke(server)\\n\\t}\\n}\\n\\n// Used for initial traversal\\nexport async function processServer(ns, server) {\\n\\tlet exploited = ns.hasRootAccess(server);\\n\\tif (!exploited) {\\n\\t\\tlet reqPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t// Attempt to crack\\n\\t\\tif (reqPorts <= exploits) {\\n\\t\\t\\tcrackServer(ns, server, reqPorts);\\n\\t\\t} else {\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\tserversToExploit.enqueue(server, reqPorts);\\n\\t\\t}\\n\\t}\\n\\n\\t// Add to vulnerable server list\\n\\texploited = ns.hasRootAccess(server);\\n\\tif (exploited) {\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n\\t// Continues with the traversal\\n\\tlet subServers = ns.scan(server)\\n\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\tlet subServer = subServers[index];\\n\\t\\tif (!traversedServers.includes(subServer)) {\\n\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t}\\n\\t}\\n\\n\\t// Split into hackable/notHackable groupings\\n\\tlet hackLvlReq = ns.getServerRequiredHackingLevel(server);\\n\\tlet maxRam = ns.getServerMaxRam(server);\\n\\tisHackable();\\n\\tlet traversed = true;\\n\\t// TODO: hasCCT check?\\n\\tlet hasCCT = false;\\n\\t// Add server to map w/ it's relevant info stored in a ServerNode for later ease of access.\\n\\tmap.set(server, new ServerNode(server, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, subServers));\\n}\\n\\nasync function isHackable(server) {\\n\\tlet reqHackingLvl = ns.getServerRequiredHackingLevel(server);\\n\\tif (ns.getHackingLevel() >= reqHackingLvl) {\\n\\t\\thackableServers.push(server);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tnotHackableServers.enqueue(server, reqHackingLvl);\\n\\t}\\n\\treturn false;\\n}\\n\\n// TODO: Completely revamp/replace this with Hacking event manager.\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(VIRUS, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t\\t- Will need to keep track of what scripts are running on which servers\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\nasync function infectVulnerableServer(ns, server) {\\n\\tawait ns.scp(WEAKEN, server);\\n\\tawait ns.scp(GROW, server);\\n\\tawait ns.scp(HACK, server);\\n}\\n\\nexport async function profileTargets(ns) {\\n\\t// TODO: What we REALLY want this function to do is SORT targets by value!\\n\\t// topTargets should no longer exist once this is accomplished!\\n\\t// Q1. How to establish server value\\n\\t// Q2. How to initially sort, and then maintain the sorted list?\\n\\t// - Probably with a datastructure capable of storing &\\n\\t//\\t sorting ServerNodes with it's own evaluation & comparison function\\n\\n\\tsortHackableServers(ns);\\n\\t// Once sorted, we want to allocate the right order & correct amount of threads distributed accross servers.\\n\\t// Then, once we have enough allocated to doing those three things (perhaps with a 2nd layer to buffer)\\n\\t// we can move on to the next highest valued server to do the same thing, and so on...\\n\\t// - To avoid having to re-allocate, we would be listening via ports for when they complete, so we know when we need to launch new tasks.\\n\\t//  - OR scheduling them such that they are back to back always (second layer)\\n}\\n\\nasync function sortHackableServers(ns){\\n\\thackableServers.sort(function (a, b) {\\n\\t\\t// Determines which server has a higher value based on amount possible to earn per second. ($/rate)\\n\\t\\tlet serverA = ns.getServer(a);\\n\\t\\tlet serverB = ns.getServer(b);\\n\\n\\t\\tlet hackValueA = hackPercent(serverA, player) * getServerMaxMoney(serverA, player);\\n\\t\\tlet timeA = weakenTime(serverA, player) + growTime(serverA, player) + hackTime(serverA, player);\\n\\t\\tlet hackValueB = hackPercent(serverB, player) * getServerMaxMoney(serverB, player);\\n\\t\\tlet timeB = weakenTime(serverB, player) + growTime(serverB, player) + hackTime(serverB, player);\\n\\n\\t\\tlet serverAValue = hackValueA / timeA;\\n\\t\\tlet serverBValue = hackValueB / timeB;\\n\\t\\treturn serverAValue > serverBValue ? 1 : serverAValue < serverBValue ? -1 : 0;\\n\\t});\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(VIRUS);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif (maxThreadCount <= 0) {\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t} else {\\n\\t\\t\\tswitch (topTargets.length) {\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet homeThreadCount = Math.floor((ns.getServerMaxRam(HOME) - ns.getServerUsedRam(HOME)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch (topTargets.length) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\\n\\n// Returns time in seconds!\\nasync function getTime() {\\n\\treturn Date.now() / 1000;\\n}\",\"filename\":\"/SimpleScripts/controllScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":42167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default class Bucket {\\n\\n\\t// Holder of host server & thread count to run an executed script with!\\n\\t// Intended as a util function for controlCycle to be generated with the `distribute` function & returned as a list\\n\\tconstructor(host, threads) {\\n\\t\\tthis.host = host;\\n\\t\\tthis.threads = threads;\\n\\t}\\n}\",\"filename\":\"/lib/Bucket.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":41135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet usedRam = ns.getServerUsedRam(\\\"home\\\")\\n\\tns.print(`TEST: ${usedRam}`)\\n\\tawait ns.sleep(10000)\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///3ad0861e-d603-4a28-8e61-91b6c60cd878\",\"moduleSequenceNumber\":44513}],\"dependents\":[],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":44513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"45.3.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55205345620,\"moneyMax\":1380133640500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1368,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"28.2.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":47701151013,\"moneyMax\":1192528775325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1242,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"88.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":21057610778,\"moneyMax\":526440269450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1066,\"serverGrowth\":62}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-840808.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":470503326,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"36.9.2.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":18828037137,\"moneyMax\":470700928425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":927,\"serverGrowth\":62}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"46.4.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32188273306,\"moneyMax\":804706832650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1029,\"serverGrowth\":92}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"49.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":16876110751,\"moneyMax\":421902768775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"82.1.1.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":13619941577,\"moneyMax\":340498539425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1054,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-395806.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"74665\",-23],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"31.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":18577765576,\"moneyMax\":464444139400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":984,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"99.6.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":22491754554,\"moneyMax\":562293863850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1247,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"45.0.0.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1792930190,\"moneyMax\":44823254750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1111,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"74.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1548,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-173849.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[194,17,51,56,59,184,186,29,87,183,58,127,116,156,112,73,144,133,24,94,135,144,45,89,94,94,47],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"63.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1184817410,\"moneyMax\":29620435250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":962,\"serverGrowth\":79}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"8.8.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":851300093,\"moneyMax\":21282502325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":959,\"serverGrowth\":65}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-905046.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[47,60,133,111,92,174,67,33,20,80,16,56,24,64,86,185,55,137,8,188,85,15,72],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"13.3.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":727683339,\"moneyMax\":18192083475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":73}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"31.0.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":567244427,\"moneyMax\":14181110675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"61.5.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":769963142,\"moneyMax\":19249078550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"48.6.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":955737101,\"moneyMax\":23893427525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"96.2.3.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1119130479,\"moneyMax\":27978261975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":882,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-351491.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,0,-6,-8,-7,5,-3,-1,6,4,-10,-2,1,2,3,-3,-9,-6,7,10,-8,3,10,-3,7,-2,10,3,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"33.6.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":807533529,\"moneyMax\":20188338225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"84.9.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":664537752,\"moneyMax\":16613443800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":90}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"11.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":816454938,\"moneyMax\":20411373450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"84.3.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":774849013,\"moneyMax\":19371225325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"86.5.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1004405139,\"moneyMax\":25110128475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"4.7.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":949166567,\"moneyMax\":23729164175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"88.6.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1041735019,\"moneyMax\":26043375475,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":809,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-209334.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"13616725219\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"99.7.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":765340358,\"moneyMax\":19133508950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":777,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"63.4.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":722978679,\"moneyMax\":18074466975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"78.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1306912945,\"moneyMax\":32672823625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":65}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"28.7.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1587369230,\"moneyMax\":39684230750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":772,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"4.3.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1182413390,\"moneyMax\":29560334750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":803,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"38.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1318206286,\"moneyMax\":32955157150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"61.3.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1043609018,\"moneyMax\":26090225450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":823,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"60.4.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":797844808,\"moneyMax\":19946120200,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":746,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"78.0.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":561582912,\"moneyMax\":14039572800,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":504,\"serverGrowth\":54}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"70.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":609346640,\"moneyMax\":15233666000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":524,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"87.2.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":277095222,\"moneyMax\":6927380550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":417,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"17.2.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":188138562,\"moneyMax\":4703464050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":409,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-384310.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,1,8,3,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"91.2.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":872838693,\"moneyMax\":21820967325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"69.8.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":347502972,\"moneyMax\":8687574300,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":449,\"serverGrowth\":50}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-970300-Aevum.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,17],[14,23],[20,29],[6,8],[17,23],[10,14],[6,7],[16,17],[6,14],[10,18],[14,24],[6,16],[22,31],[17,26],[16,17]],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"25.4.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":472993348,\"moneyMax\":11824833700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":564,\"serverGrowth\":63}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"10.4.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":373532814,\"moneyMax\":9338320350,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":407,\"serverGrowth\":33}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"87.0.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":153357957,\"moneyMax\":3833948925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":283,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"87.0.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":226076557,\"moneyMax\":5651913925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":341,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"92.7.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":384,\"serverGrowth\":46}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"64.2.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":74221164,\"moneyMax\":1855529100,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":266,\"serverGrowth\":64}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"45.2.0.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///74fd6ce0-e121-453e-b73d-a303fc74322f\",\"moduleSequenceNumber\":41733}],\"dependents\":[],\"ramUsage\":2,\"server\":\"n00dles\",\"moduleSequenceNumber\":41733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"87.8.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///62874030-7f79-4f58-84d1-2c43b1588cf5\",\"moduleSequenceNumber\":41734}],\"dependents\":[],\"ramUsage\":2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":41734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736972-Aevum.cct\",\"type\":\"Total Ways to Sum\",\"data\":31,\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"72.9.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0edd18bc-305e-44a9-acd4-df5129617e1a\",\"moduleSequenceNumber\":41735}],\"dependents\":[],\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":41735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"42.9.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///607ec919-e86b-42c8-89aa-a4f13212241c\",\"moduleSequenceNumber\":41736}],\"dependents\":[],\"ramUsage\":2,\"server\":\"joesguns\",\"moduleSequenceNumber\":41736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"98.9.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7113354f-4e73-4428-8cf1-51e80952e601\",\"moduleSequenceNumber\":41728}],\"dependents\":[],\"ramUsage\":2,\"server\":\"zer0\",\"moduleSequenceNumber\":41728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":16.31799999999999,\"minDifficulty\":8,\"moneyAvailable\":16.185518312050107,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"86.9.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///fe618779-55ad-4188-b1b8-18df07fb81ef\",\"moduleSequenceNumber\":41729}],\"dependents\":[],\"ramUsage\":2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":41729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"41.4.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///a47a972c-cbea-42d6-b493-70eeec9e5ec8\",\"moduleSequenceNumber\":41732}],\"dependents\":[],\"ramUsage\":2,\"server\":\"neo-net\",\"moduleSequenceNumber\":41732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":16.30199999999999,\"minDifficulty\":8,\"moneyAvailable\":16.115784674802747,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"36.5.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"82.2.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7c2d54d3-e7ae-425d-a776-a16ebcd1df31\",\"moduleSequenceNumber\":41737}],\"dependents\":[],\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":41737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"47.3.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///1b714975-d2d8-4301-9a53-1c60e183f95d\",\"moduleSequenceNumber\":41738}],\"dependents\":[],\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":41738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.187999999999999,\"minDifficulty\":5,\"moneyAvailable\":16.292473534717626,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"42.7.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-121111.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()())((()(a()()()(\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"78.4.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///8664f346-57aa-476f-9ac6-92234fcaaa59\",\"moduleSequenceNumber\":41730}],\"dependents\":[],\"ramUsage\":2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":41730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.309999999999999,\"minDifficulty\":5,\"moneyAvailable\":16.170637847167832,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.3.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":63253558,\"moneyMax\":1581338950,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":217,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"48.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":49898171,\"moneyMax\":1247454275,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":237,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"68.4.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///cc38f4f8-8cf3-462e-b471-69a9a6cb6c39\",\"moduleSequenceNumber\":41739}],\"dependents\":[],\"ramUsage\":2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":41739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":18.527999999999995,\"minDifficulty\":10,\"moneyAvailable\":11245.578324375454,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-478152-Aevum.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[79,27,189,73,23,14,79,172,15,17,66,184,61,119,2,199,166,102,144,195,31,64,193,24,55,126,158,5,73,162,60,35,17,148],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"94.2.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":524,\"serverGrowth\":41}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"54.4.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"54.7.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":755,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"18.1.1.0\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"98.6.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":364,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"34.5.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"25.5.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":533,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"95.2.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7c5bf0f2-a4cf-4a65-87d9-b716b85de9b7\",\"moduleSequenceNumber\":41731}],\"dependents\":[],\"ramUsage\":2,\"server\":\"CSEC\",\"moduleSequenceNumber\":41731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"93.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"43.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"15.6.8.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"darkweb\",\"moduleSequenceNumber\":47695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0909,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":105.4533,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":4242.009400867343}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":16.2513,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":16.303393534600875}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":12.8788,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":2022.1061705551647}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":58.5699,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":6.2292,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":20.7014,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":35.0685,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":6.1498,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":49.3349,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":90.4211,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":48.1477,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":20123.70962015491,\"lastPrice\":20054.491051096178,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":18.451958765547122,\"otlkMagForecast\":66.8427983457123,\"cap\":324973361,\"spreadPerc\":0.5,\"shareTxForMovement\":48232,\"shareTxUntilMovement\":48232,\"totalShares\":120700000,\"maxShares\":24100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":48013.15897237205,\"lastPrice\":47872.53494540759,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":true,\"otlkMag\":17.733785685048606,\"otlkMagForecast\":68.71617069636956,\"cap\":667090647,\"spreadPerc\":0.2,\"shareTxForMovement\":63183,\"shareTxUntilMovement\":63183,\"totalShares\":77400000,\"maxShares\":15500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":44632.3391642034,\"lastPrice\":44887.995974165075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":14.851880543556705,\"otlkMagForecast\":37.62758553379585,\"cap\":87918844,\"spreadPerc\":0.6,\"shareTxForMovement\":87464,\"shareTxUntilMovement\":87464,\"totalShares\":78100000,\"maxShares\":15600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":16384.450027710573,\"lastPrice\":16463.862536771383,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":14.846594796478822,\"otlkMagForecast\":36.1724636663405,\"cap\":50698693,\"spreadPerc\":0.3,\"shareTxForMovement\":86112,\"shareTxUntilMovement\":86112,\"totalShares\":119900000,\"maxShares\":24000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":31020.03988126776,\"lastPrice\":30865.904961192162,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":13.60952401211695,\"otlkMagForecast\":64.33769999141886,\"cap\":370887146,\"spreadPerc\":0.3,\"shareTxForMovement\":49670,\"shareTxUntilMovement\":49670,\"totalShares\":45500000,\"maxShares\":9100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":177918.9912741378,\"lastPrice\":176583.31868450082,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":false,\"otlkMag\":16.645376340861738,\"otlkMagForecast\":32.12931131069277,\"cap\":594161932,\"spreadPerc\":0.9,\"shareTxForMovement\":40402,\"shareTxUntilMovement\":40402,\"totalShares\":39300000,\"maxShares\":7900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":36130.291023934835,\"lastPrice\":35908.78116292213,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":9.497887517465815,\"otlkMagForecast\":39.378805540787326,\"cap\":20395412,\"spreadPerc\":0.6,\"shareTxForMovement\":69933,\"shareTxUntilMovement\":69933,\"totalShares\":112300000,\"maxShares\":22500000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":36608.769546429605,\"lastPrice\":36931.3807849009,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":false,\"otlkMag\":13.886898699351569,\"otlkMagForecast\":37.49562521542099,\"cap\":111493659,\"spreadPerc\":1,\"shareTxForMovement\":32989,\"shareTxUntilMovement\":32989,\"totalShares\":57300000,\"maxShares\":11500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":21427.414498709855,\"lastPrice\":21553.299176330598,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.3237489797354005,\"otlkMagForecast\":43.71351684851098,\"cap\":152006966,\"spreadPerc\":1,\"shareTxForMovement\":54919,\"shareTxUntilMovement\":54919,\"totalShares\":55900000,\"maxShares\":11200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":24933.060729687906,\"lastPrice\":25052.07582965241,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":9.293722838590053,\"otlkMagForecast\":41.07938617891091,\"cap\":113813750,\"spreadPerc\":0.2,\"shareTxForMovement\":92988,\"shareTxUntilMovement\":92988,\"totalShares\":100800000,\"maxShares\":20200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11021.423665384862,\"lastPrice\":11066.748772414714,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":10.474188854646659,\"otlkMagForecast\":41.33533265582786,\"cap\":210595217,\"spreadPerc\":0.2,\"shareTxForMovement\":59559,\"shareTxUntilMovement\":59559,\"totalShares\":65600000,\"maxShares\":13100000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":6020.413151693503,\"lastPrice\":5987.8731608633225,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":7.746436233285756,\"otlkMagForecast\":41.57739925037633,\"cap\":124861823,\"spreadPerc\":1,\"shareTxForMovement\":48958,\"shareTxUntilMovement\":48958,\"totalShares\":120100000,\"maxShares\":24000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":21115.216057571193,\"lastPrice\":21222.209641354788,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":8.401668274258704,\"otlkMagForecast\":58.149901176618805,\"cap\":217155865,\"spreadPerc\":0.9,\"shareTxForMovement\":68756,\"shareTxUntilMovement\":68756,\"totalShares\":45600000,\"maxShares\":9100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":24720.221910611843,\"lastPrice\":24617.177077653363,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":9.97581441023932,\"otlkMagForecast\":41.15297657584824,\"cap\":395936842,\"spreadPerc\":0.6,\"shareTxForMovement\":96534,\"shareTxUntilMovement\":96534,\"totalShares\":49400000,\"maxShares\":9900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":9154.760315525828,\"lastPrice\":9112.600761592357,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":5.446244304353769,\"otlkMagForecast\":42.932480189023124,\"cap\":12031935,\"spreadPerc\":0.7,\"shareTxForMovement\":115158,\"shareTxUntilMovement\":115158,\"totalShares\":62400000,\"maxShares\":12500000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8186.935315640773,\"lastPrice\":8232.026925079352,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":6.277661861422764,\"otlkMagForecast\":54.952168523625645,\"cap\":30992554,\"spreadPerc\":1,\"shareTxForMovement\":49331,\"shareTxUntilMovement\":49331,\"totalShares\":55700000,\"maxShares\":11100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":20117.307107559875,\"lastPrice\":20234.017640274185,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":6.071707315714612,\"otlkMagForecast\":57.88019181888359,\"cap\":137866470,\"spreadPerc\":0.5,\"shareTxForMovement\":122570,\"shareTxUntilMovement\":122570,\"totalShares\":27500000,\"maxShares\":5500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":30705.036866004146,\"lastPrice\":30568.102821806126,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":11.789924423016195,\"otlkMagForecast\":38.73212753568551,\"cap\":197978554,\"spreadPerc\":0.9,\"shareTxForMovement\":104363,\"shareTxUntilMovement\":104363,\"totalShares\":47900000,\"maxShares\":9600000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":19914.682137727774,\"lastPrice\":20025.829736703352,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":5.564084207072856,\"otlkMagForecast\":45.84902113081628,\"cap\":383210166,\"spreadPerc\":0.8,\"shareTxForMovement\":115565,\"shareTxUntilMovement\":115565,\"totalShares\":26400000,\"maxShares\":5300000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":18435.566081290868,\"lastPrice\":18779.443223136364,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.54,\"b\":true,\"otlkMag\":5.555535455651359,\"otlkMagForecast\":58.19599216180892,\"cap\":19348595,\"spreadPerc\":0.8,\"shareTxForMovement\":33520,\"shareTxUntilMovement\":33520,\"totalShares\":103000000,\"maxShares\":20600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6122.215251419996,\"lastPrice\":6180.66263323577,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":5.123675350834464,\"otlkMagForecast\":43.87730332174993,\"cap\":114700389,\"spreadPerc\":0.8,\"shareTxForMovement\":66694,\"shareTxUntilMovement\":66694,\"totalShares\":55800000,\"maxShares\":11200000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2716.558385091536,\"lastPrice\":2729.3260692772606,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":5.176218776501956,\"otlkMagForecast\":45.41451114957903,\"cap\":52539244,\"spreadPerc\":0.7,\"shareTxForMovement\":99986,\"shareTxUntilMovement\":99986,\"totalShares\":82000000,\"maxShares\":16400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":11517.173036496906,\"lastPrice\":11358.685616875679,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.9,\"b\":true,\"otlkMag\":11.208676694509974,\"otlkMagForecast\":61.59169730367776,\"cap\":127677207,\"spreadPerc\":1.5,\"shareTxForMovement\":80183,\"shareTxUntilMovement\":80183,\"totalShares\":28900000,\"maxShares\":5800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":1762.8100376520943,\"lastPrice\":1742.0848989883325,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.62,\"b\":true,\"otlkMag\":5.8304631902551955,\"otlkMagForecast\":55.030201662514436,\"cap\":146480418,\"spreadPerc\":0.8,\"shareTxForMovement\":69929,\"shareTxUntilMovement\":69929,\"totalShares\":33900000,\"maxShares\":6800000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":7032.950918623852,\"lastPrice\":7074.78552814505,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":5.5163086734430875,\"otlkMagForecast\":44.137780471682774,\"cap\":13552382,\"spreadPerc\":0.4,\"shareTxForMovement\":97981,\"shareTxUntilMovement\":97981,\"totalShares\":40100000,\"maxShares\":8000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":457.24911821781745,\"lastPrice\":446.7505945485239,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.2,\"b\":false,\"otlkMag\":5.396665563937447,\"otlkMagForecast\":42.33645119939864,\"cap\":44653803,\"spreadPerc\":1.3,\"shareTxForMovement\":48795,\"shareTxUntilMovement\":48795,\"totalShares\":22400000,\"maxShares\":4500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4270.841054762404,\"lastPrice\":4240.324305930796,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":5.259317525339707,\"otlkMagForecast\":53.40322312022176,\"cap\":88048753,\"spreadPerc\":0.8,\"shareTxForMovement\":73267,\"shareTxUntilMovement\":73267,\"totalShares\":11700000,\"maxShares\":2300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1783.4847356524515,\"lastPrice\":1773.715550265715,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.21592007204195,\"otlkMagForecast\":52.963708019137094,\"cap\":29239008,\"spreadPerc\":1,\"shareTxForMovement\":167742,\"shareTxUntilMovement\":167742,\"totalShares\":31000000,\"maxShares\":6200000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3190.9726493776434,\"lastPrice\":3145.2394049318177,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.98,\"b\":true,\"otlkMag\":5.424938115451208,\"otlkMagForecast\":55.263345367407666,\"cap\":67814857,\"spreadPerc\":1.4,\"shareTxForMovement\":53880,\"shareTxUntilMovement\":53880,\"totalShares\":9500000,\"maxShares\":1900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":5487.519799787468,\"lastPrice\":5610.430319158264,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.05,\"b\":false,\"otlkMag\":14.001831086552082,\"otlkMagForecast\":35.820427089724824,\"cap\":17407907,\"spreadPerc\":0.6,\"shareTxForMovement\":24175,\"shareTxUntilMovement\":24175,\"totalShares\":28200000,\"maxShares\":5600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":877.543148332587,\"lastPrice\":886.5008458713278,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.39,\"b\":true,\"otlkMag\":15.119241691087359,\"otlkMagForecast\":65.69682455789639,\"cap\":7952504,\"spreadPerc\":0.5,\"shareTxForMovement\":49440,\"shareTxUntilMovement\":49440,\"totalShares\":68600000,\"maxShares\":13700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":60010.94282307929,\"lastPrice\":59699.66843925459,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":8.26841118457281,\"otlkMagForecast\":56.51265808551171,\"cap\":92868501,\"spreadPerc\":0.4,\"shareTxForMovement\":208713,\"shareTxUntilMovement\":208713,\"totalShares\":17000000,\"maxShares\":3400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":10195.474524765326,\"lastPrice\":10235.905509384449,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":10.486337100824036,\"otlkMagForecast\":61.252022104181215,\"cap\":339002582,\"spreadPerc\":0.5,\"shareTxForMovement\":191037,\"shareTxUntilMovement\":191037,\"totalShares\":25500000,\"maxShares\":5100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":29,\"lastUpdate\":1644641921176,\"ticksUntilCycle\":72}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":4,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644641927094","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644641927100"}}