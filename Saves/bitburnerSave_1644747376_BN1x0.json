{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":654,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.2619925131275005,\"hacking_speed_mult\":1.2556897491514998,\"hacking_money_mult\":1.9745461089749998,\"hacking_grow_mult\":1.3007550125,\"hacking_exp\":107783711.17736197,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":1.2591308521000002,\"agility_exp\":1.2591308521000002,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.669091358380725,\"strength_mult\":1.5078352104900001,\"defense_mult\":1.3111610526,\"dexterity_mult\":1.7415496681159501,\"agility_mult\":1.20462921707625,\"charisma_mult\":1.3111610526,\"hacking_exp_mult\":1.6288116702765607,\"strength_exp_mult\":1.2591308521000002,\"defense_exp_mult\":1.2591308521000002,\"dexterity_exp_mult\":1.2591308521000002,\"agility_exp_mult\":1.2591308521000002,\"charisma_exp_mult\":1.2591308521000002,\"company_rep_mult\":1.4360335337999999,\"faction_rep_mult\":1.1966946115,\"money\":408121729.6937887,\"city\":\"Chongqing\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"sigma-cosmetics\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130649.39999936786,\"ram\":64,\"totalMoneyGenerated\":2886098264.1715636,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130649.19999936788,\"ram\":64,\"totalMoneyGenerated\":2885465291.110363,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130648.99999936786,\"ram\":64,\"totalMoneyGenerated\":2885024695.269811,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130648.79999936788,\"ram\":64,\"totalMoneyGenerated\":2884622720.909621,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130647.9999993679,\"ram\":64,\"totalMoneyGenerated\":2881125408.254442,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130646.79999936791,\"ram\":64,\"totalMoneyGenerated\":2878462568.3848844,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130644.59999936793,\"ram\":64,\"totalMoneyGenerated\":2878049705.869422,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130641.39999936798,\"ram\":64,\"totalMoneyGenerated\":2877639229.6582155,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130636.99999936804,\"ram\":64,\"totalMoneyGenerated\":2877228608.8723564,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130631.39999936812,\"ram\":64,\"totalMoneyGenerated\":2876818675.7989383,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":130459.59999937064,\"ram\":64,\"totalMoneyGenerated\":2876294606.991979,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":129785.39999938046,\"ram\":64,\"totalMoneyGenerated\":2874808948.9311433,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":129549.5999993839,\"ram\":64,\"totalMoneyGenerated\":2873150060.3768096,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":128681.19999939649,\"ram\":64,\"totalMoneyGenerated\":2871358196.8673115,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":128663.79999939674,\"ram\":64,\"totalMoneyGenerated\":2869915785.079768,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":128658.39999939682,\"ram\":64,\"totalMoneyGenerated\":2868402901.650606,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":128648.79999939696,\"ram\":64,\"totalMoneyGenerated\":2866941787.119604,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":128433.79999940007,\"ram\":64,\"totalMoneyGenerated\":2865435951.3479667,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":128409.99999940043,\"ram\":64,\"totalMoneyGenerated\":2800056650.9428697,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":127495.79999941372,\"ram\":64,\"totalMoneyGenerated\":2798635295.8931627,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":127018.99999942063,\"ram\":64,\"totalMoneyGenerated\":2792277223.476211,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":124663.59999942305,\"ram\":64,\"totalMoneyGenerated\":2759093283.039787,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":120830.39999940908,\"ram\":64,\"totalMoneyGenerated\":2697256169.5534925,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":117100.19999939551,\"ram\":64,\"totalMoneyGenerated\":2629731615.4795284,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":110217.7999993705,\"ram\":64,\"totalMoneyGenerated\":2492130727.20086,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":98460.1999993432,\"ram\":64,\"totalMoneyGenerated\":2240497920.7052636,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":35933.99999998502,\"ram\":64,\"totalMoneyGenerated\":862275967.4708443,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24070.109006285962,\"onlineTimeSeconds\":31029.00000004705,\"ram\":64,\"totalMoneyGenerated\":746641973.684363,\"name\":\"hacknet-node-27\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Aevum\",\"The Black Hand\",\"NiteSec\",\"Netburners\",\"BitRunners\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-43.1,\"crime_money_mult\":1.1446644110000002,\"crime_success_mult\":1.04060401,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1446644110000002,\"hacknet_node_money_mult\":2.6245008698459373,\"hacknet_node_purchase_cost_mult\":0.73485594765,\"hacknet_node_ram_cost_mult\":0.96059601,\"hacknet_node_core_cost_mult\":0.96059601,\"hacknet_node_level_cost_mult\":0.8165066085,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644747375367,\"totalPlaytime\":383850400,\"playtimeSinceLastAug\":130672000,\"playtimeSinceLastBitnode\":383850400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-38076544,\"codingcontract\":187500000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":17538996852.415962,\"hacknet\":74595440248.85843,\"hacknet_expenses\":-37034140528.353775,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":407121729.6939375,\"work\":0,\"servers\":-31724513419.032978,\"other\":-5313300000,\"augmentations\":-17804784865.730328}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-66788096,\"codingcontract\":787500000,\"corporation\":0,\"crime\":795000,\"gang\":0,\"hacking\":82231425333.05228,\"hacknet\":161656031720.37842,\"hacknet_expenses\":-88289505598.52544,\"hospitalization\":-34340000,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":1200119589.665313,\"work\":193300,\"servers\":-55150470676.051956,\"other\":-6253298898.72876,\"augmentations\":-93481422522.98804}},\"scriptProdSinceLastAug\":15391367128.525515,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1644364076521},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1644364796512},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644365636510},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1644369056521},{\"ID\":\"TOR\",\"unlockedOn\":1644370256520},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1644372116520},{\"ID\":\"TRAVEL\",\"unlockedOn\":1644372296511},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1644374516517},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1644377936516},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1644411651922},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644411651933},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644411651935},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644413931922},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644414351923},{\"ID\":\"NITESEC\",\"unlockedOn\":1644416091923},{\"ID\":\"FROZE\",\"unlockedOn\":1644416137121},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1644429277114},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1644490597118},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644493537117},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1644650920646},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1644734510975},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1644736850977}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.8.0.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":1983.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",0,31681],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":925.2100000000734,\"pid\":6247,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1084,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///3d8dcdf9-7479-4c42-b805-539a6118b113\",\"moduleSequenceNumber\":499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0,29303],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":421.20999999998463,\"pid\":6270,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":51,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///b9b82d4b-69b5-4d1e-b670-3ded0277f166\",\"moduleSequenceNumber\":500}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetServer = ns.args[0];\\n\\twhile (true){\\n\\t\\tns.print(`Hacking ${targetServer}`);\\n\\t\\tawait ns.hack(targetServer);\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"blob:file:///3066b819-a1a0-4fc9-b19b-3425b4eb3cda\",\"moduleSequenceNumber\":2223}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet topTargets = []\\nlet exploits = 0;\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\nlet virus = \\\"/SimpleScripts/virus.js\\\"\\n\\nexport async function main(ns) {\\n\\tawait countExploits(ns);\\n\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n\\tns.print(`Vulnerable Servers: ${vulnerableServers}`);\\n\\n\\t// SCPs virus to vulnerable servers\\n\\tawait infectVulnerableServers(ns);\\n\\tns.print(`Servers infected.`)\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits){\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\t\\t\\tcase 4:\\n\\t\\t\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\t\\t\\tcase 2:\\n\\t\\t\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\t\\t\\tcase 1:\\n\\t\\t\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}catch{\\n\\t\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif(ns.hasRootAccess(server)){\\n\\t\\tvulnerableServers.push(server)\\n\\t\\tlet subServers = ns.scan(server)\\n\\t\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(virus, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\n\\t\\t// TODO: Run virus on vulnerable server(s) against selected target server(s)\\n\\t\\n\\t// TODO: Determine highest value targetable server (Profile hacking targets)\\n\\t// TODO: Target most valuable servers (make a list)\\n\\t\\t// Then send out `hack` command to all vulnerable servers targeting X server\\n\\t// ns.print(`Hacking ${targetServer}`);\\n\\t// await ns.hack(targetServer);\\n\\t// await ns.grow(targetServer);\\n\\t// await ns.weaken(targetServer);\\n\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\n\\n// TODO: Determine highest value targetable server (Profile hacking targets)\\nexport async function profileTargets(ns) {\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\t// For now, we're just going with the highest dollar amount :P\\n\\t\\tif (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(server)){\\n\\t\\t\\tif(topTargets.length < 5 && !topTargets.includes(server)){\\n\\t\\t\\t\\ttopTargets.push(server);\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tfor (let i = 0; i < topTargets.length; i++) {\\n\\t\\t\\t\\t\\tif(ns.getServerMaxMoney(topTargets[i]) < ns.getServerMaxMoney(server) && !topTargets.includes(server)){\\n\\t\\t\\t\\t\\t\\ttopTargets[i] = server;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// let server = vulnerableServers[index];\\n\\t// \\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\t// \\tlet hackSuccessChance = ns.hackSuccessChance(server);\\n\\t// \\t// let threadScale = threadsUsed\\n\\t// \\tlet weakenTime = security/weakenProgress\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(virus);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif(maxThreadCount <= 0){\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t}else{\\n\\t\\t\\tswitch(topTargets.length){\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet home = \\\"home\\\";\\n\\tlet homeThreadCount =  Math.floor((ns.getServerMaxRam(home) - ns.getServerUsedRam(home)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch(topTargets.length){\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\",\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"blob:file:///bb9f2541-c77f-45a6-bf6e-072d3fb728a6\",\"moduleSequenceNumber\":41157}],\"dependents\":[],\"ramUsage\":5.2,\"server\":\"home\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet exploits = 0;\\n\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\n\\nexport async function main(ns) {\\n\\tawait countExploits();\\n\\t\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits)\\n\\t\\ttry{\\n\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\tcase 5:\\n\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\tcase 4:\\n\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t}\\n\\t\\t}catch{\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t}\\n\\n\\t\\tif(ns.hasRootAccess(server)){\\n\\t\\t\\tlet subServers = scan(server)\\n\\t\\t\\tfor (let index = 0; index < subServers.length; ++index) {\\n\\t\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"blob:file:///d31df9bb-5e5a-4fcd-9aed-bd62053860fa\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b4bc4e06-ebe2-4738-b43a-f96d5fe190be\",\"moduleSequenceNumber\":41740}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { \\n\\tPAUSE, UNPAUSE,KILL, \\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT, \\n\\tHOME\\n\\t} from \\\"lib/customConstants.js\\\";\\nconst LVL = 0;\\nconst RAM = 1;\\nconst CORE = 2;\\nconst DEATH_MSG = \\\"AUTO_NET\\\"\\n\\nexport async function main(ns) {\\n\\tlet paused = false;\\n\\twhile (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n\\t\\tswitch (ns.readPort(AUTO_NODE_INBOUND_PORT)) {\\n\\t\\t\\tcase PAUSE:\\n\\t\\t\\t\\tpaused = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase UNPAUSE:\\n\\t\\t\\t\\tpaused = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase KILL:\\n\\t\\t\\t\\tns.tryWritePort(CONTROL_INBOUND_PORT, DEATH_MSG)\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (!paused) {\\n\\t\\t\\tlet newNodeRatio = await calcNewNodeValueRatio(ns);\\n\\n\\t\\t\\t// Find highest ratio from all current nodes!\\n\\t\\t\\tlet bestNodeToUpgrade = -1;\\n\\t\\t\\tlet bestProperty = -1; // 0-2 are level, ram, and core\\n\\t\\t\\tlet bestRatio = 0;\\n\\t\\t\\tlet lvlRatio;\\n\\t\\t\\tlet ramRatio;\\n\\t\\t\\tlet coreRatio;\\n\\t\\t\\t// Finds the best upgrade value amongst existing nodes\\n\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\tlvlRatio = await calcLevelUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\tramRatio = await calcRamUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\tcoreRatio = await calcCoreUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\t// ns.print(`Node${i}: lvl:${lvlRatio}, ram:${ramRatio}, core:${coreRatio}`);\\n\\t\\t\\t\\tif (lvlRatio > ramRatio && lvlRatio > coreRatio) {\\n\\t\\t\\t\\t\\t// Lvl ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (lvlRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = lvlRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = LVL;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else if (ramRatio > coreRatio) {\\n\\t\\t\\t\\t\\t// Ram ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (ramRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = ramRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = RAM;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Core ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (coreRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = coreRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = CORE;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Buys a new node or the best valued upgrade\\n\\t\\t\\tlet bal = ns.getServerMoneyAvailable(HOME);\\n\\t\\t\\t// ns.print(`NewNodw:${newNodeRatio} > BestRatio:${bestRatio}`)\\n\\t\\t\\tif (newNodeRatio > bestRatio) {\\n\\t\\t\\t\\t// Buy a new node!\\n\\t\\t\\t\\tns.print(\\\"Trying to buy a new Node...\\\")\\n\\t\\t\\t\\tif (ns.hacknet.getPurchaseNodeCost() < bal) {\\n\\t\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\t\\tns.print(\\\"Bought a new Node!\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tswitch (bestProperty) {\\n\\t\\t\\t\\t\\tcase LVL:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getLevelUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading LVL of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase RAM:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getRamUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeRam(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading RAM of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase CORE:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getCoreUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeCore(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading CORES of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tns.print(\\\"No best property chosen?\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(\\\"50\\\");\\n\\t}\\n}\\n\\nexport async function findWeakestNode(ns) {\\n\\t// Returns the node that produces the least, i.e. needs to be upgraded\\n\\tlet weakest = 0;\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tif (ns.hacknet.getNodeStats(i).production < ns.hacknet.getNodeStats(weakest).production) {\\n\\t\\t\\tweakest = i;\\n\\t\\t}\\n\\t}\\n\\treturn weakest;\\n}\\n\\n// export async function calcAvgNodeProduction(ns) {\\n// \\t// Returns average production of current nodes\\n// }\\n\\n///\\n/// These functions translate the cost of the next upgrade to a ratio for comparison to see what is worth saving for\\n///\\nexport async function calcLevelUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getLevelUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await levelUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`lvl: ${lvl} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio\\n}\\n\\nexport async function calcRamUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getRamUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await ramUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\treturn ratio;\\n}\\n\\nexport async function calcCoreUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getCoreUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await coreUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`core: ${core} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio;\\n}\\n\\nexport async function calcNewNodeValueRatio(ns) {\\n\\tlet totalHacknetNodeProduction = 0;\\n\\tlet numberOfNodes = await ns.hacknet.numNodes();\\n\\tfor (let i = 0; i < numberOfNodes; i++) {\\n\\t\\ttotalHacknetNodeProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\tlet valueRatio = (totalHacknetNodeProduction / numberOfNodes) / ns.hacknet.getPurchaseNodeCost();\\n\\t// ns.print(`valueRatio:${valueRatio}, totalProduction:${totalHacknetNodeProduction}, Node#${numberOfNodes}`)\\n\\tif (isNaN(valueRatio)) {\\n\\t\\tvalueRatio = 1;\\n\\t}\\n\\treturn valueRatio;\\n}\\n\\n///\\n/// Functions for gaining profit of lvl ups\\n///\\n\\nexport async function levelUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (1 * 1.5) * Math.pow(1.035, currentRam - 1) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function ramUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * (Math.pow(1.035, (2 * currentRam) - 1) - Math.pow(1.035, currentRam - 1)) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function coreUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * Math.pow(1.035, currentRam - 1) * (1 / 6);\\n}\",\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///b1d67a37-13cf-467c-a6b9-203b5ac3e68e\",\"moduleSequenceNumber\":265},{\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"blob:file:///b230f93d-0fdf-405d-b4c6-3f173ff4ddc3\",\"moduleSequenceNumber\":497}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":73823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hackPercent(server, player){\\n \\n    const balanceFactor = 240;\\n    const difficultyMult = (100 - server.hackDifficulty) / 100;\\n    const skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n    const percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / balanceFactor;\\n    if (percentMoneyHacked < 0) {\\n      return 0;\\n    }\\n    if (percentMoneyHacked > 1) {\\n      return 1;\\n    }\\n    return percentMoneyHacked * 1//BitNodeMultipliers.ScriptHackMoney;\\n}\\n \\nexport function growPercent(server, threads, player, cores = 1) {\\n \\n    const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n    const growthRate = 1.03//CONSTANTS.ServerBaseGrowthRate;\\n    let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n    if (adjGrowthRate > 1.0035/*CONSTANTS.ServerMaxGrowthRate*/) {\\n        adjGrowthRate = 1.0035/*CONSTANTS.ServerMaxGrowthRate*/;\\n    }\\n    const serverGrowthPercentage = server.serverGrowth / 100;\\n    const numServerGrowthCyclesAdjusted =\\n        numServerGrowthCycles * serverGrowthPercentage * 1//BitNodeMultipliers.ServerGrowthRate;\\n    const coreBonus = 1 + (cores - 1) / 16;\\n    return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.hacking_grow_mult * coreBonus);\\n}\\n \\nexport function weakenTime(server, player) {\\n \\n    const weakenTimeMultiplier = 4;\\n    return weakenTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function growTime(server, player) {\\n \\n    const growTimeMultiplier = 3.2;\\n    return growTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function hackTime(server, player) {\\n \\n    return utilCalculateHackingTime(server,player) * 1000;\\n}\\n \\nfunction utilCalculateIntelligenceBonus(intelligence, weight = 1) {\\n    return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n \\nfunction utilCalculateHackingTime(server, player) {\\n    \\n    const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n    const baseDiff = 500;\\n    const baseSkill = 50;\\n    const diffFactor = 2.5;\\n    let skillFactor = diffFactor * difficultyMult + baseDiff;\\n    skillFactor /= player.hacking + baseSkill;\\n    const hackTimeMultiplier = 5;\\n    const hackingTime =\\n        (hackTimeMultiplier * skillFactor) /\\n        (player.hacking_speed_mult * utilCalculateIntelligenceBonus(player.intelligence, 1));\\n    return hackingTime;\\n}\",\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as formulasFacade from '/SimpleScripts/formulasHackingFacade.js',\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// TODO: Only use formulasFacade if formulas.exe is missing.\\n\\tx = formulasFacade.hackTime(fserver, player)\\n}\",\"filename\":\"/SimpleScripts/wirus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":256}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nvar server = ns.args[0];   //Host to hack\\nvar server2 = ns.getHostname(); //Server to run scripts on\\nvar i=0;\\nvar c=0;\\nvar player = ns.getPlayer();\\nvar fserver = ns.getServer(server);\\nvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.ns\\\"); //grabbing script RAM values\\nvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\nvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\nvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\nvar maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\nvar weakenThreads = (2000-((ns.getServerMinSecurityLevel(server))/0.05));\\nvar maxGrowThreads = ((maxRam/growscriptRam)-(weakenscriptRam*2000));\\nvar cs = ns.getServerSecurityLevel(server);\\nvar ms = ns.getServerMinSecurityLevel(server);\\nvar mm = ns.getServerMaxMoney(server);\\nvar ma = ns.getServerMoneyAvailable(server);\\n \\n \\n \\n//Priming the server.  Max money and Min security must be acheived for this to work\\nif ((ma < mm)==true)\\n{\\nns.exec('/newserver/weaken.js',server2,2000,server,0);\\nns.exec('/newserver/grow.js',server2,maxGrowThreads,server,0);\\nvar WeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\nmm = ns.getServerMaxMoney(server);\\nma = ns.getServerMoneyAvailable(server);\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n \\n//If Max Money is true, making sure security level is at its minimum\\nif((cs>ms)==true)\\n{\\n \\nns.exec('/newserver/weaken.js',server2,2000,server,0);\\nWeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n//Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\n \\nvar HPercent = (ns.formulas.hacking.hackPercent(fserver,player)*100);\\nvar GPercent = (ns.formulas.hacking.growPercent(fserver,1,player,1));\\nWeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nvar GrowTime = (ns.formulas.hacking.growTime(fserver,player));\\nvar HackTime = (ns.formulas.hacking.hackTime(fserver,player));\\n \\nvar growThreads = Math.round(((5/(GPercent-1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\nvar hackThreads = Math.round((50/HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\nweakenThreads = Math.round((weakenThreads - (growThreads*0.004))); //Getting required threads to fully weaken the server\\n \\nvar totalRamForRun = (hackscriptRam*hackThreads)+(growscriptRam*growThreads)+(weakenscriptRam*weakenThreads) //Calculating how much RAM is used for a single run\\nvar sleepTime = (WeakenTime/(maxRam/totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n \\n//if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n//{sleepTime = 500;\\n//}\\n \\nvar shiftCount = maxRam/totalRamForRun;\\nvar offset = sleepTime/2\\nvar gOffset = offset/4\\nvar hOffset = offset/2\\n \\n \\nwhile(true)\\n {  \\n     var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n     var gsleep = ((WeakenTime - GrowTime-gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n     var hsleep = ((WeakenTime - HackTime-hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n     var UsedRam = ns.getServerUsedRam(server2);\\n    \\n \\n    if((totalRamForRun>= (maxRam-UsedRam))==false) //making sure I have enough RAM to do a full run\\n    {\\n    ns.exec('/newserver/weaken.js',server2,weakenThreads,server,wsleep,i);\\n    ns.exec('/newserver/grow.js',server2,growThreads,server,gsleep,i);\\n    ns.exec('/newserver/hack.js',server2,hackThreads,server,hsleep,i);\\n    \\n    if (c<shiftCount)\\n    {await ns.sleep(sleepTime)\\n    c++\\n    }\\n    else\\n    {\\n       await ns.sleep(sleepTime+offset);\\n       c=0;\\n    }\\n    \\n    \\n    i++\\n    }\\n    else{\\n       await ns.sleep(1000) \\n    }\\n }\\n await ns.sleep(120000)\\n}\",\"filename\":\"/newserver/OpsScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst HOME = \\\"home\\\"\\n\\tvar serverName = ns.args[0]; // This way it can be used in other scripts?\\n\\tvar maxAffordableRamSize = 2;\\n\\tvar powerIter = 1;\\n\\tvar lastAffordableRamSize = maxAffordableRamSize;\\n\\tvar currentServerSizeCost = ns.getPurchasedServerCost(maxAffordableRamSize);\\n\\twhile(currentServerSizeCost < ns.getServerMoneyAvailable(HOME)){\\n\\t\\tlastAffordableRamSize = maxAffordableRamSize;\\n\\t\\tmaxAffordableRamSize = Math.pow(2, powerIter);\\n\\t\\tpowerIter++;\\n\\t\\tcurrentServerSizeCost = ns.getPurchasedServerCost(maxAffordableRamSize);\\n\\t}\\n\\tns.print(`Purchasing ${lastAffordableRamSize} for \\\\$${ns.getPurchasedServerCost(lastAffordableRamSize)}`)\\n\\tns.print(`Couldn't afford ${maxAffordableRamSize}ram for \\\\$${ns.getPurchasedServerCost(maxAffordableRamSize)}.`)\\n\\tns.purchaseServer(serverName, lastAffordableRamSize);\\n\\tawait ns.sleep(100000)\\n}\",\"filename\":\"/SimpleScripts/buyMaxServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/buyMaxServer.js\",\"url\":\"blob:file:///09ab40e9-f561-4d67-8dfa-23ef6db85fdf\",\"moduleSequenceNumber\":132886}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nvar server = ns.args[0];   //Host to hack\\nvar server2 = ns.getHostname(); //Server to run scripts on\\nvar i=0;\\nvar c=0;\\nvar player = ns.getPlayer();\\nvar fserver = ns.getServer(server);\\nvar contstantRam = ns.getScriptRam(\\\"/newserver/OpsScript.js\\\"); //grabbing script RAM values\\nvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\nvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\nvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\nvar maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n// ns.print(`ServerSecurity:${ns.getServerSecurityLevel(server)} - MinSecurity:${((ns.getServerMinSecurityLevel(server))/0.05)}`)\\n// var weakenThreads = (ns.getServerSecurityLevel(server)-((ns.getServerMinSecurityLevel(server))/0.05));\\nvar weakenThreads = (ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)) / 0.05;\\n// var maxGrowThreads = ((maxRam/growscriptRam)-(weakenscriptRam*2000));\\nvar maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * weakenThreads));\\nvar cs = ns.getServerSecurityLevel(server);\\nvar ms = ns.getServerMinSecurityLevel(server);\\nvar mm = ns.getServerMaxMoney(server);\\nvar ma = ns.getServerMoneyAvailable(server);\\n\\n// ns.print(`Security:${ns.getServerMinSecurityLevel(server)}, hackscriptRam:${hackscriptRam}, weakenThreads:${weakenThreads}`)\\n// ns.print(`Growth threads:${maxGrowThreads}`)\\nif(weakenThreads < 1){ weakenThreads = 1}\\n \\n \\n//Priming the server.  Max money and Min security must be acheived for this to work\\nif ((ma < mm)==true)\\n{\\nns.exec('/newserver/weaken.js',server2,weakenThreads,server,0);\\nns.exec('/newserver/grow.js',server2,maxGrowThreads,server,0);\\nvar WeakenTime = (weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\nmm = ns.getServerMaxMoney(server);\\nma = ns.getServerMoneyAvailable(server);\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n \\n//If Max Money is true, making sure security level is at its minimum\\nif((cs>ms)==true)\\n{\\n \\nns.exec('/newserver/weaken.js',server2,weakenThreads,server,0);\\nWeakenTime = (weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n//Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\n \\nvar HPercent = (hackPercent(fserver,player)*100);\\nvar GPercent = (growPercent(fserver,1,player,1));\\nWeakenTime = (weakenTime(fserver,player));\\nvar GrowTime = (growTime(fserver,player));\\nvar HackTime = (hackTime(fserver,player));\\n \\nvar growThreads = Math.round(((5/(GPercent-1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\nvar hackThreads = Math.round((50/HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\nweakenThreads = Math.round((weakenThreads - (growThreads*0.004))); //Getting required threads to fully weaken the server\\n \\nvar totalRamForRun = (hackscriptRam*hackThreads)+(growscriptRam*growThreads)+(weakenscriptRam*weakenThreads) //Calculating how much RAM is used for a single run\\nvar sleepTime = (WeakenTime/(maxRam/totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n \\n//if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n//{sleepTime = 500;\\n//}\\n \\nvar shiftCount = maxRam/totalRamForRun;\\nvar offset = sleepTime/2\\nvar gOffset = offset/4\\nvar hOffset = offset/2\\n \\n \\nwhile(true)\\n {  \\n     var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n     var gsleep = ((WeakenTime - GrowTime-gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n     var hsleep = ((WeakenTime - HackTime-hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n     var UsedRam = ns.getServerUsedRam(server2);\\n    \\n \\n    if((totalRamForRun>= (maxRam-UsedRam))==false) //making sure I have enough RAM to do a full run\\n    {\\n    ns.exec('/newserver/weaken.js',server2,weakenThreads,server,wsleep,i);\\n    ns.exec('/newserver/grow.js',server2,growThreads,server,gsleep,i);\\n    ns.exec('/newserver/hack.js',server2,hackThreads,server,hsleep,i);\\n    \\n    if (c<shiftCount)\\n    {await ns.sleep(sleepTime)\\n    c++\\n    }\\n    else\\n    {\\n       await ns.sleep(sleepTime+offset);\\n       c=0;\\n    }\\n    \\n    \\n    i++\\n    }\\n    else{\\n       await ns.sleep(1000) \\n    }\\n }\\n await ns.sleep(120000)\\n}\\n\\nexport function hackPercent(server, player){\\n \\n    const balanceFactor = 240;\\n    const difficultyMult = (100 - server.hackDifficulty) / 100;\\n    const skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n    const percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / balanceFactor;\\n    if (percentMoneyHacked < 0) {\\n      return 0;\\n    }\\n    if (percentMoneyHacked > 1) {\\n      return 1;\\n    }\\n    return percentMoneyHacked * 1//BitNodeMultipliers.ScriptHackMoney;\\n}\\n\\n\\nexport function growPercent(server, threads, player, cores = 1) {\\n \\n    const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n    const growthRate = 1.03//CONSTANTS.ServerBaseGrowthRate;\\n    let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n    if (adjGrowthRate > 1.0035/*CONSTANTS.ServerMaxGrowthRate*/) {\\n        adjGrowthRate = 1.0035/*CONSTANTS.ServerMaxGrowthRate*/;\\n    }\\n    const serverGrowthPercentage = server.serverGrowth / 100;\\n    const numServerGrowthCyclesAdjusted =\\n        numServerGrowthCycles * serverGrowthPercentage * 1//BitNodeMultipliers.ServerGrowthRate;\\n    const coreBonus = 1 + (cores - 1) / 16;\\n    return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.hacking_grow_mult * coreBonus);\\n}\\n \\nexport function weakenTime(server, player) {\\n \\n    const weakenTimeMultiplier = 4;\\n    return weakenTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function growTime(server, player) {\\n \\n    const growTimeMultiplier = 3.2;\\n    return growTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function hackTime(server, player) {\\n \\n    return utilCalculateHackingTime(server,player) * 1000;\\n}\\n \\nfunction utilCalculateIntelligenceBonus(intelligence, weight = 1) {\\n    return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n \\nfunction utilCalculateHackingTime(server, player) {\\n    \\n    const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n    const baseDiff = 500;\\n    const baseSkill = 50;\\n    const diffFactor = 2.5;\\n    let skillFactor = diffFactor * difficultyMult + baseDiff;\\n    skillFactor /= player.hacking + baseSkill;\\n    const hackTimeMultiplier = 5;\\n    const hackingTime =\\n        (hackTimeMultiplier * skillFactor) /\\n        (player.hacking_speed_mult * utilCalculateIntelligenceBonus(player.intelligence, 1));\\n    return hackingTime;\\n}\",\"filename\":\"/SimpleScripts/OPsScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"alpha-2\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The goal here is to make a usable priority queue for usage in other functions.\\n// Credit for code used for priority queue goes to: https://www.geeksforgeeks.org/implementation-priority-queue-javascript/\\n\\n// User defined class to store element and its priority\\nexport class QElement {\\n\\tconstructor(element, priority) {\\n\\t\\tthis.element = element;\\n\\t\\tthis.priority = priority;\\n\\t}\\n}\\n\\n// PriorityQueue class\\nexport default class PriorityQueue {\\n\\n\\t// An array is used to implement priority\\n\\tconstructor() {\\n\\t\\tthis.items = [];\\n\\t}\\n\\n\\t// functions to be implemented enqueue function to add element to the queue as per priority\\n\\tenqueue(element, priority) {\\n\\t\\t// creating object from queue element\\n\\t\\tvar qElement = new QElement(element, priority);\\n\\t\\tvar contain = false;\\n\\n\\t\\t// iterating through the entire item array to add element at the correct location of the Queue\\n\\t\\tfor (var i = 0; i < this.items.length; i++) {\\n\\t\\t\\tif (this.items[i].priority > qElement.priority) {\\n\\t\\t\\t\\t// Once the correct location is found it is\\n\\t\\t\\t\\t// enqueued\\n\\t\\t\\t\\tthis.items.splice(i, 0, qElement);\\n\\t\\t\\t\\tcontain = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// if the element have the highest priority it is added at the end of the queue\\n\\t\\tif (!contain) {\\n\\t\\t\\tthis.items.push(qElement);\\n\\t\\t}\\n\\t}\\n\\n\\t// dequeue method to remove element from the queue\\n\\tdequeue() {\\n\\t\\t// return the dequeued element and remove it. if the queue is empty returns Underflow\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"Underflow\\\";\\n\\t\\treturn this.items.shift();\\n\\t}\\n\\n\\t// front function\\n\\tfront() {\\n\\t\\t// returns the highest priority element in the Priority queue without removing it.\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"No elements in Queue\\\";\\n\\t\\treturn this.items[0];\\n\\t}\\n\\n\\t// rear function\\n\\trear() {\\n\\t\\t// returns the lowest priority element of the queue\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"No elements in Queue\\\";\\n\\t\\treturn this.items[this.items.length - 1];\\n\\t}\\n\\n\\t// isEmpty function\\n\\tisEmpty() {\\n\\t\\t// return true if the queue is empty.\\n\\t\\treturn this.items.length == 0;\\n\\t}\\n\\n\\t// printQueue function\\n\\t// prints all the element of the queue\\n\\tprintPQueue() {\\n\\t\\tvar str = \\\"\\\";\\n\\t\\tfor (var i = 0; i < this.items.length; i++)\\n\\t\\t\\tstr += this.items[i].element + \\\" \\\";\\n\\t\\treturn str;\\n\\t}\\n\\n}\",\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default class ServerNode {\\n\\n\\tconstructor(name, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, servers) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.hackLvlReq = hackLvlReq;\\n\\t\\tthis.reqPorts = reqPorts;\\n\\t\\tthis.exploited = exploited;\\n\\t\\tthis.traversed = traversed;\\n\\t\\tthis.hasCCT = hasCCT;\\n\\t\\tthis.cctName; // Probably want to include what type it is, catagorize it, solve, somehow later down the line.\\n\\t\\t// this.maxRam = maxRam;\\n\\t\\t// this.freeRam; // Consider tracking usedRam instead? [Add when running script, remove on completed (will need to await)]\\n\\t\\tthis.reservedRam = 0;\\n\\t\\tthis.adjServerNodes = servers;\\n\\t\\tthis.primingWillBeCompletedByTimeStamp = 0;\\n\\t}\\n\\n\\tgetName() {\\n\\t\\treturn this.name;\\n\\t}\\n\\n\\tgetExploitsReq() {\\n\\t\\treturn this.reqPorts;\\n\\t}\\n\\n\\tsetExploited() {\\n\\t\\tthis.exploited = true;\\n\\t}\\n\\tisExploited() {\\n\\t\\treturn this.exploited;\\n\\t}\\n\\n\\tgetReqHackLvl() {\\n\\t\\treturn this.hackLvlReq;\\n\\t}\\n\\n\\treserveRam(ram) {\\n\\t\\tthis.reservedRam += ram;\\n\\t}\\n\\tfreeRam(ram) {\\n\\t\\tthis.reservedRam -= ram;\\n\\t}\\n\\n\\tsetPriming(delay) {\\n\\t\\tthis.primingWillBeCompletedByTimeStamp = Date.now() + delay;\\n\\t}\\n\\tisPriming() {\\n\\t\\tif (this.primingWillBeCompletedByTimeStamp > Date.now()) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tgetPrimingTimeStamp(){\\n\\t\\treturn this.primingWillBeCompletedByTimeStamp;\\n\\t}\\n\\n\\t// TODO: Account for RAM usage/calculation & reservation for optimizing script usage!\\n\\t// When executing a script on the given server, add it to the usedRam value here, as well as a handle for the\\n\\t// script that was ran (so it can be killed? Or so it can be tracked?)\\n\\t// Ideally I'd like to spawn these exec's off as threads, such that when they are completed, that RAM is 'freed' here.\\n\\t// \\t\\t- This would mean calling back to the controlScript from the exec'd script.\\n\\t// Alternatively, if we know exactly how much time it's going to take, we can free the RAM after that amount of time.\\n\\n\\t// The proper method to do this would be using Netscript PORTS! (OR javascript sockets I guess if I wanted to cheat)\\n}\",\"filename\":\"/lib/ServerNode.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Common constants\\nexport const HOME = \\\"home\\\";\\n\\n// Common script names\\nexport const WEAKEN = \\\"/lib/weaken.js\\\";\\nexport const GROW = \\\"/lib/grow.js\\\";\\nexport const HACK = \\\"/lib/hack.js\\\";\\nexport const VIRUS = \\\"/SimpleScripts/virus.js\\\"\\n\\nexport const CCT_MAP = new Map(\\n\\t[\\n\\t\\t[\\\"Find Largest Prime Factor\\\", \\\"cctSolutions/findLargestPrimeFactor.js\\\"],\\t\\t\\t// Solved\\n\\t\\t[\\\"Total Ways to Sum\\\", \\\"cctSolutions/totalWaysToSum.js\\\"],\\n\\t\\t[\\\"Array Jumping Game\\\", \\\"cctSolutions/arrayJumpingGame.js\\\"],\\n\\t\\t[\\\"Algorithmic Stock Trader I\\\", \\\"cctSolutions/algorithmicStockTrader.js\\\"],\\n\\t\\t[\\\"Algorithmic Stock Trader II\\\", \\\"cctSolutions/algorithmicStockTrader.js\\\"],\\n\\t\\t[\\\"Algorithmic Stock Trader III\\\", \\\"cctSolutions/algorithmicStockTrader.js\\\"],\\n\\t\\t[\\\"Algorithmic Stock Trader IV\\\", \\\"cctSolutions/algorithmicStockTrader.js\\\"],\\n\\t\\t[\\\"Unique Paths in a Grid I\\\", \\\"cctSolutions/uniquePathsInGrid.js\\\"],\\n\\t\\t[\\\"Unique Paths in a Grid II\\\", \\\"cctSolutions/uniquePathsInGrid.js\\\"],\\n\\t\\t[\\\"Find All Valid Math Expressions\\\", \\\"cctSolutions/findAllValidMathExpressions.js\\\"],\\n\\t\\t[\\\"Merge Overlapping Intervals\\\", \\\"cctSolutions/mergeOverlappingIntervals.js\\\"],\\n\\t\\t[\\\"Sanitize Parentheses in Expression\\\", \\\"cctSolutions/sanitizeParentheses.js\\\"],\\n\\t\\t[\\\"Spiralize Matrix\\\", \\\"cctSolutions/spiralizeMatrix.js\\\"],\\n\\t\\t[\\\"Generate IP Addresses\\\", \\\"cctSolutions/generateIpAddresses.js\\\"],\\n\\t\\t[\\\"Subarray with Maximum Sum\\\", \\\"cctSolutions/subarrayWithMaximumSum.js\\\"],\\n\\t\\t[\\\"Minimum Path Sum in a Triangle\\\", \\\"cctSolutions/minimumPathSumInATriangle.js\\\"]\\n\\t]\\n);\\n\\n// Port labels\\nexport const CONTROL_INBOUND_PORT = 0;\\nexport const AUTO_NODE_INBOUND_PORT = 20\\n// Port commands\\nexport const PAUSE = \\\"PAUSE\\\";\\nexport const UNPAUSE = \\\"UNPAUSE\\\"\\nexport const KILL = \\\"KILL\\\";\\n\\n// Server Lists\\nexport const SERVER_LIST = [\\n\\t\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\",\\n\\t\\\"darkweb\\\", \\\"zer0\\\", \\\"nectar-net\\\", \\\"max-hardware\\\", \\\"CSEC\\\", \\\"neo-net\\\", \\\"silver-helix\\\", \\\"phantasy\\\", \\\"omega-net\\\",\\n\\t\\\"the-hub\\\", \\\"johnson-ortho\\\", \\\"avmnite-02h\\\", \\\"comptek\\\", \\\"crush-fitness\\\", \\\"netlink\\\", \\\"syscore\\\", \\\"summit-uni\\\",\\n\\t\\\"rothman-uni\\\", \\\"catalyst\\\", \\\"zb-institute\\\", \\\"I.I.I.I\\\", \\\"rho-construction\\\", \\\"alpha-ent\\\", \\\"millenium-fitness\\\",\\n\\t\\\"aevum-police\\\", \\\"lexo-corp\\\", \\\"aerocorp\\\", \\\"galactic-cyber\\\", \\\"global-pharm\\\", \\\"snap-fitness\\\", \\\"deltaone\\\",\\n\\t\\\"unitalife\\\", \\\"omnia\\\", \\\"icarus\\\", \\\"univ-energy\\\", \\\"solaris\\\", \\\"defcomm\\\", \\\"zeus-med\\\", \\\"infocomm\\\", \\\"taiyang-digital\\\",\\n\\t\\\"zb-def\\\", \\\"nova-med\\\", \\\"microdyne\\\", \\\"applied-energetics\\\", \\\"run4theh111z\\\", \\\"titan-labs\\\", \\\"stormtech\\\", \\\"helios\\\",\\n\\t\\\"fulcrumtech\\\", \\\"vitalife\\\", \\\"omnitek\\\", \\\"4sigma\\\", \\\"kuai-gong\\\", \\\".\\\", \\\"blade\\\", \\\"clarkinc\\\", \\\"nwo\\\", \\\"b-and-a\\\",\\n\\t\\\"powerhouse-fitness\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"The-Cave\\\", \\\"megacorp\\\"]\",\"filename\":\"/lib/customConstants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":74089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO: Make this the ultimate controll script!\\n * The goal of this script is to basically be a glorified events manager.\\n * \\n * [] The contractSolver will ideally automatically solve contracts, and noify me of their completion, so I can choose rep or $$$.\\n * - possibly allow myself to assign which company to build rep for, if this is even automatable.\\n * [] MVP for now is just identifying which servers have cct files and notifying me.\\n * \\t\\t- Might be able to run them with a script? Needs further research.\\n * \\n * [] Bit for buying large servers (set a target? Scale based on hacking stat % buffs)\\n * // Would be nice if we had a list of known servers we need to backdoor for FACTIONS, so it would give a toast notification!\\n */\\nimport PriorityQueue from \\\"lib/PriorityQueue.js\\\";\\nimport ServerNode from \\\"lib/ServerNode.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport {\\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n} from \\\"lib/formulasHackingFacade.js\\\";\\n\\n// import Bucket from \\\"lib/Bucket.js\\\";\\nvar player;\\nvar serverMap;\\nvar controlCycle;\\n// Servers to check through for value/hacking list\\nvar vulnerableServers; // List of servers that have already been cracked (Possibly not hackable yet)\\nvar serversToExploit;\\nvar hackableServers;\\nvar notHackableServers;\\nvar topTargets;\\nvar exploits;\\n// For traversal\\nlet queuedServers;\\nlet traversedServers;\\n\\n// Function labels for control cycle\\nconst EXPLOIT_CHECK = 0;\\nconst LVL_UP_CHECK = 1;\\nconst PRIME_ATTACK = 2;\\n\\n// Timers\\nvar lastAvailableExploitsCheck;\\n\\n//Player stats to listen to\\nvar hackingLvl;\\nvar ns2;\\n\\nasync function init(ns) {\\n\\tns2 = ns;\\n\\tplayer = ns.getPlayer();\\n\\t// If need be, could make an \\\"Event\\\" wrapper class that is the function, \\n\\t// UUID(name, effectively), and other useful vars for ordering.\\n\\n\\t// High level functions for the main control loop!\\n\\t// Can be inserted & removed as deemed necessary!\\n\\n\\tcontrolCycle = new Map();\\n\\tcontrolCycle.set(EXPLOIT_CHECK, function (ns) { exploitCheck(ns) });\\n\\tcontrolCycle.set(LVL_UP_CHECK, function (ns) { levelUpCheck(ns) });\\n\\t// controlCycle.set(EVALUATE_TARGETS, function (ns) { primeHackableServers(ns) });\\n\\tcontrolCycle.set(PRIME_ATTACK, function (ns) { multiStaggeredHack(ns) });\\n\\t// controlCycle.set() //Idk, X_PORT_LISTEN maybe? (I.E. for Node, when that is useful...)\\n\\t// Additional EventQueue?\\n\\tserverMap = new Map();\\n\\tvulnerableServers = [HOME];\\n\\tserversToExploit = new PriorityQueue(); // Prioritized by # of exploits required\\n\\texploits = 0;\\n\\n\\thackableServers = [];\\n\\tnotHackableServers = new PriorityQueue(); // Prioritized by min hacking level required\\n\\n\\ttopTargets = []\\n\\n\\tqueuedServers = []\\n\\ttraversedServers = [HOME]\\n\\tlastAvailableExploitsCheck = 0;\\n\\thackingLvl = 1;\\n}\\n\\nexport async function main(ns) {\\n\\tinit(ns);\\n\\tcountExploits(ns);\\n\\n\\t// Traversal should generate a list of all servers, ideally seperating them into hackable/notHackable\\n\\t// Evaluating Servers & Cracking them!\\n\\ttraverseServers(ns);\\n\\t// ns.print(`Servers: ${vulnerableServers}`)\\n\\tns.exec(\\\"infect.js\\\", HOME, 1);\\n\\n\\tlet running = true;\\n\\tlet iter = 0;\\n\\twhile (running) {\\n\\t\\tfor (let [key, value] of controlCycle.entries()) {\\n\\t\\t\\t// ns.print(`Key: ${key}, ${controlCycle.size}`)\\n\\t\\t\\tvalue(ns);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\n// INITIAL traversal of ALL servers, to split them up into catagories for future processing!\\n// Evaluating Servers & Cracking them!\\nasync function traverseServers(ns) {\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\t// ns.print(`Initial servers:${queuedServers}`)\\n\\tlet server;\\n\\twhile (queuedServers.length > 0) {\\n\\t\\tserver = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\t\\t// ns.print(`Traversing server: ${server}`)\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n}\\n\\nasync function levelUpCheck(ns) {\\n\\tns.print(\\\"Entered Level Up Check\\\")\\n\\tif (ns.getHackingLevel() !== hackingLvl) {\\n\\t\\thackingLvl = ns.getHackingLevel();\\n\\t\\t// Checks if there are no un-hackable servers remaining, will remove this from controlCycle\\n\\t\\tif (notHackableServers.length < 1) {\\n\\t\\t\\tcontrolCycle.delete(LVL_UP_CHECK);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Servers that are now hackable will be moved onto the hackable stack/list\\n\\t\\tlet server;\\n\\t\\twhile (serverMap.get(notHackableServers[0]).getReqHackLvl() <= hackingLvl) {\\n\\t\\t\\tserver = notHackableServers.shift();\\n\\t\\t\\thackableServers.push(server);\\n\\n\\t\\t}\\n\\t\\t// sort after adding\\n\\t\\tsortHackableServers(ns);\\n\\t}\\n}\\n\\nasync function multiStaggeredHack(ns) {\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tsortHackableServers(ns);\\n\\tns.print(`ENTERING Stagger Attack: ${hackableServers}`);\\n\\tlet topN = 5; // Maybe tweak this value later\\n\\tfor (let i = 0; i < topN; i++) {\\n\\t\\tlet server = hackableServers[i]\\n\\t\\tif (isPrimed(ns, server)) {\\n\\t\\t\\tattackServer(ns, server);\\n\\t\\t} else if (serverMap.get(server).isPriming()) {\\n\\t\\t\\t// Start setting up attack threads instead!\\n\\t\\t\\t// Priming threads have alread been initiated!\\n\\t\\t\\tattackServer(ns, server);\\n\\t\\t} else {\\n\\t\\t\\tprimeServer(ns, server);\\n\\t\\t}\\n\\t}\\n\\tns.print(`Finished multiStaggeredHack`)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tlet changed = false;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tlastAvailableExploitsCheck = getTime();\\n\\treturn changed;\\n}\\n\\nasync function exploitCheck(ns) {\\n\\tns.print(\\\"Entered Exploit Check\\\")\\n\\tif (exploits < 5 && (getTime() - lastAvailableExploitsCheck) > 10) {\\n\\t\\tlet changed = countExploits(ns);\\n\\t\\tif (changed) {\\n\\t\\t\\tcrackExploitableServers(ns);\\n\\t\\t}\\n\\t} else if (exploits === 5) {\\n\\t\\tcontrolCycle.delete(EXPLOIT_CHECK);\\n\\t\\tns.print(\\\"Canceling Exploit Check Task\\\")\\n\\t}\\n}\\n\\nasync function crackExploitableServers(ns) {\\n\\tlet server;\\n\\twhile (exploits >= serversToExploit.front().getExploitsReq()) {\\n\\t\\tserver = serversToExploit.dequeue();\\n\\t\\tcrackServer(ns, server.getName(), server.getExploitsReq);\\n\\t\\tvulnerableServers.push(server);\\n\\t\\tserverMap[server].setExploited();\\n\\t}\\n\\tsortVulnerableServersByFreeRam(ns);\\n}\\n\\nasync function crackServer(ns, server, reqPorts) {\\n\\tswitch (reqPorts) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.sqlinject(server)\\n\\t\\tcase 4:\\n\\t\\t\\tns.httpworm(server)\\n\\t\\tcase 3:\\n\\t\\t\\tns.relaysmtp(server)\\n\\t\\tcase 2:\\n\\t\\t\\tns.ftpcrack(server)\\n\\t\\tcase 1:\\n\\t\\t\\tns.brutessh(server)\\n\\t\\tdefault:\\n\\t\\t\\tns.nuke(server)\\n\\t}\\n}\\n\\n// Used for initial traversal\\nexport async function processServer(ns, server) {\\n\\tns.print(`Processing Server: ${server}`)\\n\\tlet exploited = ns.hasRootAccess(server);\\n\\tlet reqPorts = ns.getServerNumPortsRequired(server);\\n\\tif (!exploited) {\\n\\t\\t// Attempt to crack\\n\\t\\tif (reqPorts <= exploits) {\\n\\t\\t\\tcrackServer(ns, server, reqPorts);\\n\\t\\t} else {\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\tserversToExploit.enqueue(server, reqPorts);\\n\\t\\t}\\n\\t}\\n\\n\\t// Add to vulnerable server list\\n\\texploited = ns.hasRootAccess(server);\\n\\tif (exploited) {\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n\\t// Continues with the traversal\\n\\tlet subServers = ns.scan(server)\\n\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\tlet subServer = subServers[index];\\n\\t\\tif (!traversedServers.includes(subServer) && !queuedServers.includes(subServer)) {\\n\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t}\\n\\t}\\n\\t// ns.print(`${server}'s subservers: ${subServers}`)\\n\\n\\t// Split into hackable/notHackable groupings\\n\\tlet hackLvlReq = ns.getServerRequiredHackingLevel(server);\\n\\tlet maxRam = ns.getServerMaxRam(server);\\n\\tisHackable(ns, server);\\n\\tlet traversed = true;\\n\\t// TODO: hasCCT check?\\n\\tlet hasCCT = false;\\n\\t// Add server to map w/ it's relevant info stored in a ServerNode for later ease of access.\\n\\tlet serverNode = new ServerNode(server, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, subServers);\\n\\tserverMap.set(server, serverNode);\\n\\tns.print(`SET SERVERNODE for ${server}, ${Array.from(serverMap.keys())} === ${vulnerableServers.length}`)\\n}\\n\\nasync function isHackable(ns, server) {\\n\\tlet reqHackingLvl = ns.getServerRequiredHackingLevel(server);\\n\\tif (ns.getHackingLevel() >= reqHackingLvl) {\\n\\t\\thackableServers.push(server);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tnotHackableServers.enqueue(server, reqHackingLvl);\\n\\t}\\n\\treturn false;\\n}\\n\\n// Util function\\nfunction sortHackableServers(ns) {\\n\\thackableServers.sort(function (a, b) {\\n\\t\\t// Determines which server has a higher value based on amount possible to earn per second. ($/rate)\\n\\t\\tlet serverA = ns.getServer(a);\\n\\t\\tlet serverB = ns.getServer(b);\\n\\n\\n\\t\\t// let _server = ns.getServer(server);\\n\\t\\tlet serverAValue = ns.getServerMaxMoney(a) / hackTime(serverA, player);\\n\\t\\tlet serverBValue = ns.getServerMaxMoney(b) / hackTime(serverB, player);\\n\\t\\treturn serverAValue < serverBValue ? 1 : serverAValue > serverBValue ? -1 : 0;\\n\\t});\\n}\\n\\nfunction isPrimed(ns, server) {\\n\\tlet availalbeMoney = ns.getServerMoneyAvailable(server);\\n\\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\tlet securityLvl = ns.getServerSecurityLevel(server);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(server);\\n\\treturn (availalbeMoney >= maxMoney) && (securityLvl <= minSecurity);\\n}\\n\\n// Could also use ports to ensure things are synced up via comm channels, but not sure if that would add to RAM usage..\\n// It does not! Wow. I'll totally just do that then, that seems way easier than guessing timings!\\n// Say port 1 is for weaken comms, 2 is for growth, and 3 is for hacking!\\nasync function primeServer(ns, server) {\\n\\t/**\\n\\t * PRIMING server.\\n\\t * Growing to max, and weakening to min\\n\\t */\\n\\tns.print(`PRIMING ${server}`);\\n\\tlet _server = ns.getServer(server);\\n\\tlet cores = ns.getServer(HOME).cpuCores;\\n\\tlet neededGrowthPercent = ns.getServerMaxMoney(server) / ns.getServerMoneyAvailable(server);\\n\\tlet maxGrowThreads = Math.ceil(neededGrowthPercent / growPercent(_server, 1, player, cores));\\n\\tvar weakenThreads = ((ns.getServerSecurityLevel - ns.getServerMinSecurityLevel) + (maxGrowThreads * 0.004)) / 0.05\\n\\tlet timeToGrow = growTime(_server, player);\\n\\tlet timeToWeaken = weakenTime(_server, player);\\n\\t// Sets timer delay to ensure weaken is completed only AFTER grow finishes.\\n\\tlet weakenDelayTime = timeToGrow - timeToWeaken;\\n\\tif (weakenDelayTime < 0) { weakenDelayTime = 0; }\\n\\n\\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\tlet availalbeMoney = ns.getServerMoneyAvailable(server);\\n\\tif (availalbeMoney < maxMoney) {\\n\\t\\t// Grow money\\n\\t\\tdistributeAttackLoad(ns, server, GROW, maxGrowThreads, 0);\\n\\t}\\n\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(server);\\n\\tlet securityLvl = ns.getServerSecurityLevel(server);\\n\\tif (securityLvl > minSecurity) {\\n\\t\\tdistributeAttackLoad(ns, server, WEAKEN, weakenThreads, weakenDelayTime);\\n\\t}\\n\\t/**\\n\\t * Server is PRIMING\\n\\t * - Mark the serverNode as PRIMING, and set the timestamp/time it will take for weakening+delay to complete!\\n\\t */\\n\\t// ns.print(`SET PRIMING ${server} scheduled to complete at: ${Date.now()+timeToWeaken + weakenDelayTime}`);\\n\\tserverMap.get(server).setPriming(timeToWeaken + weakenDelayTime);\\n}\\n\\nasync function attackServer(ns, server) {\\n\\tns.print(\\\"ATTACKING\\\")\\n\\tlet _server = ns.getServer(server);\\n\\tlet cores = ns.getServer(HOME).cpuCores;\\n\\t// Should give the amount of threads needed to grow by 200%\\n\\t// I could solve for threads from the EQ: 2.00 = growPercent^threads\\n\\t// var growThreads = Math.ceil(((5 / (growPercent(_server, 1, player, cores) - 1))));\\n\\tlet gPercent = growPercent(_server, 1, player, cores);\\n\\t// Should be the correct equation for calulating growth threads needed to double the server's money\\n\\tvar growThreads = Math.ceil(Math.log2(2) / Math.log2(gPercent));\\n\\tvar hackThreads = threadsToHackPercent(_server, 50);  //Getting the amount of threads I need to hack 50% of the funds\\n\\t// var weakenThreads = (growThreads - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n\\t//  (HackThreads * 0.002 + WeakenThreads * 0.004) / 0.053125\\n\\t// weakenThreads = Math.ceil((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\tvar weakenThreads = Math.ceil((hackThreads * 0.002 + growThreads * 0.004) / 0.05);\\n\\n\\t///\\n\\t///\\tPriming Delay\\n\\t///\\n\\tlet delay = 0;\\n\\tif(serverMap.get(server).getPrimingTimeStamp > Date.now()){\\n\\t\\tdelay = serverMap.get(server).getPrimingTimeStamp - Date.now()\\n\\t}\\n\\n\\tns.print(`ATTACKING: ${server} w/ ${hackThreads} hack threads`)\\n\\tdistributeAttackLoad(ns, server, HACK, hackThreads, delay);\\n\\t/**\\n\\t * PRIMING server.\\n\\t * Regrow what will be lost from the hack, and weaken what would be strengthened.\\n\\t * Calculate timing adjustments:\\n\\t */\\n\\tlet timeToHack = hackTime(_server, player);\\n\\tlet timeToGrow = growTime(_server, player);\\n\\tlet timeToWeaken = weakenTime(_server, player);\\n\\tlet growDelay = delay;\\n\\tlet weakenDelay = delay;\\n\\tif (timeToHack > timeToGrow) {\\n\\t\\tgrowDelay = timeToHack - timeToGrow + delay;\\n\\t}\\n\\tif (timeToGrow + growDelay > timeToWeaken) {\\n\\t\\tweakenDelay = timeToGrow + growDelay - weakenDelay + delay;\\n\\t}\\n\\n\\tdistributeAttackLoad(ns, server, GROW, growThreads, growDelay);\\n\\tdistributeAttackLoad(ns, server, WEAKEN, weakenThreads, weakenDelay);\\n}\\n\\nfunction distributeAttackLoad(ns, targetServer, script, totalThreads, delay) { // Consider doing delays by time stamp?\\n\\tlet scriptRam = ns.getScriptRam(script);\\n\\tlet host;\\n\\tlet ram;\\n\\tlet threads;\\n\\tns.print(`Distributed ${script} attack for ${targetServer}`)\\n\\tfor (let i = 0; i < vulnerableServers.length; i++) {\\n\\t\\t// figure out how many threads we can run of our script on the given server\\n\\t\\thost = vulnerableServers[i];\\n\\t\\t// ns.print(`ATTEMPT distributing ${totalThreads} ${script} threads to\\\" ${host} w/ ${delay} delay`)\\n\\t\\tram = ns.getServerRam(host);\\n\\t\\tthreads = Math.floor((ram[0] - ram[1]) / scriptRam);\\n\\t\\tif (threads > 0) {\\n\\t\\t\\t// Subtract threads from totalThreads value!\\n\\t\\t\\tif (threads > totalThreads) {\\n\\t\\t\\t\\t// Limit to only the needed amount!\\n\\t\\t\\t\\tthreads = totalThreads;\\n\\t\\t\\t}\\n\\t\\t\\tns.print(`Distributing ${threads} threads to ${host}`)\\n\\t\\t\\ttotalThreads -= threads;\\n\\t\\t\\tns.exec(script, host, threads, targetServer, delay, randomValue());\\n\\t\\t}\\n\\t\\tif (totalThreads <= 0) {\\n\\t\\t\\tns.print(`Distributed ${script} attack for ${targetServer} to: ${host}: COMPETED ALL THREADS! ${totalThreads}`)\\n\\t\\t\\treturn; // Done distributing the attack load!\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tns.print(`Distributed ${script} attack threads remaining: ${totalThreads}`)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction randomValue() {\\n\\treturn Math.floor(Math.random() * 100000);\\n}\\n\\nasync function sortVulnerableServersByFreeRam(ns) {\\n\\tvulnerableServers.sort(function (a, b) {\\n\\t\\tlet serverAFreeRam = ns.getServerMaxRam(a) - ns.getServerUsedRam(a);\\n\\t\\tlet serverBFreeRam = ns.getServerMaxRam(b) - ns.getServerUsedRam(b);\\n\\t\\treturn serverAFreeRam < serverBFreeRam ? 1 : serverAFreeRam > serverBFreeRam ? -1 : 0;\\n\\t});\\n}\\n\\n// Returns the amount of threads needed to hack X% of a server's money. (Enter percent as int)\\nfunction threadsToHackPercent(server, percent) {\\n\\treturn Math.floor(percent / (hackPercent(server, player) * 100));\\n}\\n// Returns time in seconds!\\nasync function getTime() {\\n\\treturn Date.now() / 1000;\\n}\",\"filename\":\"controllScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"blob:file:///0a28df5e-7ab1-4bbf-b08f-ad626a30928c\",\"moduleSequenceNumber\":255},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///31a7c481-4ae7-47e6-9a5a-a9ac50401951\",\"moduleSequenceNumber\":55623},{\"filename\":\"/lib/ServerNode.js\",\"url\":\"blob:file:///96c56e9a-2924-4a61-abb3-a4e8851be41c\",\"moduleSequenceNumber\":264},{\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"blob:file:///bd44c915-e695-4b1f-a8a1-9c32df3abb41\",\"moduleSequenceNumber\":263},{\"filename\":\"controllScript.js\",\"url\":\"blob:file:///79c06516-9f6d-4aca-832b-3fdf0fdcf2e1\",\"moduleSequenceNumber\":73558}],\"dependents\":[],\"ramUsage\":9,\"server\":\"home\",\"moduleSequenceNumber\":73824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO: Make this the ultimate controll script!\\n * The goal of this script is to basically be a glorified events manager.\\n * [] Then the hackEventCoordinator should manage how we stagger out weaken, grow, and hack commands, \\n * and what vulnerable servers run how many of the threads for each distributed attack!\\n * \\n * The contractSolver will ideally automatically solve contracts, and noify me of their completion, so I can choose rep or $$$.\\n * - possibly allow myself to assign which company to build rep for, if this is even automatable.\\n * [] MVP for now is just identifying which servers have cct files and notifying me.\\n * \\t\\t- Might be able to run them with a script? Needs further research.\\n * \\n * Should map out programs that need stop/start from this script w/ their RAM usage, so we know how much we need to\\n * reserve for their respective server! (I.E. autoNode on home takes up X ram, so when we calculate how much to \\n * use for threading, we take that reserved amount into account and avoid using it)\\n * - More along this vein, I could very well do ram calcs ahead of time and pass them on as args to other scripts to avoid\\n *   eating up unnecessary RAM. [OPTIMIZATION] \\n * - Or try to keep track of this via ports... (Seems messy)\\n * \\n * // Would be nice if we had a list of known servers we need to backdoor for FACTIONS, so it would give a toast notification!\\n */\\nimport PriorityQueue from \\\"lib/PriorityQueue.js\\\";\\nimport ServerNode from \\\"lib/ServerNode.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport { \\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n } from \\\"lib/formulasHackingFacade.js\\\";\\nvar player;\\nvar serverMap;\\nvar controlCycle;\\n// Servers to check through for value/hacking list\\nvar vulnerableServers; // List of servers that have already been cracked (Possibly not hackable yet)\\nvar serversToExploit;\\nvar hackableServers;\\nvar notHackableServers;\\nvar topTargets;\\nvar exploits;\\n// For traversal\\nlet queuedServers;\\nlet traversedServers;\\n\\n// Function labels for control cycle\\nconst EXPLOIT_CHECK = 0;\\nconst LVL_UP_CHECK = 1;\\n\\n// Timers\\nvar lastAvailableExploitsCheck;\\n\\n//Player stats to listen to\\nvar hackingLvl;\\n\\nasync function init(ns) {\\n\\tplayer = ns.getPlayer();\\n\\t// If need be, could make an \\\"Event\\\" wrapper class that is the function, \\n\\t// UUID(name, effectively), and other useful vars for ordering.\\n\\n\\t// High level functions for the main control loop!\\n\\t// Can be inserted & removed as deemed necessary!\\n\\n\\tcontrolCycle = new Map();\\n\\tcontrolCycle.set(EXPLOIT_CHECK, function () { exploitCheck(ns) });\\n\\tcontrolCycle.set(LVL_UP_CHECK, function () { levelUpCheck(ns) });\\n\\t// controlCycle.set() //Idk, X_PORT_LISTEN maybe? (I.E. for Node, when that is useful...)\\n\\t// Additional EventQueue?\\n\\tserverMap = new Map();\\n\\tvulnerableServers = [];\\n\\tserversToExploit = new PriorityQueue(); // Prioritized by # of exploits required\\n\\texploits = 0;\\n\\n\\thackableServers = [];\\n\\tnotHackableServers = new PriorityQueue(); // Prioritized by min hacking level required\\n\\n\\ttopTargets = []\\n\\n\\tqueuedServers = []\\n\\ttraversedServers = [HOME]\\n\\tlastAvailableExploitsCheck = 0;\\n\\thackingLvl = 1;\\n}\\n\\nexport async function main(ns) {\\n\\tns.print(\\\"TEST\\\")\\n\\tawait ns.sleep(\\\"50\\\");\\n\\tinit(ns);\\n\\tawait countExploits(ns);\\n\\n\\t// Traversal should generate a list of all servers, ideally seperating them into hackable/notHackable\\n\\t// Evaluating Servers & Cracking them!\\n\\ttraverseServers(ns);\\n\\n\\tlet running = true;\\n\\twhile (running) {\\n\\t\\tfor (let [key, value] of controlCycle.entries()) {\\n\\t\\t\\tvalue();\\n\\t\\t}\\n\\t\\tns.sleep(25);\\n\\t}\\n\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\n// INITIAL traversal of ALL servers, to split them up into catagories for future processing!\\n// Evaluating Servers & Cracking them!\\nasync function traverseServers(ns) {\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\tlet server;\\n\\twhile (queuedServers.length > 0) {\\n\\t\\tserver = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n}\\n\\nasync function levelUpCheck(ns) {\\n\\tif (ns.getHackingLevel() !== hackingLvl) {\\n\\t\\thackingLvl = ns.getHackingLevel();\\n\\t\\t// Checks if there are no un-hackable servers remaining, will remove this from controlCycle\\n\\t\\tif (notHackableServers.length < 1) {\\n\\t\\t\\tcontrolCycle.delete(LVL_UP_CHECK);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Servers that are now hackable will be moved onto the hackable stack/list\\n\\t\\tlet server;\\n\\t\\twhile (serverMap[notHackableServers[0]].getReqHackLvl() <= hackingLvl) {\\n\\t\\t\\tserver = notHackableServers.shift();\\n\\t\\t\\thackableServers.push(server);\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\t// sort after adding\\n\\t\\tsortHackableServers(ns);\\n\\t}\\n}\\n\\nexport async function countExploits(ns) {\\n\\tlet changed = false;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tlastAvailableExploitsCheck = getTime();\\n\\treturn changed;\\n}\\n\\nasync function exploitCheck(ns) {\\n\\tif (exploits < 5 && (getTime() - lastAvailableExploitsCheck) > 10) {\\n\\t\\tlet changed = await countExploits(ns);\\n\\t\\tif (changed) {\\n\\t\\t\\tcrackExploitableServers(ns);\\n\\t\\t}\\n\\t} else if (exploits === 5) {\\n\\t\\tcontrolCycle.delete(EXPLOIT_CHECK);\\n\\t}\\n}\\n\\nasync function crackExploitableServers(ns) {\\n\\tlet server;\\n\\twhile (exploits >= serversToExploit.front().getExploitsReq()) {\\n\\t\\tserver = serversToExploit.dequeue();\\n\\t\\tcrackServer(ns, server.getName(), server.getExploitsReq);\\n\\t\\tinfectVulnerableServer(ns, server);\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n}\\n\\nasync function crackServer(ns, server, reqPorts) {\\n\\tswitch (reqPorts) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.sqlinject(server)\\n\\t\\tcase 4:\\n\\t\\t\\tns.httpworm(server)\\n\\t\\tcase 3:\\n\\t\\t\\tns.relaysmtp(server)\\n\\t\\tcase 2:\\n\\t\\t\\tns.ftpcrack(server)\\n\\t\\tcase 1:\\n\\t\\t\\tns.brutessh(server)\\n\\t\\tdefault:\\n\\t\\t\\tns.nuke(server)\\n\\t}\\n}\\n\\n// Used for initial traversal\\nexport async function processServer(ns, server) {\\n\\tlet exploited = ns.hasRootAccess(server);\\n\\tif (!exploited) {\\n\\t\\tlet reqPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t// Attempt to crack\\n\\t\\tif (reqPorts <= exploits) {\\n\\t\\t\\tcrackServer(ns, server, reqPorts);\\n\\t\\t} else {\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\tserversToExploit.enqueue(server, reqPorts);\\n\\t\\t}\\n\\t}\\n\\n\\t// Add to vulnerable server list\\n\\texploited = ns.hasRootAccess(server);\\n\\tif (exploited) {\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n\\t// Continues with the traversal\\n\\tlet subServers = ns.scan(server)\\n\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\tlet subServer = subServers[index];\\n\\t\\tif (!traversedServers.includes(subServer)) {\\n\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t}\\n\\t}\\n\\n\\t// Split into hackable/notHackable groupings\\n\\tlet hackLvlReq = ns.getServerRequiredHackingLevel(server);\\n\\tlet maxRam = ns.getServerMaxRam(server);\\n\\tisHackable();\\n\\tlet traversed = true;\\n\\t// TODO: hasCCT check?\\n\\tlet hasCCT = false;\\n\\t// Add server to map w/ it's relevant info stored in a ServerNode for later ease of access.\\n\\tmap.set(server, new ServerNode(server, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, subServers));\\n}\\n\\nasync function isHackable(server) {\\n\\tlet reqHackingLvl = ns.getServerRequiredHackingLevel(server);\\n\\tif (ns.getHackingLevel() >= reqHackingLvl) {\\n\\t\\thackableServers.push(server);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tnotHackableServers.enqueue(server, reqHackingLvl);\\n\\t}\\n\\treturn false;\\n}\\n\\n// TODO: Completely revamp/replace this with Hacking event manager.\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(VIRUS, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t\\t- Will need to keep track of what scripts are running on which servers\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\nasync function infectVulnerableServer(ns, server) {\\n\\tawait ns.scp(WEAKEN, server);\\n\\tawait ns.scp(GROW, server);\\n\\tawait ns.scp(HACK, server);\\n}\\n\\nexport async function profileTargets(ns) {\\n\\t// TODO: What we REALLY want this function to do is SORT targets by value!\\n\\t// topTargets should no longer exist once this is accomplished!\\n\\t// Q1. How to establish server value\\n\\t// Q2. How to initially sort, and then maintain the sorted list?\\n\\t// - Probably with a datastructure capable of storing &\\n\\t//\\t sorting ServerNodes with it's own evaluation & comparison function\\n\\n\\tsortHackableServers(ns);\\n\\t// Once sorted, we want to allocate the right order & correct amount of threads distributed accross servers.\\n\\t// Then, once we have enough allocated to doing those three things (perhaps with a 2nd layer to buffer)\\n\\t// we can move on to the next highest valued server to do the same thing, and so on...\\n\\t// - To avoid having to re-allocate, we would be listening via ports for when they complete, so we know when we need to launch new tasks.\\n\\t//  - OR scheduling them such that they are back to back always (second layer)\\n}\\n\\nasync function sortHackableServers(ns){\\n\\thackableServers.sort(function (a, b) {\\n\\t\\t// Determines which server has a higher value based on amount possible to earn per second. ($/rate)\\n\\t\\tlet serverA = ns.getServer(a);\\n\\t\\tlet serverB = ns.getServer(b);\\n\\n\\t\\tlet hackValueA = hackPercent(serverA, player) * getServerMaxMoney(serverA, player);\\n\\t\\tlet timeA = weakenTime(serverA, player) + growTime(serverA, player) + hackTime(serverA, player);\\n\\t\\tlet hackValueB = hackPercent(serverB, player) * getServerMaxMoney(serverB, player);\\n\\t\\tlet timeB = weakenTime(serverB, player) + growTime(serverB, player) + hackTime(serverB, player);\\n\\n\\t\\tlet serverAValue = hackValueA / timeA;\\n\\t\\tlet serverBValue = hackValueB / timeB;\\n\\t\\treturn serverAValue > serverBValue ? 1 : serverAValue < serverBValue ? -1 : 0;\\n\\t});\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(VIRUS);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif (maxThreadCount <= 0) {\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t} else {\\n\\t\\t\\tswitch (topTargets.length) {\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet homeThreadCount = Math.floor((ns.getServerMaxRam(HOME) - ns.getServerUsedRam(HOME)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch (topTargets.length) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\\n\\n// Returns time in seconds!\\nasync function getTime() {\\n\\treturn Date.now() / 1000;\\n}\",\"filename\":\"/SimpleScripts/controllScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default class Bucket {\\n\\n\\t// Holder of host server & thread count to run an executed script with!\\n\\t// Intended as a util function for controlCycle to be generated with the `distribute` function & returned as a list\\n\\tconstructor(host, threads) {\\n\\t\\tthis.host = host;\\n\\t\\tthis.threads = threads;\\n\\t}\\n}\",\"filename\":\"/lib/Bucket.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet usedRam = ns.getServerUsedRam(\\\"home\\\")\\n\\tns.print(`TEST: ${usedRam}`)\\n\\tawait ns.sleep(10000)\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///3ad0861e-d603-4a28-8e61-91b6c60cd878\",\"moduleSequenceNumber\":44513}],\"dependents\":[],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///b9b82d4b-69b5-4d1e-b670-3ded0277f166\",\"moduleSequenceNumber\":500}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///3d8dcdf9-7479-4c42-b805-539a6118b113\",\"moduleSequenceNumber\":499}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///cd686407-2659-49a7-8da4-67c93e27342e\",\"moduleSequenceNumber\":1808}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\n\\nconst serverList = [\\n\\t\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\n\\t\\\"darkweb\\\",\\\"zer0\\\",\\\"nectar-net\\\",\\\"max-hardware\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"omega-net\\\",\\n\\t\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"avmnite-02h\\\",\\\"comptek\\\",\\\"crush-fitness\\\",\\\"netlink\\\",\\\"syscore\\\",\\\"summit-uni\\\",\\n\\t\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"zb-institute\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"alpha-ent\\\",\\\"millenium-fitness\\\",\\n\\t\\\"aevum-police\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"galactic-cyber\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\n\\t\\\"unitalife\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"univ-energy\\\",\\\"solaris\\\",\\\"defcomm\\\",\\\"zeus-med\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\n\\t\\\"zb-def\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"applied-energetics\\\",\\\"run4theh111z\\\",\\\"titan-labs\\\",\\\"stormtech\\\",\\\"helios\\\",\\n\\t\\\"fulcrumtech\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"4sigma\\\",\\\"kuai-gong\\\",\\\".\\\",\\\"blade\\\",\\\"clarkinc\\\",\\\"nwo\\\",\\\"b-and-a\\\",\\n\\t\\\"powerhouse-fitness\\\",\\\"ecorp\\\",\\\"fulcrumassets\\\",\\\"The-Cave\\\",\\\"megacorp\\\"]\\n\\nexport async function main(ns) {\\n\\t// Go through all servers & infect them!\\n\\tfor(let i = 0; i<serverList.length; i++){\\n\\t\\tawait infectVulnerableServer(ns, serverList[i]);\\n\\t}\\n}\\n\\nasync function infectVulnerableServer(ns, server) {\\n\\tawait ns.scp(WEAKEN, server);\\n\\tawait ns.scp(GROW, server);\\n\\tawait ns.scp(HACK, server);\\n}\",\"filename\":\"infect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///e35dc12e-bc01-49e3-ad54-59a9fdff5b91\",\"moduleSequenceNumber\":55623},{\"filename\":\"infect.js\",\"url\":\"blob:file:///279a40b3-591d-4d9c-b97e-f641f27f63ae\",\"moduleSequenceNumber\":73559}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":73826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    SERVER_LIST,\\n    CCT_MAP,\\n    HOME\\n} from \\\"lib/customConstants.js\\\";\\nimport randomValue from \\\"lib/util.js\\\"\\n\\nvar serversWithCct = []\\nvar running = true;\\n\\nexport async function main(ns) {\\n    // Go through all servers & search for CCT files.\\n    while (running) {\\n        findCctFiles(ns);\\n        for (let i in serversWithCct) {\\n            var contract = serversWithCct[i];\\n            var contractType = ns.codingcontract.getContractType(contract[0], contract[1]);\\n            var solveScript = CCT_MAP.get(contractType);\\n            var version = getVersion(contractType);\\n            ns.print(`Found \\\"${contractType}\\\" on ${contract[1]} => ${solveScript}`)\\n            ns.exec(solveScript, HOME, 1, contract[0], contract[1], version, randomValue());\\n        }\\n\\n        await ns.sleep(60000);\\n    }\\n}\\n\\nfunction findCctFiles(ns) {\\n    for (let i = 0; i < SERVER_LIST.length; i++) {\\n        let server = SERVER_LIST[i];\\n        var serverContracts = ns.ls(server, \\\".cct\\\");\\n        for (let c = 0; c < serverContracts.length; c++) {\\n            serversWithCct.push([serverContracts[c], server]);\\n        }\\n    }\\n}\\n\\nfunction getVersion(string) {\\n    if (string.endsWith(\\\"IV\\\")) {\\n        return 4;\\n    } else if (string.endsWith(\\\"III\\\")) {\\n        return 3;\\n    } else if (string.endsWith(\\\"II\\\")) {\\n        return 2;\\n    } else if (string.endsWith(\\\"I\\\")) {\\n        return 1;\\n    }\\n    return 0;\\n}\",\"filename\":\"cctSolver.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///b2c7a61e-7554-4275-80e0-9ee4580a1a5d\",\"moduleSequenceNumber\":78033},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///4ea0ddbc-e77a-42a2-9371-b970a5d50e2d\",\"moduleSequenceNumber\":74089},{\"filename\":\"cctSolver.js\",\"url\":\"blob:file:///149197a2-3f9e-41ac-b841-924e37e71b93\",\"moduleSequenceNumber\":97446}],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"moduleSequenceNumber\":97446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Question samples:\\n * How many different ways can the number 45 be written as a sum of at least two positive integers?\\n * How many different ways can the number 31 be written as a sum of at least two positive integers?\\n */\\n\\nlet precalcPartitions = [0, 0, 1, 2, 4, 6, 10, 14, 21, 29, 41, 55, 76, 100, 134, 175, 230, 296, 384, 489, 626, 791, 1001, 1254, 1574, 1957, 2435, 3009, 3717, 4564, 5603, 6841, 8348, 10142, 12309, 14882, 17976, 21636, 26014, 31184, 37337, 44582, 53173, 63260, 75174, 89133, 105557, 124753, 147272, 173524, 204225, 239942, 281588, 329930, 386154, 451275, 526822, 614153, 715219, 831819, 966466, 1121504, 1300155, 1505498, 1741629, 2012557, 2323519, 2679688, 3087734, 3554344, 4087967, 4697204, 5392782, 6185688, 7089499, 8118263, 9289090, 10619862, 12132163, 13848649, 15796475, 18004326, 20506254, 23338468, 26543659, 30167356, 34262961, 38887672, 44108108, 49995924, 56634172, 64112358, 72533806, 82010176, 92669719, 104651418, 118114303, 133230929, 150198135, 169229874, 190569291, 214481125, 241265378, 271248949, 304801364, 342325708, 384276335, 431149388, 483502843, 541946239, 607163745, 679903202, 761002155, 851376627, 952050664, 1064144450, 1188908247, 1327710075, 1482074142, 1653668664, 1844349559, 2056148050, 2291320911, 2552338240, 2841940499, 3163127351, 3519222691, 3913864294, 4351078599, 4835271869, 5371315399, 5964539503, 6620830888, 7346629511, 8149040694, 9035836075, 10015581679, 11097645015, 12292341830, 13610949894, 15065878134, 16670689207, 18440293319, 20390982756, 22540654444, 24908858008, 27517052598, 30388671977, 33549419496, 37027355199];\\n\\nexport async function main(ns) {\\n\\tvar contract = ns.args[0];\\n\\tvar host = ns.args[1];\\n\\tvar data = ns.codingcontract.getData(contract, host)\\n\\tns.codingcontract.attempt(solve(data), contract, host)\\n\\tawait ns.sleep(100000)\\n}\\n\\nfunction solve(data){\\n\\t// Wrong? (Needs proofing)\\n\\treturn precalcPartitions[data];\\n\\t//Math.pow(2,(data - 1));\\n}\\n\\n//  outputData = await solverWaysToSum(ns, inputData);\\n//                     outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\n \\n//                     ns.tprint([listServers[listIndex],\\n//                         listFiles[z],\\n//                         inputType,\\n//                         outputData,\\n//                         outputResult\\n//                     ]);\\n//                     if (!outputResult) {\\n//                         ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\n//                     }\\n//                     break;\\n\\n// async function solverWaysToSum(ns, arrayData) {\\n//     ns.tprint(\\\"solverWaysToSum()\\\");\\n//     await ns.sleep(1000);\\n//     let precalcPartitions = [0, 0, 1, 2, 4, 6, 10, 14, 21, 29, 41, 55, 76, 100, 134, 175, 230, 296, 384, 489, 626, 791, 1001, 1254, 1574, 1957, 2435, 3009, 3717, 4564, 5603, 6841, 8348, 10142, 12309, 14882, 17976, 21636, 26014, 31184, 37337, 44582, 53173, 63260, 75174, 89133, 105557, 124753, 147272, 173524, 204225, 239942, 281588, 329930, 386154, 451275, 526822, 614153, 715219, 831819, 966466, 1121504, 1300155, 1505498, 1741629, 2012557, 2323519, 2679688, 3087734, 3554344, 4087967, 4697204, 5392782, 6185688, 7089499, 8118263, 9289090, 10619862, 12132163, 13848649, 15796475, 18004326, 20506254, 23338468, 26543659, 30167356, 34262961, 38887672, 44108108, 49995924, 56634172, 64112358, 72533806, 82010176, 92669719, 104651418, 118114303, 133230929, 150198135, 169229874, 190569291, 214481125, 241265378, 271248949, 304801364, 342325708, 384276335, 431149388, 483502843, 541946239, 607163745, 679903202, 761002155, 851376627, 952050664, 1064144450, 1188908247, 1327710075, 1482074142, 1653668664, 1844349559, 2056148050, 2291320911, 2552338240, 2841940499, 3163127351, 3519222691, 3913864294, 4351078599, 4835271869, 5371315399, 5964539503, 6620830888, 7346629511, 8149040694, 9035836075, 10015581679, 11097645015, 12292341830, 13610949894, 15065878134, 16670689207, 18440293319, 20390982756, 22540654444, 24908858008, 27517052598, 30388671977, 33549419496, 37027355199];\\n\\n//     return precalcPartitions[arrayData];\\n// }\",\"filename\":\"/cctSolutions/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/cctSolutions/totalWaysToSum.js\",\"url\":\"blob:file:///97309f09-40e0-4e49-9f8f-ff5915826878\",\"moduleSequenceNumber\":97448}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":97712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar contract = ns.args[0];\\n\\tvar host = ns.args[1];\\n\\tvar data = ns.codingcontract.getData(contract, host)\\n\\tns.codingcontract.attempt(solve(data), contract, host)\\n}\\n\\nfunction solve(number){\\n\\tvar divisor = 2;\\n\\twhile (number > 1) {\\n\\t\\tif (number % divisor === 0) {\\n\\t\\t\\tnumber /= divisor;\\n\\t\\t} else {\\n\\t\\t\\tdivisor++;\\n\\t\\t}\\n\\t}\\n\\treturn divisor;\\n}\",\"filename\":\"/cctSolutions/findLargestPrimeFactor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/cctSolutions/findLargestPrimeFactor.js\",\"url\":\"blob:file:///59c0c266-f4f5-40ae-bb27-796f7e58d92b\",\"moduleSequenceNumber\":71454}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":71718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/arrayJumpingGame.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/arrayJumpingGame.js\",\"url\":\"blob:file:///af7f233f-2aba-48a7-800b-f15a5d269c90\",\"moduleSequenceNumber\":43589}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":43589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var version;\\n\\nexport async function main(ns) {\\n\\t// Pass in the version using arguments!\\n\\tversion = ns.args[0]\\n}\",\"filename\":\"/cctSolutions/algorithmicStockTrader.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/algorithmicStockTrader.js\",\"url\":\"blob:file:///411d2c55-28b4-4cec-8568-0c1c4f8e6552\",\"moduleSequenceNumber\":52461}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":52461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var version;\\n\\nexport async function main(ns) {\\n\\t// Pass in the version using arguments!\\n\\tversion = ns.args[0]\\n}\",\"filename\":\"/cctSolutions/uniquePathsInGrid.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/uniquePathsInGrid.js\",\"url\":\"blob:file:///2f6245ee-1f0b-4391-95c4-d75b3257b936\",\"moduleSequenceNumber\":43587}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":43587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/findAllValidMathExpressions.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/findAllValidMathExpressions.js\",\"url\":\"blob:file:///f816a547-847c-4359-abf2-65bf089455a9\",\"moduleSequenceNumber\":52458}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":52458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/mergeOverlappingIntervals.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/mergeOverlappingIntervals.js\",\"url\":\"blob:file:///dd73b6c7-0eba-4d23-8fe8-7deb62953a32\",\"moduleSequenceNumber\":52460}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":52460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default function randomValue() {\\n\\treturn Math.floor(Math.random() * 100000);\\n}\\n\\n// TODO: Consider adding a general logging utility for outputting to an error log to a specified directory!\\n// I.E. \\nexport function debug(script, server, msg, type){\\n\\t// save it to the /log directory under it's appropriate \\\"type\\\"\\n\\t// Type will use constants for things like: ERROR, PRINT_OUT, etc.\\n\\t// E.G. an error message from controllScript.js running on n00dles would look like:\\n\\t//\\t- /log/errors/n00dles_controllScript.js.log \\n}\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":78033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/sanitizeParentheses.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/sanitizeParentheses.js\",\"url\":\"blob:file:///6e983fee-a06d-4177-a802-602941d371ce\",\"moduleSequenceNumber\":52456}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":52456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/spiralizeMatrix.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/spiralizeMatrix.js\",\"url\":\"blob:file:///8336f9e3-76fc-425c-b24a-4048b8210271\",\"moduleSequenceNumber\":53248}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":53248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/generateIpAddresses.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/generateIpAddresses.js\",\"url\":\"blob:file:///a552b32a-0732-467e-9ab7-0b211769a82e\",\"moduleSequenceNumber\":54037}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/subarrayWithMaximumSum.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/subarrayWithMaximumSum.js\",\"url\":\"blob:file:///f4f29b01-8e1a-4522-85e9-6b41b6b5d729\",\"moduleSequenceNumber\":55095}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":55095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/minimumPathSumInATriangle.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/minimumPathSumInATriangle.js\",\"url\":\"blob:file:///dada3bca-3482-4c77-915d-b6cf4ec24d76\",\"moduleSequenceNumber\":55890}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":55890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"45.3.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55205345620,\"moneyMax\":1380133640500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1368,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"28.2.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":47701151013,\"moneyMax\":1192528775325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1242,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"88.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":21057610778,\"moneyMax\":526440269450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1066,\"serverGrowth\":62}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"36.9.2.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":255,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0,73218],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.2099999999842,\"pid\":6268,\"ramUsage\":1.7,\"server\":\"blade\",\"threads\":150,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///53d5c67b-ad44-4afc-964d-377832b91194\",\"moduleSequenceNumber\":6812}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///b392502b-a045-4ec2-83f9-b9b524f84d92\",\"moduleSequenceNumber\":502}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///3d9cae68-208a-431b-b145-7739aee7bd68\",\"moduleSequenceNumber\":502}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///53d5c67b-ad44-4afc-964d-377832b91194\",\"moduleSequenceNumber\":6812}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":6812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":18828037137,\"moneyMax\":470700928425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":927,\"serverGrowth\":62}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"46.4.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32188273306,\"moneyMax\":804706832650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1029,\"serverGrowth\":92}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"49.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":16876110751,\"moneyMax\":421902768775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"82.1.1.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":292.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0,13721],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.2099999999842,\"pid\":6266,\"ramUsage\":1.7,\"server\":\"omnitek\",\"threads\":172,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///7783c2f0-642b-4bc0-85af-5dfaf1f44245\",\"moduleSequenceNumber\":33003}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///7875d3af-3236-444f-83f7-44540478884f\",\"moduleSequenceNumber\":83815}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":83815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///4cca5840-89d7-4dd6-bb1a-1c9e8cc5414e\",\"moduleSequenceNumber\":503}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///7783c2f0-642b-4bc0-85af-5dfaf1f44245\",\"moduleSequenceNumber\":33003}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":33003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":13619941577,\"moneyMax\":340498539425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1054,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-395806.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"74665\",-23],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518313.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[1,8],[9,2,3],[6,8,9,7],[8,7,2,8,6],[9,3,6,8,3,7]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"31.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":18577765576,\"moneyMax\":464444139400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":984,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"99.6.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":22491754554,\"moneyMax\":562293863850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1247,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"45.0.0.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1793.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,7354],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6242,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":1006,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///8ad3b63c-47ee-4d1a-8a5e-460d1e454f08\",\"moduleSequenceNumber\":512}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,15680],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6243,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":19,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///0c6dc423-0571-4091-a3d2-36c76f432100\",\"moduleSequenceNumber\":33001}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///0c6dc423-0571-4091-a3d2-36c76f432100\",\"moduleSequenceNumber\":33001}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":33001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///8ad3b63c-47ee-4d1a-8a5e-460d1e454f08\",\"moduleSequenceNumber\":512}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///da8bb890-b896-48a0-ac8b-804204c3f13b\",\"moduleSequenceNumber\":516}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1792930190,\"moneyMax\":44823254750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1111,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"74.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1548,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-173849.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[194,17,51,56,59,184,186,29,87,183,58,127,116,156,112,73,144,133,24,94,135,144,45,89,94,94,47],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"63.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1184817410,\"moneyMax\":29620435250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":962,\"serverGrowth\":79}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"8.8.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":851300093,\"moneyMax\":21282502325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":959,\"serverGrowth\":65}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-905046.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[47,60,133,111,92,174,67,33,20,80,16,56,24,64,86,185,55,137,8,188,85,15,72],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"13.3.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":727683339,\"moneyMax\":18192083475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":73}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"31.0.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,88523],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6241,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fdaa9bb7-13b0-4782-bd85-04c5d3ad1de0\",\"moduleSequenceNumber\":517}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///bcb79884-5e9e-4f20-bd94-583b75560fec\",\"moduleSequenceNumber\":505}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fdaa9bb7-13b0-4782-bd85-04c5d3ad1de0\",\"moduleSequenceNumber\":517}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///b0c0c584-96b9-4589-92ff-84ae9f095dd6\",\"moduleSequenceNumber\":4562}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":4562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":567244427,\"moneyMax\":14181110675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"61.5.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///f7c37224-646b-406e-b0fc-cb7790925335\",\"moduleSequenceNumber\":83814}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":83814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///71d162aa-4240-448b-be87-5ce90d3514c6\",\"moduleSequenceNumber\":518}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///001ce7ab-dcc2-43d8-9527-351ea5377481\",\"moduleSequenceNumber\":33002}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":33002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":769963142,\"moneyMax\":19249078550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"48.6.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":955737101,\"moneyMax\":23893427525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"96.2.3.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,51954],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6236,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":73,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///36592faf-77b7-4627-9dfb-85289458106b\",\"moduleSequenceNumber\":23172}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///1aeb5a0d-2dbc-4ec5-bfd1-6aba4bba0559\",\"moduleSequenceNumber\":507}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///36592faf-77b7-4627-9dfb-85289458106b\",\"moduleSequenceNumber\":23172}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":23172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///e0271bc0-e149-4722-a5cb-a84cbb3ef355\",\"moduleSequenceNumber\":519}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1119130479,\"moneyMax\":27978261975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":882,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-351491.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,0,-6,-8,-7,5,-3,-1,6,4,-10,-2,1,2,3,-3,-9,-6,7,10,-8,3,10,-3,7,-2,10,3,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"33.6.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,92433],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6240,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ab0d60d3-8729-477c-a5c4-cb1614fd1126\",\"moduleSequenceNumber\":520}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///f9bf211c-9c89-4583-8668-f4d8adbc9c47\",\"moduleSequenceNumber\":508}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ab0d60d3-8729-477c-a5c4-cb1614fd1126\",\"moduleSequenceNumber\":520}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///cb055da7-b155-4a51-b2d6-2c4147fdd4d0\",\"moduleSequenceNumber\":4561}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":807533529,\"moneyMax\":20188338225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"84.9.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,4637],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6238,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///780b7e9e-3a43-4bea-8b07-6c3b357c322d\",\"moduleSequenceNumber\":23174}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///185e3da6-c483-40a6-b0c3-887ec37d716e\",\"moduleSequenceNumber\":509}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///780b7e9e-3a43-4bea-8b07-6c3b357c322d\",\"moduleSequenceNumber\":23174}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":23174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///ca770669-9620-4024-99fc-523eef8b7078\",\"moduleSequenceNumber\":522}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":664537752,\"moneyMax\":16613443800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":90}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"11.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":816454938,\"moneyMax\":20411373450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"84.3.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":774849013,\"moneyMax\":19371225325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"86.5.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1004405139,\"moneyMax\":25110128475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"4.7.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,73696],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6235,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ac35d6fa-5384-4a5b-8715-c0b3a73e80c0\",\"moduleSequenceNumber\":23171}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///79fcd135-1b58-4e5e-b31f-55da62e643b0\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ac35d6fa-5384-4a5b-8715-c0b3a73e80c0\",\"moduleSequenceNumber\":23171}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":23171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///bcd926a6-9e2d-4ac3-9ce0-1730fd4161e3\",\"moduleSequenceNumber\":524}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":949166567,\"moneyMax\":23729164175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"88.6.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1041735019,\"moneyMax\":26043375475,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":809,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-209334.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"13616725219\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"99.7.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":765340358,\"moneyMax\":19133508950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":777,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156976.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[10,15,29,41,18,28]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-287619.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"18317589859\",-98],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"63.4.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,97141],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6237,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1cfe3721-e625-4563-8f65-cbf4df2a7c55\",\"moduleSequenceNumber\":23173}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///1e63d384-1c22-4fba-af9b-61f1cdd420b4\",\"moduleSequenceNumber\":511}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1cfe3721-e625-4563-8f65-cbf4df2a7c55\",\"moduleSequenceNumber\":23173}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":23173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///03f9efaa-af6f-4b1c-9b36-dab1450299ad\",\"moduleSequenceNumber\":525}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":722978679,\"moneyMax\":18074466975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-953441.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[14,40,48,18,28,32],[23,5,27,37,42,35],[19,18,39,15,38,2],[38,18,13,44,42,15],[25,27,3,49,37,19],[28,34,8,3,44,11],[37,43,24,8,28,48],[9,46,36,46,32,32],[50,18,45,24,3,3]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"78.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1306912945,\"moneyMax\":32672823625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":65}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"28.7.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,6041],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6233,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///60818a6a-2f23-4d3d-88ef-8b0cc82d5ee2\",\"moduleSequenceNumber\":23169}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///b97727ee-3037-47e0-bb10-c895b8be6aa0\",\"moduleSequenceNumber\":512}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///60818a6a-2f23-4d3d-88ef-8b0cc82d5ee2\",\"moduleSequenceNumber\":23169}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":23169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///06580fe3-d2f0-4ed8-a62f-1beb50518101\",\"moduleSequenceNumber\":527}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1587369230,\"moneyMax\":39684230750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":772,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"4.3.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1182413390,\"moneyMax\":29560334750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":803,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-877384.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,4,5,0,5,7,9,8,0,0,6,5,6,2,6,6,0,10,0,5,1,4],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"38.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1318206286,\"moneyMax\":32955157150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259871.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[136,194,87,155,97,37,23,136,140,90,124,64,90,40,63,189,62,131,50,125,179,80,25,64,124,133,104,20,70,185,162,66,183,52,3,12,49,28,43,144,147,13,32,11,20,27,60],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"61.3.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,5408],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6234,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///df624640-8838-49d4-b0b8-7fb1d935d939\",\"moduleSequenceNumber\":23170}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///55d7e3fc-d6b6-45ec-9d41-777fac617457\",\"moduleSequenceNumber\":513}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///df624640-8838-49d4-b0b8-7fb1d935d939\",\"moduleSequenceNumber\":23170}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":23170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///ce55a11c-14ba-4578-af7b-0afb38c0abf0\",\"moduleSequenceNumber\":528}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1043609018,\"moneyMax\":26090225450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":823,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"60.4.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,28275],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6232,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///9bffc346-c353-4bc3-89a6-3230aa7d39c3\",\"moduleSequenceNumber\":23168}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///242d2174-13c8-474e-a616-8679382143cb\",\"moduleSequenceNumber\":514}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///9bffc346-c353-4bc3-89a6-3230aa7d39c3\",\"moduleSequenceNumber\":23168}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":23168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///f2581bd9-4b77-4ca4-8cba-51346f88730c\",\"moduleSequenceNumber\":529}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":797844808,\"moneyMax\":19946120200,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":746,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"78.0.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,50294],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6228,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///5b748de4-b1f1-4168-b425-52342ff7be68\",\"moduleSequenceNumber\":530}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///9e55b54e-1840-4036-947b-8816089d411f\",\"moduleSequenceNumber\":515}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///5b748de4-b1f1-4168-b425-52342ff7be68\",\"moduleSequenceNumber\":530}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///2541f805-7e3e-4246-a816-e17cfc03db14\",\"moduleSequenceNumber\":1818}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":91.97600000000014,\"minDifficulty\":16,\"moneyAvailable\":154976.88269008574,\"moneyMax\":14039572800,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":504,\"serverGrowth\":54}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"70.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,63871],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6229,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///78b5a8d3-0c11-4b18-a000-dcef29409874\",\"moduleSequenceNumber\":531}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///4def7044-b9dc-4756-a110-e5c852410469\",\"moduleSequenceNumber\":516}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///78b5a8d3-0c11-4b18-a000-dcef29409874\",\"moduleSequenceNumber\":531}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///f8ede4e1-87f5-4ab4-9f89-fd54fe6fe293\",\"moduleSequenceNumber\":1819}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":81.02100000000021,\"minDifficulty\":18,\"moneyAvailable\":86345.19940487941,\"moneyMax\":15233666000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":524,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"87.2.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,89758],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6231,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///b2aaff3e-0715-4e45-b558-81652df45c71\",\"moduleSequenceNumber\":23167}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///9e87eb5a-d095-4944-b02c-d83fde463f13\",\"moduleSequenceNumber\":517}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///b2aaff3e-0715-4e45-b558-81652df45c71\",\"moduleSequenceNumber\":23167}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":23167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///e9c1d2ab-5b8a-4986-8812-72376421aeed\",\"moduleSequenceNumber\":532}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":277095222,\"moneyMax\":6927380550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":417,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"17.2.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,71031],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6224,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///254bcaea-536c-4955-8594-4cb98b800792\",\"moduleSequenceNumber\":534}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///61431bf5-3793-4de2-97f7-103a073ecb1b\",\"moduleSequenceNumber\":518}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///254bcaea-536c-4955-8594-4cb98b800792\",\"moduleSequenceNumber\":534}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///f76f92b6-c9a4-4ab4-b2c7-04aed6415c09\",\"moduleSequenceNumber\":533}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":188138562,\"moneyMax\":4703464050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":409,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-384310.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,1,8,3,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"91.2.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,62934],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6226,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///2a3f4d8a-5e8f-4998-8266-503b9901c937\",\"moduleSequenceNumber\":535}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///dc744087-d401-488d-a7ab-3b31962eaf29\",\"moduleSequenceNumber\":519}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///2a3f4d8a-5e8f-4998-8266-503b9901c937\",\"moduleSequenceNumber\":535}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///006a57e7-812a-47b9-aac3-a018fd8a5e61\",\"moduleSequenceNumber\":1816}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":872838693,\"moneyMax\":21820967325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"69.8.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,87544],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6223,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///c1c7b2c2-42b5-4900-84e4-fc07825a15f1\",\"moduleSequenceNumber\":23166}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///928a1699-947e-49d7-b4e6-a6d54fe41da0\",\"moduleSequenceNumber\":520}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///c1c7b2c2-42b5-4900-84e4-fc07825a15f1\",\"moduleSequenceNumber\":23166}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":23166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///2bb1e128-eef7-4ceb-8c35-60f6490fb4fa\",\"moduleSequenceNumber\":536}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":64.03200000000007,\"minDifficulty\":19,\"moneyAvailable\":4725.787423098669,\"moneyMax\":8687574300,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":449,\"serverGrowth\":50}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-970300-Aevum.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,17],[14,23],[20,29],[6,8],[17,23],[10,14],[6,7],[16,17],[6,14],[10,18],[14,24],[6,16],[22,31],[17,26],[16,17]],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"25.4.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":472993348,\"moneyMax\":11824833700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":564,\"serverGrowth\":63}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"10.4.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,70164],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6225,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///520a4cb0-f77c-4a3b-aed4-5e1a4d305e4f\",\"moduleSequenceNumber\":537}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///674877e4-ecfa-4fd5-b72f-19f54e8382cb\",\"moduleSequenceNumber\":521}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///520a4cb0-f77c-4a3b-aed4-5e1a4d305e4f\",\"moduleSequenceNumber\":537}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///e38c08be-daf8-4313-93cc-694d6f4c17d8\",\"moduleSequenceNumber\":1815}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":1815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":72.22587500000003,\"minDifficulty\":23,\"moneyAvailable\":131442485.36354616,\"moneyMax\":9338320350,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":407,\"serverGrowth\":33}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"87.0.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,97427],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6220,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///b65b028d-5be9-4144-b79b-287229823640\",\"moduleSequenceNumber\":538}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///a9fcbd37-5c87-4d2d-bd9f-3b23be50998d\",\"moduleSequenceNumber\":522}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///b65b028d-5be9-4144-b79b-287229823640\",\"moduleSequenceNumber\":538}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///b0f1a368-7cbc-4290-9b3a-eafd6978bb5a\",\"moduleSequenceNumber\":1814}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":1814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":45.758,\"minDifficulty\":13,\"moneyAvailable\":464568.03286731016,\"moneyMax\":3833948925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":283,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-816466.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[11,14],[12,18],[21,23],[5,11],[25,32],[22,26],[12,15]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"87.0.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":226076557,\"moneyMax\":5651913925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":341,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"92.7.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,44353],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6222,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///dc8d7d99-e41f-4d1e-abe0-c4b614b48f1b\",\"moduleSequenceNumber\":23165}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///cb33c8b8-af23-4c57-95a3-9e566d6a2821\",\"moduleSequenceNumber\":523}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///dc8d7d99-e41f-4d1e-abe0-c4b614b48f1b\",\"moduleSequenceNumber\":23165}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":23165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///ecd7a3e0-f26b-4fb2-8dda-f22a18d20db5\",\"moduleSequenceNumber\":539}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":384,\"serverGrowth\":46}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"64.2.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":74221164,\"moneyMax\":1855529100,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":266,\"serverGrowth\":64}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"45.2.0.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,54390],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6205,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///227635fe-68b5-41b4-8961-67840eb82381\",\"moduleSequenceNumber\":540}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///74fd6ce0-e121-453e-b73d-a303fc74322f\",\"moduleSequenceNumber\":41733}],\"dependents\":[],\"ramUsage\":2,\"server\":\"n00dles\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///fad7f7a3-4767-46ea-b4df-6c3db75fed80\",\"moduleSequenceNumber\":524}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///227635fe-68b5-41b4-8961-67840eb82381\",\"moduleSequenceNumber\":540}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///949e935e-2206-4d26-bc26-ae74cd731e7f\",\"moduleSequenceNumber\":1809}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":1809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-768317-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,13],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"87.8.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,90554],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6206,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///be2683dd-1560-4690-a768-6297950106af\",\"moduleSequenceNumber\":541}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///62874030-7f79-4f58-84d1-2c43b1588cf5\",\"moduleSequenceNumber\":41734}],\"dependents\":[],\"ramUsage\":2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///888a7018-fc62-4495-8dc3-e911e370a3e5\",\"moduleSequenceNumber\":525}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///be2683dd-1560-4690-a768-6297950106af\",\"moduleSequenceNumber\":541}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///0f201f1f-472e-4880-a966-b2405e744377\",\"moduleSequenceNumber\":1810}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":774231.2488401365,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"72.9.7.9\",\"isConnectedTo\":true,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,1394],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6207,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///31ed29c0-d376-4a60-81c6-7be23dbbf978\",\"moduleSequenceNumber\":542}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0edd18bc-305e-44a9-acd4-df5129617e1a\",\"moduleSequenceNumber\":41735}],\"dependents\":[],\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///0b5936c8-ca73-484d-88fd-450119b5e6ce\",\"moduleSequenceNumber\":526}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///31ed29c0-d376-4a60-81c6-7be23dbbf978\",\"moduleSequenceNumber\":542}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///b59e477d-3a4c-4acb-9c90-f211a097c910\",\"moduleSequenceNumber\":1811}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.24,\"minDifficulty\":3,\"moneyAvailable\":1528495.5681882408,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"42.9.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,30469],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6208,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///f2e59a6b-bab9-4df8-8f79-22a7b61662ef\",\"moduleSequenceNumber\":544}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///607ec919-e86b-42c8-89aa-a4f13212241c\",\"moduleSequenceNumber\":41736}],\"dependents\":[],\"ramUsage\":2,\"server\":\"joesguns\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///6889ae22-acde-4bd0-83e5-bffa4edfb5cb\",\"moduleSequenceNumber\":527}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///f2e59a6b-bab9-4df8-8f79-22a7b61662ef\",\"moduleSequenceNumber\":544}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///c829c459-a56d-4f52-9ec6-b8d72ce6f263\",\"moduleSequenceNumber\":543}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.28,\"minDifficulty\":5,\"moneyAvailable\":1049343.310203303,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"98.9.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,41334],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6212,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///aeb69f88-1145-4100-9d65-41bcc5049864\",\"moduleSequenceNumber\":23160}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7113354f-4e73-4428-8cf1-51e80952e601\",\"moduleSequenceNumber\":41728}],\"dependents\":[],\"ramUsage\":2,\"server\":\"zer0\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///4291da7c-2512-4fe4-b22f-dd43b2f85b49\",\"moduleSequenceNumber\":528}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///aeb69f88-1145-4100-9d65-41bcc5049864\",\"moduleSequenceNumber\":23160}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":23160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///9f978c8f-97d8-4157-9bfa-b082434083ac\",\"moduleSequenceNumber\":545}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":16.31799999999999,\"minDifficulty\":8,\"moneyAvailable\":16.185518312050107,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"86.9.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,31927],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6213,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///dc17ed67-853a-4ea3-b24b-d1249b5b9eb8\",\"moduleSequenceNumber\":23161}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///fe618779-55ad-4188-b1b8-18df07fb81ef\",\"moduleSequenceNumber\":41729}],\"dependents\":[],\"ramUsage\":2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///b1273360-5022-4c4c-9352-c39141f24d1e\",\"moduleSequenceNumber\":529}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///dc17ed67-853a-4ea3-b24b-d1249b5b9eb8\",\"moduleSequenceNumber\":23161}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":23161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///db993657-f332-4e41-84cf-0208416d43fc\",\"moduleSequenceNumber\":546}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"41.4.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,94094],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6216,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///9da0e88a-1d4a-421a-85dc-ba83b020bf69\",\"moduleSequenceNumber\":23164}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///a47a972c-cbea-42d6-b493-70eeec9e5ec8\",\"moduleSequenceNumber\":41732}],\"dependents\":[],\"ramUsage\":2,\"server\":\"neo-net\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///8a7f6f76-8f9a-4e44-87ce-30d0fb7565c3\",\"moduleSequenceNumber\":530}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///9da0e88a-1d4a-421a-85dc-ba83b020bf69\",\"moduleSequenceNumber\":23164}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":23164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///2de31f74-dced-45da-9f56-493de9307343\",\"moduleSequenceNumber\":547}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":16.30199999999999,\"minDifficulty\":8,\"moneyAvailable\":16.115784674802747,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"36.5.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,65907],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6217,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///0346a357-6d05-467f-8643-5b65192205ac\",\"moduleSequenceNumber\":549}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///ae1a9dab-be51-483d-a039-421d5a2d64ae\",\"moduleSequenceNumber\":531}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///0346a357-6d05-467f-8643-5b65192205ac\",\"moduleSequenceNumber\":549}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///4ddf7798-a6fd-4d46-af48-737df40e7d74\",\"moduleSequenceNumber\":548}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":37.862,\"minDifficulty\":10,\"moneyAvailable\":49509173.237614945,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"82.2.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,28958],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6209,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d7975699-e6c0-4e3a-9987-6eca4772f19c\",\"moduleSequenceNumber\":23157}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7c2d54d3-e7ae-425d-a776-a16ebcd1df31\",\"moduleSequenceNumber\":41737}],\"dependents\":[],\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///53b2a921-317f-4487-877c-9d4d220bf08d\",\"moduleSequenceNumber\":532}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d7975699-e6c0-4e3a-9987-6eca4772f19c\",\"moduleSequenceNumber\":23157}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":23157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///ffb21c3a-2d0e-41a1-bec9-54e077248946\",\"moduleSequenceNumber\":550}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.08,\"minDifficulty\":5,\"moneyAvailable\":3964589.4256574907,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-164837.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,4,3,5,4,5,0,9,4,1,5,10,9,6,3,9,7],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-703062.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[193,179,109,128,69]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"47.3.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,81944],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6210,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///bd0441fc-facd-4b4f-b562-b65fe26a8329\",\"moduleSequenceNumber\":23158}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///1b714975-d2d8-4301-9a53-1c60e183f95d\",\"moduleSequenceNumber\":41738}],\"dependents\":[],\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///8f078fe9-6dd0-4dcd-bb12-c1ac060876d5\",\"moduleSequenceNumber\":533}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///bd0441fc-facd-4b4f-b562-b65fe26a8329\",\"moduleSequenceNumber\":23158}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":23158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///4a9143bf-91e1-4f64-a6bf-d3619e58b651\",\"moduleSequenceNumber\":551}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":1155996.704877195,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995101.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"519387\",95],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"42.7.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,55820],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6218,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///22babfeb-01eb-41f5-a935-3b7790e0ebd8\",\"moduleSequenceNumber\":552}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///f11ef4cb-2249-4473-97da-d656cf4e7ec0\",\"moduleSequenceNumber\":534}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///22babfeb-01eb-41f5-a935-3b7790e0ebd8\",\"moduleSequenceNumber\":552}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///9288312c-6cd0-4f4a-81da-4fbb6186524f\",\"moduleSequenceNumber\":1812}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":1812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":39.52374999999999,\"minDifficulty\":7,\"moneyAvailable\":54176572.23373717,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-121111.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()())((()(a()()()(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-815730.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"78.4.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,72883],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6214,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d5a3eacb-f45c-4109-8e6b-4f3e1a394377\",\"moduleSequenceNumber\":23162}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///8664f346-57aa-476f-9ac6-92234fcaaa59\",\"moduleSequenceNumber\":41730}],\"dependents\":[],\"ramUsage\":2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///ad44fd2b-45c7-49e0-b216-01f4a10c194f\",\"moduleSequenceNumber\":535}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d5a3eacb-f45c-4109-8e6b-4f3e1a394377\",\"moduleSequenceNumber\":23162}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":23162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///1c3b56b0-8e30-4d85-bc9b-abb8ebae1e8f\",\"moduleSequenceNumber\":553}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":24.44399999999999,\"minDifficulty\":5,\"moneyAvailable\":2778233.7214925373,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-26561.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"808607\",33],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.3.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,38867],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6219,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///06e4e716-6db4-4444-859f-b68ea626f1e9\",\"moduleSequenceNumber\":554}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///9fa59b65-549a-49c6-a75c-be32f405a052\",\"moduleSequenceNumber\":536}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///06e4e716-6db4-4444-859f-b68ea626f1e9\",\"moduleSequenceNumber\":554}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///8059bd07-9f81-4d1b-8a0b-2461fab2647a\",\"moduleSequenceNumber\":1813}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":22.322000000000003,\"minDifficulty\":9,\"moneyAvailable\":8626919.956372915,\"moneyMax\":1581338950,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":217,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"48.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":49898171,\"moneyMax\":1247454275,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":237,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"68.4.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,67488],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6211,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///0a48fdfc-c6b7-4f54-a448-2c08333810fb\",\"moduleSequenceNumber\":23159}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///cc38f4f8-8cf3-462e-b471-69a9a6cb6c39\",\"moduleSequenceNumber\":41739}],\"dependents\":[],\"ramUsage\":2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///7b054022-66d1-441c-af00-39e2a40faa6a\",\"moduleSequenceNumber\":537}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///0a48fdfc-c6b7-4f54-a448-2c08333810fb\",\"moduleSequenceNumber\":23159}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":23159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///f09fdbee-f3c2-42f2-b5f8-7e1fe3811a06\",\"moduleSequenceNumber\":555}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":37.12974999999999,\"minDifficulty\":10,\"moneyAvailable\":19704.880829977574,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-478152-Aevum.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[79,27,189,73,23,14,79,172,15,17,66,184,61,119,2,199,166,102,144,195,31,64,193,24,55,126,158,5,73,162,60,35,17,148],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"94.2.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,30946],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6230,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":73,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///899d2aef-7a09-421f-a759-65dc6826b0ae\",\"moduleSequenceNumber\":556}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///dbfab349-b4b4-43fe-bd2d-e37a5e220a36\",\"moduleSequenceNumber\":538}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///899d2aef-7a09-421f-a759-65dc6826b0ae\",\"moduleSequenceNumber\":556}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///cd1ddb9c-9e33-46d0-beb9-dd4543ce1d4c\",\"moduleSequenceNumber\":557}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":524,\"serverGrowth\":41}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-88281.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[19,20],[8,14],[17,27],[15,22],[10,15],[2,5],[23,33],[24,27],[1,5],[18,27],[15,24],[5,6],[21,31],[25,30]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"54.4.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0,56169],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.2099999999842,\"pid\":6269,\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"threads\":37,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///870558e3-9d76-4423-9f60-c60ab78a805e\",\"moduleSequenceNumber\":6813}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///6de6509d-4f46-497c-88f7-2439f84b794f\",\"moduleSequenceNumber\":539}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///be380e5f-8d2a-4194-8a5c-2a1f637d5185\",\"moduleSequenceNumber\":558}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///870558e3-9d76-4423-9f60-c60ab78a805e\",\"moduleSequenceNumber\":6813}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":6813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"54.7.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":755,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-344476.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[58,83,97,83,180,75,159,132,136,57,118,2,44,124,50,156,23,50,154,20,64,103,190,54,115,105,24,195,64,124,173,65,56,122,69,194,15,35,60,173,87,1,101,13,127,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"18.1.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,14005],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6239,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":73,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///6ce1f31e-e176-4aa9-ac14-d409ae9ebe86\",\"moduleSequenceNumber\":560}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///28edfa9a-97d9-4a7c-b795-a4d9a220f29e\",\"moduleSequenceNumber\":540}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///6ce1f31e-e176-4aa9-ac14-d409ae9ebe86\",\"moduleSequenceNumber\":560}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///179732da-ab88-477d-b239-a4df03d11b01\",\"moduleSequenceNumber\":561}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638990-Aevum.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[8,3],[7,6,7],[5,2,6,8]],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"98.6.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,17765],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6227,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///90e61400-a278-4bfb-bf5d-1e3562866bf5\",\"moduleSequenceNumber\":562}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///ec19cd09-5413-41f6-b1f6-00913e4fb7ec\",\"moduleSequenceNumber\":541}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///90e61400-a278-4bfb-bf5d-1e3562866bf5\",\"moduleSequenceNumber\":562}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///ee912f6d-387f-46b9-b059-1e991feaf850\",\"moduleSequenceNumber\":1817}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":364,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"34.5.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,95370],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6221,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///52756da6-7391-42b7-85f0-b8392cd48051\",\"moduleSequenceNumber\":564}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///65512f33-b5c9-4529-8794-60f59fb63bc0\",\"moduleSequenceNumber\":542}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///52756da6-7391-42b7-85f0-b8392cd48051\",\"moduleSequenceNumber\":564}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///3c002703-0092-4d5d-9a9e-cbe34ce09d3a\",\"moduleSequenceNumber\":563}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"25.5.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0,63684],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.2099999999842,\"pid\":6267,\"ramUsage\":1.7,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///807fc763-4c54-4e42-9d9a-e2c3db2af227\",\"moduleSequenceNumber\":33004}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///e6bb729c-4c19-4d1b-9c18-859c2a6fbf35\",\"moduleSequenceNumber\":543}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///c943ca3e-52a4-4107-a142-3e52fcd612ed\",\"moduleSequenceNumber\":565}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///807fc763-4c54-4e42-9d9a-e2c3db2af227\",\"moduleSequenceNumber\":33004}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":33004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":533,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"95.2.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",0,66357],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1166.6100000001281,\"pid\":6215,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ce2a0e0b-5801-457a-bb44-47e71e1bb626\",\"moduleSequenceNumber\":23163}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7c5bf0f2-a4cf-4a65-87d9-b716b85de9b7\",\"moduleSequenceNumber\":41731}],\"dependents\":[],\"ramUsage\":2,\"server\":\"CSEC\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///8998e91e-1d35-4524-861d-6b8ce9e8f676\",\"moduleSequenceNumber\":544}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ce2a0e0b-5801-457a-bb44-47e71e1bb626\",\"moduleSequenceNumber\":23163}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":23163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///d6dcbc33-3871-4656-bc10-af24a4daa7a8\",\"moduleSequenceNumber\":566}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"93.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"43.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"15.6.8.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"darkweb\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0909,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":287103.16696708143}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":106.4533,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":104562.88662959712}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":17.2513,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":91865.37211304919}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":13.8788,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":19040.93507387914}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":58.5699,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":6.2292,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":20.7014,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":35.0685,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":6.1498,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":50.3349,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":43489.53971967968}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":91.4211,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":39055.593738865806}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":48.1477,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":18757.703766744973,\"lastPrice\":18695.154869641927,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":14.26644351136994,\"otlkMagForecast\":36.57870685720338,\"cap\":324973361,\"spreadPerc\":0.5,\"shareTxForMovement\":48232,\"shareTxUntilMovement\":48232,\"totalShares\":120700000,\"maxShares\":24100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":65654.40712581963,\"lastPrice\":65841.35331062204,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":20.38688435558502,\"otlkMagForecast\":28.508643305189736,\"cap\":667090647,\"spreadPerc\":0.2,\"shareTxForMovement\":63183,\"shareTxUntilMovement\":63183,\"totalShares\":77400000,\"maxShares\":15500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":76398.53391779459,\"lastPrice\":75976.6746298693,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":12.734485550907285,\"otlkMagForecast\":63.53479515720734,\"cap\":87918844,\"spreadPerc\":0.6,\"shareTxForMovement\":87464,\"shareTxUntilMovement\":87464,\"totalShares\":78100000,\"maxShares\":15600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":29087.9850104921,\"lastPrice\":29224.647807369573,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":13.217350993600231,\"otlkMagForecast\":64.4377867360547,\"cap\":50698693,\"spreadPerc\":0.3,\"shareTxForMovement\":86112,\"shareTxUntilMovement\":86112,\"totalShares\":119900000,\"maxShares\":24000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":9245.126549196217,\"lastPrice\":9289.878760974298,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":18.775304161263676,\"otlkMagForecast\":30.604084899020453,\"cap\":370887146,\"spreadPerc\":0.3,\"shareTxForMovement\":49670,\"shareTxUntilMovement\":49670,\"totalShares\":45500000,\"maxShares\":9100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":124597.82061764528,\"lastPrice\":123690.90325388867,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":true,\"otlkMag\":24.515852015565248,\"otlkMagForecast\":73.81308411514844,\"cap\":594161932,\"spreadPerc\":0.9,\"shareTxForMovement\":40402,\"shareTxUntilMovement\":40402,\"totalShares\":39300000,\"maxShares\":7900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":10884.708203118556,\"lastPrice\":10949.794386921238,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":12.133628735883873,\"otlkMagForecast\":37.55617138956209,\"cap\":20395412,\"spreadPerc\":0.6,\"shareTxForMovement\":69933,\"shareTxUntilMovement\":69933,\"totalShares\":112300000,\"maxShares\":22500000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":235457.26499360407,\"lastPrice\":233462.9582328708,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":10.498259147952131,\"otlkMagForecast\":61.513764674786145,\"cap\":111493659,\"spreadPerc\":1,\"shareTxForMovement\":32989,\"shareTxUntilMovement\":32989,\"totalShares\":57300000,\"maxShares\":11500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":73296.59672660752,\"lastPrice\":73714.01026263353,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.5734889406176,\"otlkMagForecast\":56.49359442198732,\"cap\":152006966,\"spreadPerc\":1,\"shareTxForMovement\":54919,\"shareTxUntilMovement\":54919,\"totalShares\":55900000,\"maxShares\":11200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":15450.8974597654,\"lastPrice\":15522.38984686904,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":8.859558193559996,\"otlkMagForecast\":41.881639275329185,\"cap\":113813750,\"spreadPerc\":0.2,\"shareTxForMovement\":92988,\"shareTxUntilMovement\":92988,\"totalShares\":100800000,\"maxShares\":20200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":7222.39389667877,\"lastPrice\":7251.1852400253265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":7.705851691574591,\"otlkMagForecast\":57.281636504974465,\"cap\":210595217,\"spreadPerc\":0.2,\"shareTxForMovement\":59559,\"shareTxUntilMovement\":59559,\"totalShares\":65600000,\"maxShares\":13100000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":1019.2877691998344,\"lastPrice\":1024.657113632564,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":9.413737632273492,\"otlkMagForecast\":39.2516997960451,\"cap\":124861823,\"spreadPerc\":1,\"shareTxForMovement\":48958,\"shareTxUntilMovement\":48958,\"totalShares\":120100000,\"maxShares\":24000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":80786.36852846698,\"lastPrice\":80391.5005131696,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":6.68422587836569,\"otlkMagForecast\":44.308093522468205,\"cap\":217155865,\"spreadPerc\":0.9,\"shareTxForMovement\":68756,\"shareTxUntilMovement\":68756,\"totalShares\":45600000,\"maxShares\":9100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":35344.171421836974,\"lastPrice\":35487.583388611034,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":8.42295309694428,\"otlkMagForecast\":42.501331267593606,\"cap\":395936842,\"spreadPerc\":0.6,\"shareTxForMovement\":96534,\"shareTxUntilMovement\":96534,\"totalShares\":49400000,\"maxShares\":9900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":9164.507747346028,\"lastPrice\":9205.607804272724,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":6.582889489971722,\"otlkMagForecast\":57.83287207162703,\"cap\":12031935,\"spreadPerc\":0.7,\"shareTxForMovement\":115158,\"shareTxUntilMovement\":115158,\"totalShares\":62400000,\"maxShares\":12500000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":14482.345680047836,\"lastPrice\":14559.665868546932,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":9.90344843974168,\"otlkMagForecast\":58.52190724294733,\"cap\":30992554,\"spreadPerc\":1,\"shareTxForMovement\":49331,\"shareTxUntilMovement\":49331,\"totalShares\":55700000,\"maxShares\":11100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":3917.4808979416152,\"lastPrice\":3939.5115174603243,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":11.469454005888025,\"otlkMagForecast\":39.68862559510184,\"cap\":137866470,\"spreadPerc\":0.5,\"shareTxForMovement\":122570,\"shareTxUntilMovement\":122570,\"totalShares\":27500000,\"maxShares\":5500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":9174.886596478686,\"lastPrice\":9135.218486822816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":10.770818474314446,\"otlkMagForecast\":62.41943512212421,\"cap\":197978554,\"spreadPerc\":0.9,\"shareTxForMovement\":104363,\"shareTxUntilMovement\":104363,\"totalShares\":47900000,\"maxShares\":9600000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":9773.896924231873,\"lastPrice\":9721.303574920323,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":5.18271949780922,\"otlkMagForecast\":55.109919111711214,\"cap\":383210166,\"spreadPerc\":0.8,\"shareTxForMovement\":115565,\"shareTxUntilMovement\":115565,\"totalShares\":26400000,\"maxShares\":5300000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":361073.64401361474,\"lastPrice\":354660.9601061812,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.54,\"b\":false,\"otlkMag\":9.998000341771538,\"otlkMagForecast\":36.60676944903759,\"cap\":19348595,\"spreadPerc\":0.8,\"shareTxForMovement\":33520,\"shareTxUntilMovement\":33520,\"totalShares\":103000000,\"maxShares\":20600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5691.777643905866,\"lastPrice\":5744.450153277648,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":6.375809074822406,\"otlkMagForecast\":44.77241738856232,\"cap\":114700389,\"spreadPerc\":0.8,\"shareTxForMovement\":66694,\"shareTxUntilMovement\":66694,\"totalShares\":55800000,\"maxShares\":11200000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2796.13699100241,\"lastPrice\":2808.8758681754484,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":8.63019630125708,\"otlkMagForecast\":41.90070814009426,\"cap\":52539244,\"spreadPerc\":0.7,\"shareTxForMovement\":99986,\"shareTxUntilMovement\":99986,\"totalShares\":82000000,\"maxShares\":16400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":835.2431876947213,\"lastPrice\":846.5400874345492,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.9,\"b\":true,\"otlkMag\":15.257965009608842,\"otlkMagForecast\":64.08718638880433,\"cap\":127677207,\"spreadPerc\":1.5,\"shareTxForMovement\":80183,\"shareTxUntilMovement\":80183,\"totalShares\":28900000,\"maxShares\":5800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":1786.1117810650023,\"lastPrice\":1765.7490174794548,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.62,\"b\":true,\"otlkMag\":5.595830159936168,\"otlkMagForecast\":55.23048098259672,\"cap\":146480418,\"spreadPerc\":0.8,\"shareTxForMovement\":69929,\"shareTxUntilMovement\":69929,\"totalShares\":33900000,\"maxShares\":6800000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":8205.528648434723,\"lastPrice\":8158.486478304918,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":5.841114400524108,\"otlkMagForecast\":54.60809295885852,\"cap\":13552382,\"spreadPerc\":0.4,\"shareTxForMovement\":97981,\"shareTxUntilMovement\":97981,\"totalShares\":40100000,\"maxShares\":8000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":27.45180939998528,\"lastPrice\":28.07714576449348,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.2,\"b\":true,\"otlkMag\":6.753793322665797,\"otlkMagForecast\":60.82179437670525,\"cap\":44653803,\"spreadPerc\":1.3,\"shareTxForMovement\":48795,\"shareTxUntilMovement\":48795,\"totalShares\":22400000,\"maxShares\":4500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4650.427385137264,\"lastPrice\":4618.2098382610575,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":1.244020487808401,\"otlkMagForecast\":54.71742293193895,\"cap\":88048753,\"spreadPerc\":0.8,\"shareTxForMovement\":73267,\"shareTxUntilMovement\":73267,\"totalShares\":11700000,\"maxShares\":2300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3320.6464093118784,\"lastPrice\":3338.3750985711445,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":6.617028866361922,\"otlkMagForecast\":43.59729440600928,\"cap\":29239008,\"spreadPerc\":1,\"shareTxForMovement\":167742,\"shareTxUntilMovement\":167742,\"totalShares\":31000000,\"maxShares\":6200000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3505.469335478088,\"lastPrice\":3456.7472856029876,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.98,\"b\":true,\"otlkMag\":5.242695092051262,\"otlkMagForecast\":50.65563067718337,\"cap\":67814857,\"spreadPerc\":1.4,\"shareTxForMovement\":53880,\"shareTxUntilMovement\":53880,\"totalShares\":9500000,\"maxShares\":1900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":5677.443440401456,\"lastPrice\":5556.796295988564,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.05,\"b\":false,\"otlkMag\":17.94149309631594,\"otlkMagForecast\":32.040249876637844,\"cap\":17407907,\"spreadPerc\":0.6,\"shareTxForMovement\":24175,\"shareTxUntilMovement\":24175,\"totalShares\":28200000,\"maxShares\":5600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":624.8281283241527,\"lastPrice\":618.7061475305997,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.39,\"b\":false,\"otlkMag\":23.117236612679754,\"otlkMagForecast\":26.79262481657276,\"cap\":7952504,\"spreadPerc\":0.5,\"shareTxForMovement\":49440,\"shareTxUntilMovement\":49440,\"totalShares\":68600000,\"maxShares\":13700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":102650.48800153041,\"lastPrice\":102134.28250769412,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":6.856017324522113,\"otlkMagForecast\":43.974338706739964,\"cap\":92868501,\"spreadPerc\":0.4,\"shareTxForMovement\":208713,\"shareTxUntilMovement\":208713,\"totalShares\":17000000,\"maxShares\":3400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":3419.1781246429873,\"lastPrice\":3406.085039926772,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":10.61476536849229,\"otlkMagForecast\":39.262474473040285,\"cap\":339002582,\"spreadPerc\":0.5,\"shareTxForMovement\":191037,\"shareTxUntilMovement\":191037,\"totalShares\":25500000,\"maxShares\":5100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":133280,\"lastUpdate\":1644747371979,\"ticksUntilCycle\":64}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-23,\"y\":64,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644747375545","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644747375558"}}