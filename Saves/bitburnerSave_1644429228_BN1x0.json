{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":258,\"hp\":10,\"max_hp\":10,\"strength\":5,\"defense\":4,\"dexterity\":7,\"agility\":13,\"charisma\":101,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":1687691.9483046825,\"strength_exp\":80.46500000000188,\"defense_exp\":64.46500000000198,\"dexterity_exp\":130.465000000002,\"agility_exp\":246.465000000002,\"charisma_exp\":11840.859999999084,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":78883337.33078414,\"city\":\"Aevum\",\"location\":\"ECorp\",\"jobs\":{\"FoodNStuff\":\"Part-time Employee\"},\"companyName\":\"FoodNStuff\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":64480.599999769314,\"ram\":64,\"totalMoneyGenerated\":172117257.15034986,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":64478.99999976931,\"ram\":64,\"totalMoneyGenerated\":174486157.9691402,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":64478.799999769304,\"ram\":64,\"totalMoneyGenerated\":159478576.06666505,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":64478.5999997693,\"ram\":64,\"totalMoneyGenerated\":109393462.33451119,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":64478.199999769306,\"ram\":64,\"totalMoneyGenerated\":151139897.1401486,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":64477.9999997693,\"ram\":64,\"totalMoneyGenerated\":146310788.47602272,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":64477.5999997693,\"ram\":64,\"totalMoneyGenerated\":109163657.79001807,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":62250.799999761206,\"ram\":64,\"totalMoneyGenerated\":109146636.74449955,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":60189.199999753706,\"ram\":64,\"totalMoneyGenerated\":108914527.96011959,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":49199.799999766845,\"ram\":64,\"totalMoneyGenerated\":165567638.2117323,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":46295.999999820255,\"ram\":64,\"totalMoneyGenerated\":156215144.2018396,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":17903.800000030064,\"ram\":64,\"totalMoneyGenerated\":98977091.40085302,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":16973.000000026677,\"ram\":64,\"totalMoneyGenerated\":97348393.56665875,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":16698.60000002568,\"ram\":64,\"totalMoneyGenerated\":93614128.3215664,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":10731.00000000394,\"ram\":64,\"totalMoneyGenerated\":78221108.27344774,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":10728.600000003931,\"ram\":64,\"totalMoneyGenerated\":78205986.25793146,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":10724.600000003917,\"ram\":64,\"totalMoneyGenerated\":78163459.77661043,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":10687.800000003783,\"ram\":64,\"totalMoneyGenerated\":78108968.34983228,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":10663.800000003695,\"ram\":64,\"totalMoneyGenerated\":77971984.69495153,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":7424.393172163739,\"onlineTimeSeconds\":9747.600000000362,\"ram\":64,\"totalMoneyGenerated\":70548358.17909423,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":7424.393172163739,\"onlineTimeSeconds\":9675.800000000101,\"ram\":64,\"totalMoneyGenerated\":70110324.48457517,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":7424.393172163739,\"onlineTimeSeconds\":5864.799999996866,\"ram\":64,\"totalMoneyGenerated\":43481007.58260343,\"name\":\"hacknet-node-21\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"CyberSec\",\"Aevum\",\"NiteSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"}],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-0.4,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"NiteSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.15,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.2672615384615385,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":172.32000000000355,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":306.74912000001,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":287000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644429228306,\"totalPlaytime\":65703600,\"playtimeSinceLastAug\":65703600,\"playtimeSinceLastBitnode\":65703600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-5249856,\"codingcontract\":0,\"corporation\":0,\"crime\":60000,\"gang\":0,\"hacking\":6665724367.895912,\"hacknet\":2426684554.923056,\"hacknet_expenses\":-4361775872.955037,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":78882337.33078414,\"work\":193300,\"servers\":-1470378016.5950418,\"other\":-312300000,\"augmentations\":-2664076139.9449997}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-5249856,\"codingcontract\":0,\"corporation\":0,\"crime\":60000,\"gang\":0,\"hacking\":6665724367.895912,\"hacknet\":2426684554.923056,\"hacknet_expenses\":-4361775872.955037,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":78882337.33078414,\"work\":193300,\"servers\":-1470378016.5950418,\"other\":-312300000,\"augmentations\":-2664076139.9449997}},\"scriptProdSinceLastAug\":6642086877.797623,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1644364076521},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1644364796512},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644365636510},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1644369056521},{\"ID\":\"TOR\",\"unlockedOn\":1644370256520},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1644372116520},{\"ID\":\"TRAVEL\",\"unlockedOn\":1644372296511},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1644374516517},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1644377936516},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1644411651922},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644411651933},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644411651935},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644413931922},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644414351923},{\"ID\":\"NITESEC\",\"unlockedOn\":1644416091923},{\"ID\":\"FROZE\",\"unlockedOn\":1644416137121}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.8.0.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":1012,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[822467580,1012,1012,1012],\"crush-fitness\":[8643492,506,1012,1012],\"neo-net\":[2887.6506313431664,1012,1012,1012],\"joesguns\":[1264.9565301229115,506,1012,1012],\"hong-fang-tea\":[1957.7121992177158,1012,1012,1012]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":148118.85000000003,\"onlineMoneyMade\":831117182.3193606,\"onlineRunningTime\":6587.009999996209,\"pid\":347,\"ramUsage\":2,\"server\":\"home\",\"threads\":506,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///8fc9bc03-f768-4197-874e-0c9b2dcb1724\",\"moduleSequenceNumber\":669}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetServer = ns.args[0];\\n\\twhile (true){\\n\\t\\tns.print(`Hacking ${targetServer}`);\\n\\t\\tawait ns.hack(targetServer);\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"blob:file:///3066b819-a1a0-4fc9-b19b-3425b4eb3cda\",\"moduleSequenceNumber\":2223}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":89,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet topTargets = []\\nlet exploits = 0;\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\nlet virus = \\\"/SimpleScripts/virus.js\\\"\\n\\nexport async function main(ns) {\\n\\tawait countExploits(ns);\\n\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n\\tns.print(`Vulnerable Servers: ${vulnerableServers}`);\\n\\n\\t// SCPs virus to vulnerable servers\\n\\tawait infectVulnerableServers(ns);\\n\\tns.print(`Servers infected.`)\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits){\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\t\\t\\tcase 4:\\n\\t\\t\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\t\\t\\tcase 2:\\n\\t\\t\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\t\\t\\tcase 1:\\n\\t\\t\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}catch{\\n\\t\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif(ns.hasRootAccess(server)){\\n\\t\\tvulnerableServers.push(server)\\n\\t\\tlet subServers = ns.scan(server)\\n\\t\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(virus, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\n\\t\\t// TODO: Run virus on vulnerable server(s) against selected target server(s)\\n\\t\\n\\t// TODO: Determine highest value targetable server (Profile hacking targets)\\n\\t// TODO: Target most valuable servers (make a list)\\n\\t\\t// Then send out `hack` command to all vulnerable servers targeting X server\\n\\t// ns.print(`Hacking ${targetServer}`);\\n\\t// await ns.hack(targetServer);\\n\\t// await ns.grow(targetServer);\\n\\t// await ns.weaken(targetServer);\\n\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\n\\n// TODO: Determine highest value targetable server (Profile hacking targets)\\nexport async function profileTargets(ns) {\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\t// For now, we're just going with the highest dollar amount :P\\n\\t\\tif (ns.getHackingLevel() > ns.getServerRequiredHackingLevel(server)){\\n\\t\\t\\tif(topTargets.length < 5){\\n\\t\\t\\t\\ttopTargets.push(server);\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tfor (let i = 0; i < topTargets.length; i++) {\\n\\t\\t\\t\\t\\tif(ns.getServerMaxMoney(topTargets[i]) < ns.getServerMaxMoney(server)){\\n\\t\\t\\t\\t\\t\\ttopTargets[i] = server;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// let server = vulnerableServers[index];\\n\\t// \\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\t// \\tlet hackSuccessChance = ns.hackSuccessChance(server);\\n\\t// \\t// let threadScale = threadsUsed\\n\\t// \\tlet weakenTime = security/weakenProgress\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(virus);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif(maxThreadCount <= 0){\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t}else{\\n\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t}\\n\\t}\\n\\tlet home = \\\"home\\\";\\n\\tlet homeThreadCount =  Math.floor((ns.getServerMaxRam(home) - ns.getServerUsedRam(home)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\",\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"blob:file:///c9e0888c-bbd6-4213-a407-05900c409459\",\"moduleSequenceNumber\":18146}],\"dependents\":[],\"ramUsage\":5.2,\"server\":\"home\",\"moduleSequenceNumber\":18146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet exploits = 0;\\n\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\n\\nexport async function main(ns) {\\n\\tawait countExploits();\\n\\t\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits)\\n\\t\\ttry{\\n\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\tcase 5:\\n\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\tcase 4:\\n\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t}\\n\\t\\t}catch{\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t}\\n\\n\\t\\tif(ns.hasRootAccess(server)){\\n\\t\\t\\tlet subServers = scan(server)\\n\\t\\t\\tfor (let index = 0; index < subServers.length; ++index) {\\n\\t\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"blob:file:///d31df9bb-5e5a-4fcd-9aed-bd62053860fa\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":91,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///8fc9bc03-f768-4197-874e-0c9b2dcb1724\",\"moduleSequenceNumber\":669}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":93,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nconst LVL = 0;\\nconst RAM = 1;\\nconst CORE = 2;\\nconst HOME = \\\"home\\\";\\n\\nexport async function main(ns) {\\n\\twhile (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n\\t\\tlet newNodeRatio = await calcNewNodeValueRatio(ns);\\n\\n\\t\\t// Find highest ratio from all current nodes!\\n\\t\\tlet bestNodeToUpgrade = -1;\\n\\t\\tlet bestProperty = -1; // 0-2 are level, ram, and core\\n\\t\\tlet bestRatio = 0;\\n\\t\\tlet lvlRatio;\\n\\t\\tlet ramRatio;\\n\\t\\tlet coreRatio;\\n\\t\\t// Finds the best upgrade value amongst existing nodes\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tlvlRatio = await calcLevelUpgradeValueRatio(ns, i);\\n\\t\\t\\tramRatio = await calcRamUpgradeValueRatio(ns, i);\\n\\t\\t\\tcoreRatio = await calcCoreUpgradeValueRatio(ns, i);\\n\\t\\t\\t// ns.print(`Node${i}: lvl:${lvlRatio}, ram:${ramRatio}, core:${coreRatio}`);\\n\\t\\t\\tif (lvlRatio > ramRatio && lvlRatio > coreRatio) {\\n\\t\\t\\t\\t// Lvl ratio is the highest for this node\\n\\t\\t\\t\\tif (lvlRatio > bestRatio) {\\n\\t\\t\\t\\t\\tbestRatio = lvlRatio;\\n\\t\\t\\t\\t\\tbestProperty = LVL;\\n\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (ramRatio > coreRatio) {\\n\\t\\t\\t\\t// Ram ratio is the highest for this node\\n\\t\\t\\t\\tif (ramRatio > bestRatio) {\\n\\t\\t\\t\\t\\tbestRatio = ramRatio;\\n\\t\\t\\t\\t\\tbestProperty = RAM;\\n\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Core ratio is the highest for this node\\n\\t\\t\\t\\tif (coreRatio > bestRatio) {\\n\\t\\t\\t\\t\\tbestRatio = coreRatio;\\n\\t\\t\\t\\t\\tbestProperty = CORE;\\n\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Buys a new node or the best valued upgrade\\n\\t\\tlet bal = ns.getServerMoneyAvailable(HOME);\\n\\t\\tif (newNodeRatio > bestRatio) {\\n\\t\\t\\t// Buy a new node!\\n\\t\\t\\tns.print(\\\"Trying to buy a new Node...\\\")\\n\\t\\t\\tif (ns.hacknet.getPurchaseNodeCost() < bal) {\\n\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\tns.print(\\\"Bought a new Node!\\\")\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tswitch (bestProperty) {\\n\\t\\t\\t\\tcase LVL:\\n\\t\\t\\t\\t\\tif (ns.hacknet.getLevelUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\tns.print(`Upgrading LVL of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase RAM:\\n\\t\\t\\t\\t\\tif (ns.hacknet.getRamUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\tns.hacknet.upgradeRam(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\tns.print(`Upgrading RAM of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase CORE:\\n\\t\\t\\t\\t\\tif (ns.hacknet.getCoreUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\tns.hacknet.upgradeCore(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\tns.print(`Upgrading CORES of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(\\\"No best property chosen?\\\")\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(\\\"50\\\");\\n\\t\\t// Ideally would like to sleep for how long it should take based on current production rates to reach the next level up!\\n\\t\\t// The default being every second or so...\\n\\t}\\n}\\n\\nexport async function findWeakestNode(ns) {\\n\\t// Returns the node that produces the least, i.e. needs to be upgraded\\n\\tlet weakest = 0;\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tif (ns.hacknet.getNodeStats(i).production < ns.hacknet.getNodeStats(weakest).production) {\\n\\t\\t\\tweakest = i;\\n\\t\\t}\\n\\t}\\n\\treturn weakest;\\n}\\n\\n// export async function calcAvgNodeProduction(ns) {\\n// \\t// Returns average production of current nodes\\n// }\\n\\n///\\n/// These functions translate the cost of the next upgrade to a ratio for comparison to see what is worth saving for\\n///\\nexport async function calcLevelUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getLevelUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await levelUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`lvl: ${lvl} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio\\n}\\n\\nexport async function calcRamUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getRamUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await ramUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\treturn ratio;\\n}\\n\\nexport async function calcCoreUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getCoreUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await coreUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`core: ${core} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio;\\n}\\n\\nexport async function calcNewNodeValueRatio(ns) {\\n\\tlet totalHacknetNodeProduction = 0;\\n\\tlet numberOfNodes = await ns.hacknet.numNodes();\\n\\tfor (let i = 0; i < numberOfNodes; i++) {\\n\\t\\ttotalHacknetNodeProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\tlet valueRatio = (totalHacknetNodeProduction / numberOfNodes) / ns.hacknet.getPurchaseNodeCost();\\n\\treturn valueRatio;\\n}\\n\\n///\\n/// Functions for gaining profit of lvl ups\\n///\\n\\nexport async function levelUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (1 * 1.5) * Math.pow(1.035, currentRam - 1) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function ramUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * (Math.pow(1.035, (2 * currentRam) - 1) - Math.pow(1.035, currentRam - 1)) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function coreUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * Math.pow(1.035, currentRam - 1) * (1 / 6);\\n}\",\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"blob:file:///2d5536e0-af6a-482f-868c-229090f101f4\",\"moduleSequenceNumber\":8630}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":8630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"93.3.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"ecorp\",\"moduleSequenceNumber\":95,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":64401161624,\"moneyMax\":1610029040600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1280,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"55.0.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"megacorp\",\"moduleSequenceNumber\":96,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51892153140,\"moneyMax\":1297303828500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1343,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"2.7.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":97,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":22221414888,\"moneyMax\":555535372200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1053,\"serverGrowth\":67}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"85.9.0.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,128,128],\"crush-fitness\":[21638848,64,128,128],\"neo-net\":[768,64,64,64],\"joesguns\":[0,64,64,64],\"hong-fang-tea\":[0,64,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12412.8,\"onlineMoneyMade\":21639616,\"onlineRunningTime\":4565.609999998048,\"pid\":390,\"ramUsage\":2,\"server\":\"blade\",\"threads\":64,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///d541bd91-46ad-43a9-8760-7ec8180dfdee\",\"moduleSequenceNumber\":667}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///d541bd91-46ad-43a9-8760-7ec8180dfdee\",\"moduleSequenceNumber\":667}],\"dependents\":[],\"ramUsage\":2,\"server\":\"blade\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":19990916927,\"moneyMax\":499772923175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":997,\"serverGrowth\":56}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"16.9.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"nwo\",\"moduleSequenceNumber\":99,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":36884008979,\"moneyMax\":922100224475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1147,\"serverGrowth\":82}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"73.8.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":21973250919,\"moneyMax\":549331272975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1187,\"serverGrowth\":63}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"10.8.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,128,128],\"crush-fitness\":[22108800,64,128,128],\"neo-net\":[0,0,64,64],\"joesguns\":[0,64,64,64],\"hong-fang-tea\":[0,64,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11908.8,\"onlineMoneyMade\":22108800,\"onlineRunningTime\":4565.609999998048,\"pid\":389,\"ramUsage\":2,\"server\":\"omnitek\",\"threads\":64,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///c0b1bf32-9b9f-4138-8f06-46f5767ad3c3\",\"moduleSequenceNumber\":666}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///c0b1bf32-9b9f-4138-8f06-46f5767ad3c3\",\"moduleSequenceNumber\":666}],\"dependents\":[],\"ramUsage\":2,\"server\":\"omnitek\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":19372582243,\"moneyMax\":484314556075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":961,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"71.9.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"4sigma\",\"moduleSequenceNumber\":102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":15833126289,\"moneyMax\":395828157225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1177,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"29.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":23953444185,\"moneyMax\":598836104625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1023,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"2.8.8.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2048,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,2048,2048],\"crush-fitness\":[0,0,2048,2048],\"neo-net\":[0,0,1024,1024],\"joesguns\":[2448.167462298836,1024,1024,1024],\"hong-fang-tea\":[2776.5140453846097,1024,1024,1024]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190540.8,\"onlineMoneyMade\":5224.681507683446,\"onlineRunningTime\":4565.609999998048,\"pid\":387,\"ramUsage\":2,\"server\":\"fulcrumtech\",\"threads\":1024,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3164a223-c9db-4cad-9108-2b66c5270e8d\",\"moduleSequenceNumber\":664}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3164a223-c9db-4cad-9108-2b66c5270e8d\",\"moduleSequenceNumber\":664}],\"dependents\":[],\"ramUsage\":2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1518787530,\"moneyMax\":37969688250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":993,\"serverGrowth\":87}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"25.3.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1228,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"84.7.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"stormtech\",\"moduleSequenceNumber\":106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1159198032,\"moneyMax\":28979950800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":909,\"serverGrowth\":78}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"19.7.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"defcomm\",\"moduleSequenceNumber\":107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":864042063,\"moneyMax\":21601051575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"47.0.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"infocomm\",\"moduleSequenceNumber\":108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":717216226,\"moneyMax\":17930405650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":40}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-175040.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"48.2.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,64,64],\"crush-fitness\":[1753472,32,64,64],\"neo-net\":[64,32,32,32],\"joesguns\":[32,32,32,32],\"hong-fang-tea\":[32,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6446.4,\"onlineMoneyMade\":1753600,\"onlineRunningTime\":4565.609999998048,\"pid\":385,\"ramUsage\":2,\"server\":\"helios\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///ba9ef1be-000e-45b5-9111-8d7c4f440604\",\"moduleSequenceNumber\":662}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///ba9ef1be-000e-45b5-9111-8d7c4f440604\",\"moduleSequenceNumber\":662}],\"dependents\":[],\"ramUsage\":2,\"server\":\"helios\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":667111875,\"moneyMax\":16677796875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"38.5.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,128,128],\"crush-fitness\":[0,0,128,128],\"neo-net\":[128,64,64,64],\"joesguns\":[64,64,64,64],\"hong-fang-tea\":[64,64,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12172.8,\"onlineMoneyMade\":256,\"onlineRunningTime\":4565.609999998048,\"pid\":386,\"ramUsage\":2,\"server\":\"vitalife\",\"threads\":64,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f88c2a30-d36a-4531-9f5a-45bbb4211903\",\"moduleSequenceNumber\":663}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f88c2a30-d36a-4531-9f5a-45bbb4211903\",\"moduleSequenceNumber\":663}],\"dependents\":[],\"ramUsage\":2,\"server\":\"vitalife\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":787484623,\"moneyMax\":19687115575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":784,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"48.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"icarus\",\"moduleSequenceNumber\":111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":983452803,\"moneyMax\":24586320075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"49.3.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[74842560,64,128,128],\"crush-fitness\":[0,0,128,128],\"neo-net\":[320,64,64,64],\"joesguns\":[64,64,64,64],\"hong-fang-tea\":[64,64,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12705.599999999999,\"onlineMoneyMade\":74843008,\"onlineRunningTime\":4565.609999998048,\"pid\":380,\"ramUsage\":2,\"server\":\"univ-energy\",\"threads\":64,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///604b6050-c7bf-4386-8c7f-67fcec5cccb6\",\"moduleSequenceNumber\":657}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///604b6050-c7bf-4386-8c7f-67fcec5cccb6\",\"moduleSequenceNumber\":657}],\"dependents\":[],\"ramUsage\":2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1147293685,\"moneyMax\":28682342125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":855,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"72.4.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,64,64],\"crush-fitness\":[1775520,32,64,64],\"neo-net\":[96,32,32,32],\"joesguns\":[32,32,32,32],\"hong-fang-tea\":[0,0,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6266.4,\"onlineMoneyMade\":1775648,\"onlineRunningTime\":4565.609999998048,\"pid\":383,\"ramUsage\":2,\"server\":\"titan-labs\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///2ad808ce-49b2-4ef9-b2eb-ad1039701515\",\"moduleSequenceNumber\":660}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///2ad808ce-49b2-4ef9-b2eb-ad1039701515\",\"moduleSequenceNumber\":660}],\"dependents\":[],\"ramUsage\":2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":876789571,\"moneyMax\":21919739275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-217365.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[2,6],[6,9,8],[9,1,5,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"44.5.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[61245440,64,64,64],\"crush-fitness\":[0,0,64,64],\"neo-net\":[96,32,32,32],\"joesguns\":[32,32,32,32],\"hong-fang-tea\":[32,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6619.2,\"onlineMoneyMade\":61245600,\"onlineRunningTime\":4565.609999998048,\"pid\":382,\"ramUsage\":2,\"server\":\"microdyne\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///5936ae91-0270-4456-af2f-0f0121046d90\",\"moduleSequenceNumber\":659}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///5936ae91-0270-4456-af2f-0f0121046d90\",\"moduleSequenceNumber\":659}],\"dependents\":[],\"ramUsage\":2,\"server\":\"microdyne\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":685847517,\"moneyMax\":17146187925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":874,\"serverGrowth\":74}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813289-FoodNStuff.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)(()())\",\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"22.8.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":808460589,\"moneyMax\":20211514725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":950,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"45.7.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":829799471,\"moneyMax\":20744986775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":90}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-527159-FoodNStuff.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[3,7],[4,8,2],[5,3,2,4],[3,7,7,2,7],[5,7,5,7,2,6],[9,2,1,1,3,2,2],[6,7,6,1,9,3,8,3],[5,7,4,7,7,3,7,9,9],[9,4,8,1,3,1,2,8,1,9],[8,9,1,9,5,3,9,1,4,7,6]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"69.1.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1195581453,\"moneyMax\":29889536325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":901,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"7.2.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[7014672,8,16,16],\"crush-fitness\":[452328,8,16,16],\"neo-net\":[40,8,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[8,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1678.2,\"onlineMoneyMade\":7467056,\"onlineRunningTime\":4565.609999998048,\"pid\":379,\"ramUsage\":2,\"server\":\"omnia\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f0c5bf58-b348-406d-8e82-74f2c9adc880\",\"moduleSequenceNumber\":656}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f0c5bf58-b348-406d-8e82-74f2c9adc880\",\"moduleSequenceNumber\":656}],\"dependents\":[],\"ramUsage\":2,\"server\":\"omnia\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":915745010,\"moneyMax\":22893625250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":932,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"35.0.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"zb-def\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":929596254,\"moneyMax\":23239906350,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":794,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-699627-FoodNStuff.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[44,8,31,41,41,5,34,46],[25,8,50,48,5,33,34,43],[25,17,34,20,22,50,31,15],[1,11,41,34,31,31,5,38],[44,34,14,2,37,41,12,48],[2,20,30,45,38,1,41,46],[26,6,3,22,28,38,2,14],[5,25,48,37,20,43,8,49]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"4.7.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":994178589,\"moneyMax\":24854464725,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":805,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-857252.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[153,46,111,8,46,176,156,115,24,73,161,169,118,49,89,176,171,141,158,145,86,177,178,61,10,139,154,149,36],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"76.1.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[70655360,64,128,128],\"crush-fitness\":[3611072,64,128,128],\"neo-net\":[256,64,64,64],\"joesguns\":[64,64,64,64],\"hong-fang-tea\":[64,64,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13425.599999999999,\"onlineMoneyMade\":74266816,\"onlineRunningTime\":4565.609999998048,\"pid\":381,\"ramUsage\":2,\"server\":\"solaris\",\"threads\":64,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///aad828ad-107b-46e1-90e2-fb4eee999afe\",\"moduleSequenceNumber\":658}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///aad828ad-107b-46e1-90e2-fb4eee999afe\",\"moduleSequenceNumber\":658}],\"dependents\":[],\"ramUsage\":2,\"server\":\"solaris\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":755713868,\"moneyMax\":18892846700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"44.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"deltaone\",\"moduleSequenceNumber\":122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1523245493,\"moneyMax\":38081137325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"97.1.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[67243488,64,64,64],\"crush-fitness\":[1824512,32,64,64],\"neo-net\":[160,32,32,32],\"joesguns\":[32,32,32,32],\"hong-fang-tea\":[32,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6979.2,\"onlineMoneyMade\":69068224,\"onlineRunningTime\":4565.609999998048,\"pid\":377,\"ramUsage\":2,\"server\":\"global-pharm\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f5b4b558-a279-46dc-bf12-79babbbaac44\",\"moduleSequenceNumber\":654}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f5b4b558-a279-46dc-bf12-79babbbaac44\",\"moduleSequenceNumber\":654}],\"dependents\":[],\"ramUsage\":2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1621024384,\"moneyMax\":40525609600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":785,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"82.7.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"nova-med\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1158587246,\"moneyMax\":28964681150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":846,\"serverGrowth\":70}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"56.6.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1369885363,\"moneyMax\":34247134075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"25.8.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,32,32],\"crush-fitness\":[0,0,32,32],\"neo-net\":[0,0,16,16],\"joesguns\":[16,16,16,16],\"hong-fang-tea\":[16,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2917.2,\"onlineMoneyMade\":32,\"onlineRunningTime\":4565.609999998048,\"pid\":378,\"ramUsage\":2,\"server\":\"unitalife\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0f224452-b37d-413d-8430-2a660fb681a8\",\"moduleSequenceNumber\":655}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0f224452-b37d-413d-8430-2a660fb681a8\",\"moduleSequenceNumber\":655}],\"dependents\":[],\"ramUsage\":2,\"server\":\"unitalife\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1080634794,\"moneyMax\":27015869850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":783,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"90.8.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[14900816,16,32,32],\"crush-fitness\":[0,0,32,32],\"neo-net\":[96,16,16,16],\"joesguns\":[16,16,16,16],\"hong-fang-tea\":[16,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3236.4,\"onlineMoneyMade\":14900944,\"onlineRunningTime\":4565.609999998048,\"pid\":372,\"ramUsage\":2,\"server\":\"lexo-corp\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///64b2180e-41c0-4294-9394-011632603ec2\",\"moduleSequenceNumber\":649}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///64b2180e-41c0-4294-9394-011632603ec2\",\"moduleSequenceNumber\":649}],\"dependents\":[],\"ramUsage\":2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":753717262,\"moneyMax\":18842931550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":750,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-223142.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-6,-4,-4,-8,-8,3,2,-5,-5,-5,4,4,6,-4],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"46.4.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[68869120,64,64,64],\"crush-fitness\":[1743872,32,64,64],\"neo-net\":[192,32,32,32],\"joesguns\":[32,32,32,32],\"hong-fang-tea\":[32,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7099.2,\"onlineMoneyMade\":70613248,\"onlineRunningTime\":4565.609999998048,\"pid\":375,\"ramUsage\":2,\"server\":\"rho-construction\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f4e9c3c9-63bc-4af3-a49a-e9bc01286283\",\"moduleSequenceNumber\":652}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f4e9c3c9-63bc-4af3-a49a-e9bc01286283\",\"moduleSequenceNumber\":652}],\"dependents\":[],\"ramUsage\":2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":523641121,\"moneyMax\":13091028025,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"82.5.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[19992160,16,32,32],\"crush-fitness\":[0,0,32,32],\"neo-net\":[0,0,16,16],\"joesguns\":[0,16,16,16],\"hong-fang-tea\":[16,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3020.3999999999996,\"onlineMoneyMade\":19992176,\"onlineRunningTime\":4565.609999998048,\"pid\":374,\"ramUsage\":2,\"server\":\"alpha-ent\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///2f719d99-927e-4bb2-9c35-e6c6dee8ccea\",\"moduleSequenceNumber\":651}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///2f719d99-927e-4bb2-9c35-e6c6dee8ccea\",\"moduleSequenceNumber\":651}],\"dependents\":[],\"ramUsage\":2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":709824771,\"moneyMax\":17745619275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":569,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"42.8.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[10066752,8,16,16],\"crush-fitness\":[0,0,16,16],\"neo-net\":[56,8,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[8,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1618.1999999999998,\"onlineMoneyMade\":10066824,\"onlineRunningTime\":4565.609999998048,\"pid\":373,\"ramUsage\":2,\"server\":\"aevum-police\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///1914b4e7-1ab0-447c-8900-cd18c1741dfc\",\"moduleSequenceNumber\":650}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///1914b4e7-1ab0-447c-8900-cd18c1741dfc\",\"moduleSequenceNumber\":650}],\"dependents\":[],\"ramUsage\":2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":366586414,\"moneyMax\":9164660350,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":436,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"34.8.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[15080848,16,32,32],\"crush-fitness\":[875408,16,32,32],\"neo-net\":[96,16,16,16],\"joesguns\":[16,16,16,16],\"hong-fang-tea\":[0,0,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3326.4,\"onlineMoneyMade\":15956368,\"onlineRunningTime\":4565.609999998048,\"pid\":371,\"ramUsage\":2,\"server\":\"rothman-uni\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3c765c06-fe8b-47f8-83d9-5a826d320013\",\"moduleSequenceNumber\":648}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3c765c06-fe8b-47f8-83d9-5a826d320013\",\"moduleSequenceNumber\":648}],\"dependents\":[],\"ramUsage\":2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":237437679,\"moneyMax\":5935941975,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":410,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"27.9.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[20420240,16,32,32],\"crush-fitness\":[6010976,32,32,32],\"neo-net\":[128,16,16,16],\"joesguns\":[16,16,16,16],\"hong-fang-tea\":[16,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3596.3999999999996,\"onlineMoneyMade\":26431376,\"onlineRunningTime\":4565.609999998048,\"pid\":368,\"ramUsage\":2,\"server\":\"zb-institute\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///90c96c5e-bf31-4ee7-8beb-835de4f6a4b8\",\"moduleSequenceNumber\":645}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///90c96c5e-bf31-4ee7-8beb-835de4f6a4b8\",\"moduleSequenceNumber\":645}],\"dependents\":[],\"ramUsage\":2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1093854415,\"moneyMax\":27346360375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":737,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"31.9.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[30899680,32,64,64],\"crush-fitness\":[10148800,32,64,64],\"neo-net\":[224,32,32,32],\"joesguns\":[32,32,32,32],\"hong-fang-tea\":[32,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6832.8,\"onlineMoneyMade\":41048768,\"onlineRunningTime\":4565.609999998048,\"pid\":370,\"ramUsage\":2,\"server\":\"summit-uni\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3bb41d77-53a8-43b3-84ac-8537402c7924\",\"moduleSequenceNumber\":647}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3bb41d77-53a8-43b3-84ac-8537402c7924\",\"moduleSequenceNumber\":647}],\"dependents\":[],\"ramUsage\":2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":227141930,\"moneyMax\":5678548250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":436,\"serverGrowth\":45}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"87.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"syscore\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":558526770,\"moneyMax\":13963169250,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":574,\"serverGrowth\":67}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"13.7.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,32,32],\"crush-fitness\":[5980304,32,32,32],\"neo-net\":[128,16,16,16],\"joesguns\":[16,16,16,16],\"hong-fang-tea\":[16,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3463.2,\"onlineMoneyMade\":5980464,\"onlineRunningTime\":4565.609999998048,\"pid\":369,\"ramUsage\":2,\"server\":\"catalyst\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///2ade4e52-a986-4744-9452-a4a3889f49e5\",\"moduleSequenceNumber\":646}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///2ade4e52-a986-4744-9452-a4a3889f49e5\",\"moduleSequenceNumber\":646}],\"dependents\":[],\"ramUsage\":2,\"server\":\"catalyst\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":312865505,\"moneyMax\":7821637625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":437,\"serverGrowth\":40}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"50.5.6.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[5423640,4,8,8],\"crush-fitness\":[221704,4,8,8],\"neo-net\":[0,0,4,4],\"joesguns\":[0,4,4,4],\"hong-fang-tea\":[0,0,4,4]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":777.5999999999999,\"onlineMoneyMade\":5645344,\"onlineRunningTime\":4565.609999998048,\"pid\":365,\"ramUsage\":2,\"server\":\"the-hub\",\"threads\":4,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///343fc9d4-a531-4a4a-8e21-e65b39b6f60e\",\"moduleSequenceNumber\":642}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///343fc9d4-a531-4a4a-8e21-e65b39b6f60e\",\"moduleSequenceNumber\":642}],\"dependents\":[],\"ramUsage\":2,\"server\":\"the-hub\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":152946914,\"moneyMax\":3823672850,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":280,\"serverGrowth\":47}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"57.5.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"comptek\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":242540779,\"moneyMax\":6063519475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":331,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208469.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,8,0,9,4,0,6,1,0,3,10,0,0,6,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"16.9.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[11001512,8,16,16],\"crush-fitness\":[2619416,8,16,16],\"neo-net\":[0,0,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[0,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1600.1999999999998,\"onlineMoneyMade\":13620936,\"onlineRunningTime\":4565.609999998048,\"pid\":364,\"ramUsage\":2,\"server\":\"netlink\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///96f9addb-046a-48d6-94c7-0cfbaf47e27d\",\"moduleSequenceNumber\":641}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///96f9addb-046a-48d6-94c7-0cfbaf47e27d\",\"moduleSequenceNumber\":641}],\"dependents\":[],\"ramUsage\":2,\"server\":\"netlink\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":396,\"serverGrowth\":65}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"25.6.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":84315846,\"moneyMax\":2107896150,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":299,\"serverGrowth\":43}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"94.1.4.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[3688098,4,4,4],\"crush-fitness\":[0,0,2,4],\"neo-net\":[4,2,2,2],\"joesguns\":[2,2,2,2],\"hong-fang-tea\":[2,2,2,2]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":383.7,\"onlineMoneyMade\":3688106,\"onlineRunningTime\":4565.609999998048,\"pid\":349,\"ramUsage\":2,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3845f806-857f-4433-8631-4c9548c6f31a\",\"moduleSequenceNumber\":626}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///f52048fb-ca04-4ab7-8e79-ab7c1b91e6ae\",\"moduleSequenceNumber\":1829}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3845f806-857f-4433-8631-4c9548c6f31a\",\"moduleSequenceNumber\":626}],\"dependents\":[],\"ramUsage\":2,\"server\":\"n00dles\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":2.207999999999978,\"minDifficulty\":1,\"moneyAvailable\":5396,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"8.9.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[8379472,8,16,16],\"crush-fitness\":[0,0,8,16],\"neo-net\":[16,8,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[8,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1468.1999999999998,\"onlineMoneyMade\":8379504,\"onlineRunningTime\":4565.609999998048,\"pid\":350,\"ramUsage\":2,\"server\":\"foodnstuff\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///c3630969-9a42-4f2b-b4c0-0f8372755030\",\"moduleSequenceNumber\":627}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///a0724db3-bdeb-4d43-bc22-7e8c17e774c8\",\"moduleSequenceNumber\":1830}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///c3630969-9a42-4f2b-b4c0-0f8372755030\",\"moduleSequenceNumber\":627}],\"dependents\":[],\"ramUsage\":2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":11.124000000000375,\"minDifficulty\":3,\"moneyAvailable\":245454,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"47.6.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[8438184,8,16,16],\"crush-fitness\":[430680,8,8,16],\"neo-net\":[16,8,8,8],\"joesguns\":[0,0,8,8],\"hong-fang-tea\":[8,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1513.1999999999998,\"onlineMoneyMade\":8868888,\"onlineRunningTime\":4565.609999998048,\"pid\":351,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7794f642-426d-486a-836d-31e5a7cf715c\",\"moduleSequenceNumber\":628}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///b6c6aaaa-e8cb-4182-9ab5-2c983698869f\",\"moduleSequenceNumber\":1831}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7794f642-426d-486a-836d-31e5a7cf715c\",\"moduleSequenceNumber\":628}],\"dependents\":[],\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10.876000000000293,\"minDifficulty\":3,\"moneyAvailable\":487832,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"89.6.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,16,16],\"crush-fitness\":[431576,8,16,16],\"neo-net\":[0,0,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[0,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1503.6,\"onlineMoneyMade\":431584,\"onlineRunningTime\":4565.609999998048,\"pid\":352,\"ramUsage\":2,\"server\":\"joesguns\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0ef75ea6-0370-4d62-a13b-9c1eb7f42149\",\"moduleSequenceNumber\":629}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///4ae2c137-eb47-41b4-b413-d59fd6749132\",\"moduleSequenceNumber\":1832}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0ef75ea6-0370-4d62-a13b-9c1eb7f42149\",\"moduleSequenceNumber\":629}],\"dependents\":[],\"ramUsage\":2,\"server\":\"joesguns\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.024,\"minDifficulty\":5,\"moneyAvailable\":1131.582725794523,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-906879-FoodNStuff.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[188,144,6,32,4,163,75,38,30,189,125,120,152,97,36,109,5,86,6,179,138,129,192,67,149,174,159,71,59,167,99,146,63,65,107,67,142,49,120,15,166,84,169,188,160],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"45.8.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[30158672,32,32,32],\"crush-fitness\":[869456,16,32,32],\"neo-net\":[0,0,16,16],\"joesguns\":[0,16,16,16],\"hong-fang-tea\":[0,0,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.6,\"onlineMoneyMade\":31028128,\"onlineRunningTime\":4565.609999998048,\"pid\":358,\"ramUsage\":2,\"server\":\"zer0\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///4e15dc42-fab0-4986-853d-1ef98bbfc380\",\"moduleSequenceNumber\":635}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///6463e51f-7273-492e-af6c-e1ff3688a8e9\",\"moduleSequenceNumber\":1838}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///4e15dc42-fab0-4986-853d-1ef98bbfc380\",\"moduleSequenceNumber\":635}],\"dependents\":[],\"ramUsage\":2,\"server\":\"zer0\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"28.9.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[6626072,8,16,16],\"crush-fitness\":[432472,8,16,16],\"neo-net\":[16,8,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[0,0,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1633.2,\"onlineMoneyMade\":7058568,\"onlineRunningTime\":4565.609999998048,\"pid\":356,\"ramUsage\":2,\"server\":\"nectar-net\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3a4d199a-b05d-460d-bb55-dbfa2e0fbbef\",\"moduleSequenceNumber\":633}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///e6b5fa60-03c0-41c2-88da-b62686118ba9\",\"moduleSequenceNumber\":1836}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///3a4d199a-b05d-460d-bb55-dbfa2e0fbbef\",\"moduleSequenceNumber\":633}],\"dependents\":[],\"ramUsage\":2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"85.3.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[16056400,16,32,32],\"crush-fitness\":[6097024,32,32,32],\"neo-net\":[128,16,16,16],\"joesguns\":[16,16,16,16],\"hong-fang-tea\":[0,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3506.4,\"onlineMoneyMade\":22153568,\"onlineRunningTime\":4565.609999998048,\"pid\":361,\"ramUsage\":2,\"server\":\"neo-net\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7df22ffa-776d-441c-a1b3-2c378b171c91\",\"moduleSequenceNumber\":638}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///43ccd246-07f2-45b9-9a28-466a17cab914\",\"moduleSequenceNumber\":1840}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///7df22ffa-776d-441c-a1b3-2c378b171c91\",\"moduleSequenceNumber\":638}],\"dependents\":[],\"ramUsage\":2,\"server\":\"neo-net\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":10.684000000000001,\"minDifficulty\":8,\"moneyAvailable\":0,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"76.5.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[42021024,32,64,64],\"crush-fitness\":[0,0,64,64],\"neo-net\":[256,32,32,32],\"joesguns\":[32,32,32,32],\"hong-fang-tea\":[0,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6292.799999999999,\"onlineMoneyMade\":42021312,\"onlineRunningTime\":4565.609999998048,\"pid\":362,\"ramUsage\":2,\"server\":\"silver-helix\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///501e0372-8f44-48af-9a1c-c387ac924587\",\"moduleSequenceNumber\":639}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///501e0372-8f44-48af-9a1c-c387ac924587\",\"moduleSequenceNumber\":639}],\"dependents\":[],\"ramUsage\":2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.5,\"minDifficulty\":10,\"moneyAvailable\":505.74210645790043,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"0.5.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[6469672,8,16,16],\"crush-fitness\":[0,0,16,16],\"neo-net\":[16,8,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[0,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1543.2,\"onlineMoneyMade\":6469696,\"onlineRunningTime\":4565.609999998048,\"pid\":353,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///a6aa3078-95a3-4c4b-9d28-0b24f134d3af\",\"moduleSequenceNumber\":630}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///c7cd8a4f-81ab-42c4-8377-29d57f5e9091\",\"moduleSequenceNumber\":1833}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///a6aa3078-95a3-4c4b-9d28-0b24f134d3af\",\"moduleSequenceNumber\":630}],\"dependents\":[],\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.606,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-720334.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,24],[8,15],[19,26],[16,21],[1,2],[24,33],[2,3],[20,29],[21,26],[10,12],[18,26],[25,32]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"15.3.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[6508352,8,16,16],\"crush-fitness\":[0,0,16,16],\"neo-net\":[16,8,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[8,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1588.2,\"onlineMoneyMade\":6508384,\"onlineRunningTime\":4565.609999998048,\"pid\":354,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///218581c2-fa77-4fc5-981f-9b00aee02fed\",\"moduleSequenceNumber\":631}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///9ef0e8e6-d483-4a4b-8c9c-89b406a87280\",\"moduleSequenceNumber\":1834}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///218581c2-fa77-4fc5-981f-9b00aee02fed\",\"moduleSequenceNumber\":631}],\"dependents\":[],\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"57.0.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[22317072,16,32,32],\"crush-fitness\":[5266768,16,32,32],\"neo-net\":[144,16,16,16],\"joesguns\":[0,16,16,16],\"hong-fang-tea\":[0,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3236.3999999999996,\"onlineMoneyMade\":27583984,\"onlineRunningTime\":4565.609999998048,\"pid\":360,\"ramUsage\":2,\"server\":\"phantasy\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///cee5cecd-e901-43ac-9ba4-a5540c0b3555\",\"moduleSequenceNumber\":637}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///cee5cecd-e901-43ac-9ba4-a5540c0b3555\",\"moduleSequenceNumber\":637}],\"dependents\":[],\"ramUsage\":2,\"server\":\"phantasy\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.048,\"minDifficulty\":7,\"moneyAvailable\":152180023.32505175,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"84.6.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[22635712,16,32,32],\"crush-fitness\":[0,0,32,32],\"neo-net\":[160,16,16,16],\"joesguns\":[0,16,16,16],\"hong-fang-tea\":[0,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3056.3999999999996,\"onlineMoneyMade\":22635872,\"onlineRunningTime\":4565.609999998048,\"pid\":359,\"ramUsage\":2,\"server\":\"max-hardware\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0d93a052-f9ab-4266-9cc2-eec2965eb456\",\"moduleSequenceNumber\":636}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///7d0300ee-22ac-41d8-b4c3-0cea85ddc23c\",\"moduleSequenceNumber\":1839}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0d93a052-f9ab-4266-9cc2-eec2965eb456\",\"moduleSequenceNumber\":636}],\"dependents\":[],\"ramUsage\":2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":11.488,\"minDifficulty\":5,\"moneyAvailable\":42748538.15611592,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"15.1.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[15867104,16,32,32],\"crush-fitness\":[6185232,32,32,32],\"neo-net\":[144,16,16,16],\"joesguns\":[0,16,16,16],\"hong-fang-tea\":[0,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3416.4,\"onlineMoneyMade\":22052480,\"onlineRunningTime\":4565.609999998048,\"pid\":363,\"ramUsage\":2,\"server\":\"omega-net\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///4b46f65b-54a0-4e53-9459-af7279677565\",\"moduleSequenceNumber\":640}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///4b46f65b-54a0-4e53-9459-af7279677565\",\"moduleSequenceNumber\":640}],\"dependents\":[],\"ramUsage\":2,\"server\":\"omega-net\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":11.803999999999998,\"minDifficulty\":9,\"moneyAvailable\":1225995947.8889024,\"moneyMax\":1695979350,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":198,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"64.4.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":21.303999999999995,\"minDifficulty\":13,\"moneyAvailable\":1029328115.5729699,\"moneyMax\":1468631400,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":235,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"51.6.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[13173328,16,32,32],\"crush-fitness\":[0,0,32,32],\"neo-net\":[32,16,16,16],\"joesguns\":[16,16,16,16],\"hong-fang-tea\":[16,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3176.4,\"onlineMoneyMade\":13173392,\"onlineRunningTime\":4565.609999998048,\"pid\":355,\"ramUsage\":2,\"server\":\"iron-gym\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///dee07951-0239-471e-8b36-6b1aa19a5fa5\",\"moduleSequenceNumber\":632}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///ffce2aba-05ea-4286-92dd-796090850721\",\"moduleSequenceNumber\":1835}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///dee07951-0239-471e-8b36-6b1aa19a5fa5\",\"moduleSequenceNumber\":632}],\"dependents\":[],\"ramUsage\":2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"34.1.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[9579320,8,16,16],\"crush-fitness\":[2510360,8,16,16],\"neo-net\":[0,0,8,8],\"joesguns\":[8,8,8,8],\"hong-fang-tea\":[8,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1645.1999999999998,\"onlineMoneyMade\":12089696,\"onlineRunningTime\":4565.609999998048,\"pid\":376,\"ramUsage\":2,\"server\":\"millenium-fitness\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b6bb1830-19f7-4594-8637-1c8745ac57a5\",\"moduleSequenceNumber\":653}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b6bb1830-19f7-4594-8637-1c8745ac57a5\",\"moduleSequenceNumber\":653}],\"dependents\":[],\"ramUsage\":2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":493,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"88.2.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[46583392,32,64,64],\"crush-fitness\":[0,0,64,64],\"neo-net\":[320,32,32,32],\"joesguns\":[0,32,32,32],\"hong-fang-tea\":[0,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6112.799999999999,\"onlineMoneyMade\":46583712,\"onlineRunningTime\":4565.609999998048,\"pid\":391,\"ramUsage\":2,\"server\":\"powerhouse-fitness\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///6e420ce3-36c7-4c02-8f49-4f7d09d4f6ca\",\"moduleSequenceNumber\":668}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///6e420ce3-36c7-4c02-8f49-4f7d09d4f6ca\",\"moduleSequenceNumber\":668}],\"dependents\":[],\"ramUsage\":2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":989,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145617-FoodNStuff.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,5],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"25.4.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":771,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"41.7.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[13613712,16,32,32],\"crush-fitness\":[880384,16,32,32],\"neo-net\":[48,16,16,16],\"joesguns\":[16,16,16,16],\"hong-fang-tea\":[16,16,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3356.4,\"onlineMoneyMade\":14494176,\"onlineRunningTime\":4565.609999998048,\"pid\":384,\"ramUsage\":2,\"server\":\"run4theh111z\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///8a7ca087-1883-4557-8c54-9751b156ba0c\",\"moduleSequenceNumber\":661}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///8a7ca087-1883-4557-8c54-9751b156ba0c\",\"moduleSequenceNumber\":661}],\"dependents\":[],\"ramUsage\":2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":521,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"69.2.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[74892832,64,64,64],\"crush-fitness\":[10366944,32,64,64],\"neo-net\":[0,0,32,32],\"joesguns\":[32,32,32,32],\"hong-fang-tea\":[0,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6667.2,\"onlineMoneyMade\":85259808,\"onlineRunningTime\":4565.609999998048,\"pid\":367,\"ramUsage\":2,\"server\":\"I.I.I.I\",\"threads\":32,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b96ea53a-6eb6-4d3f-96c6-b08e0ea80655\",\"moduleSequenceNumber\":644}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b96ea53a-6eb6-4d3f-96c6-b08e0ea80655\",\"moduleSequenceNumber\":644}],\"dependents\":[],\"ramUsage\":2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":358,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"81.1.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[18885800,16,16,16],\"crush-fitness\":[2612472,8,16,16],\"neo-net\":[64,8,8,8],\"joesguns\":[0,0,8,8],\"hong-fang-tea\":[0,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1684.8,\"onlineMoneyMade\":21498336,\"onlineRunningTime\":4565.609999998048,\"pid\":366,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b37618eb-20c4-4907-97d6-b30fe0c932a2\",\"moduleSequenceNumber\":643}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b37618eb-20c4-4907-97d6-b30fe0c932a2\",\"moduleSequenceNumber\":643}],\"dependents\":[],\"ramUsage\":2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":218,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"85.6.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[0,0,16,16],\"crush-fitness\":[0,0,16,16],\"neo-net\":[88,8,8,8],\"joesguns\":[0,8,8,8],\"hong-fang-tea\":[0,8,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1461.6,\"onlineMoneyMade\":88,\"onlineRunningTime\":4565.609999998048,\"pid\":388,\"ramUsage\":2,\"server\":\".\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///c7c1c61c-962f-4870-a462-92833c46b202\",\"moduleSequenceNumber\":665}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///c7c1c61c-962f-4870-a462-92833c46b202\",\"moduleSequenceNumber\":665}],\"dependents\":[],\"ramUsage\":2,\"server\":\".\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":541,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-86713-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-4,-1,10,-7,1,-10,0,-3,-9,-8,8,9,-2,-2,-2,10,-3,-4,5,-10,-9,0,7,-1,-7,-2,7,-8,5],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"3.7.3.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"crush-fitness\",\"neo-net\",\"joesguns\",\"hong-fang-tea\"],\"dataMap\":{\"omega-net\":[3322916,4,8,8],\"crush-fitness\":[216460,4,8,8],\"neo-net\":[8,4,4,4],\"joesguns\":[4,4,4,4],\"hong-fang-tea\":[4,4,4,4]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":839.1,\"onlineMoneyMade\":3539392,\"onlineRunningTime\":4565.609999998048,\"pid\":357,\"ramUsage\":2,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///2544d3ed-a3c2-4603-b6a2-430a8b8816d6\",\"moduleSequenceNumber\":634}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"virus.js\",\"url\":\"blob:file:///30673321-977d-475f-9dca-f8c472ca4060\",\"moduleSequenceNumber\":1837}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///2544d3ed-a3c2-4603-b6a2-430a8b8816d6\",\"moduleSequenceNumber\":634}],\"dependents\":[],\"ramUsage\":2,\"server\":\"CSEC\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"3.9.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"3.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"62.6.5.6\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"darkweb\",\"moduleSequenceNumber\":176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":43.053333333333576,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":3770.3951999999445}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":3742.426562611024}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":13248.96375384334}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":31445.344102585892}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":29773.14998417431,\"lastPrice\":29748.1539505761,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":20.252328262454245,\"otlkMagForecast\":68.60690823595093,\"cap\":271864361,\"spreadPerc\":0.5,\"shareTxForMovement\":66074,\"shareTxUntilMovement\":66074,\"totalShares\":140900000,\"maxShares\":28200000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":72274.3396783051,\"lastPrice\":72341.9695580896,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":true,\"otlkMag\":18.624339106123852,\"otlkMagForecast\":69.76073698242195,\"cap\":170989507,\"spreadPerc\":0.1,\"shareTxForMovement\":87013,\"shareTxUntilMovement\":87013,\"totalShares\":72400000,\"maxShares\":14500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":12282.952618967076,\"lastPrice\":12264.449984433611,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":13.073816722107901,\"otlkMagForecast\":36.090785564929135,\"cap\":204175165,\"spreadPerc\":0.5,\"shareTxForMovement\":84495,\"shareTxUntilMovement\":84495,\"totalShares\":88500000,\"maxShares\":17700000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":11792.58931830869,\"lastPrice\":11807.902889784575,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":12.849974930628138,\"otlkMagForecast\":37.54230418202147,\"cap\":222895905,\"spreadPerc\":0.5,\"shareTxForMovement\":63216,\"shareTxUntilMovement\":63216,\"totalShares\":118700000,\"maxShares\":23700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":27631.319919203084,\"lastPrice\":27668.25661767608,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":12.302374266768759,\"otlkMagForecast\":37.2744421863536,\"cap\":997383617,\"spreadPerc\":0.3,\"shareTxForMovement\":63942,\"shareTxUntilMovement\":63942,\"totalShares\":43700000,\"maxShares\":8700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":183719.88470340252,\"lastPrice\":183341.75261179588,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":18.451753377578168,\"otlkMagForecast\":65.91395787511878,\"cap\":161903635,\"spreadPerc\":0.2,\"shareTxForMovement\":84599,\"shareTxUntilMovement\":84599,\"totalShares\":32000000,\"maxShares\":6400000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":37532.768775339246,\"lastPrice\":37471.94357499657,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":11.55665743397002,\"otlkMagForecast\":60.47038623715197,\"cap\":373741193,\"spreadPerc\":0.2,\"shareTxForMovement\":68771,\"shareTxUntilMovement\":68771,\"totalShares\":82200000,\"maxShares\":16400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":20070.501806296234,\"lastPrice\":20120.328260906706,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":15.497233826430437,\"otlkMagForecast\":34.1347356409091,\"cap\":500289576,\"spreadPerc\":0.5,\"shareTxForMovement\":52845,\"shareTxUntilMovement\":52845,\"totalShares\":57100000,\"maxShares\":11400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":16353.729603052385,\"lastPrice\":16327.226925208131,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":6.8718473214660944,\"otlkMagForecast\":56.74525043167914,\"cap\":287529054,\"spreadPerc\":0.2,\"shareTxForMovement\":77727,\"shareTxUntilMovement\":77727,\"totalShares\":53100000,\"maxShares\":10600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8335.595909785496,\"lastPrice\":8346.579495575244,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":10.978355183419884,\"otlkMagForecast\":38.87183441601495,\"cap\":127646474,\"spreadPerc\":0.4,\"shareTxForMovement\":84628,\"shareTxUntilMovement\":84628,\"totalShares\":112500000,\"maxShares\":22500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8107.400997605587,\"lastPrice\":8098.431104071281,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":9.850274587667151,\"otlkMagForecast\":58.98130185918283,\"cap\":248736831,\"spreadPerc\":0.7,\"shareTxForMovement\":105085,\"shareTxUntilMovement\":105085,\"totalShares\":73600000,\"maxShares\":14700000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":17259.500574624726,\"lastPrice\":17284.87974099904,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":6.254661037003282,\"otlkMagForecast\":41.50954635013035,\"cap\":96726817,\"spreadPerc\":1,\"shareTxForMovement\":58284,\"shareTxUntilMovement\":58284,\"totalShares\":85000000,\"maxShares\":17000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":25201.397435772837,\"lastPrice\":25170.15408291463,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.36960120260029,\"otlkMagForecast\":57.4609209062409,\"cap\":159158966,\"spreadPerc\":0.3,\"shareTxForMovement\":75659,\"shareTxUntilMovement\":75659,\"totalShares\":37800000,\"maxShares\":7600000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":23274.91127031702,\"lastPrice\":23297.134974176348,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":9.807914464145233,\"otlkMagForecast\":38.907040675611405,\"cap\":45163758,\"spreadPerc\":0.5,\"shareTxForMovement\":81035,\"shareTxUntilMovement\":81035,\"totalShares\":31700000,\"maxShares\":6300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":12651.727844129433,\"lastPrice\":12665.499402895111,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":5.7764128919110505,\"otlkMagForecast\":44.105164251363995,\"cap\":43442126,\"spreadPerc\":1,\"shareTxForMovement\":45054,\"shareTxUntilMovement\":45054,\"totalShares\":71200000,\"maxShares\":14200000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8799.769015111977,\"lastPrice\":8811.028135896171,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":5.462669863824812,\"otlkMagForecast\":55.78748367954788,\"cap\":78667091,\"spreadPerc\":0.6,\"shareTxForMovement\":95564,\"shareTxUntilMovement\":95564,\"totalShares\":46900000,\"maxShares\":9400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":22050.24318105946,\"lastPrice\":22020.386489002827,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":8.309602518330243,\"otlkMagForecast\":59.51379646007774,\"cap\":508735169,\"spreadPerc\":0.6,\"shareTxForMovement\":55165,\"shareTxUntilMovement\":55165,\"totalShares\":33100000,\"maxShares\":6600000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":21878.710044879685,\"lastPrice\":21852.836382519487,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":10.47961059911619,\"otlkMagForecast\":60.61476853403436,\"cap\":568759777,\"spreadPerc\":0.6,\"shareTxForMovement\":46482,\"shareTxUntilMovement\":46482,\"totalShares\":26600000,\"maxShares\":5300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":15182.815610974523,\"lastPrice\":15204.8511821883,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":5.2316127212693155,\"otlkMagForecast\":44.68223024097084,\"cap\":404728420,\"spreadPerc\":0.7,\"shareTxForMovement\":50852,\"shareTxUntilMovement\":50852,\"totalShares\":30700000,\"maxShares\":6100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3152.462965688415,\"lastPrice\":3137.30518249258,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":true,\"otlkMag\":2.291410255239657,\"otlkMagForecast\":58.09536585190894,\"cap\":59041614,\"spreadPerc\":0.7,\"shareTxForMovement\":46500,\"shareTxUntilMovement\":46500,\"totalShares\":102900000,\"maxShares\":20600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":10428.754877679605,\"lastPrice\":10402.928863569981,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":7.023440508952679,\"otlkMagForecast\":57.73589457659453,\"cap\":115920208,\"spreadPerc\":1.1,\"shareTxForMovement\":64671,\"shareTxUntilMovement\":64671,\"totalShares\":40300000,\"maxShares\":8100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3481.191669025072,\"lastPrice\":3485.3798639662946,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":2.3455843722996086,\"otlkMagForecast\":47.37630317481839,\"cap\":106781160,\"spreadPerc\":0.5,\"shareTxForMovement\":100303,\"shareTxUntilMovement\":100303,\"totalShares\":39800000,\"maxShares\":8000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5160.8792238585365,\"lastPrice\":5142.612731153512,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.86,\"b\":true,\"otlkMag\":7.493543624073174,\"otlkMagForecast\":58.63792857747604,\"cap\":114489545,\"spreadPerc\":0.6,\"shareTxForMovement\":51493,\"shareTxUntilMovement\":51493,\"totalShares\":37200000,\"maxShares\":7400000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":7965.735640785667,\"lastPrice\":7940.865965404691,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":false,\"otlkMag\":5.251412125040454,\"otlkMagForecast\":45.08114596350593,\"cap\":148886227,\"spreadPerc\":0.7,\"shareTxForMovement\":55324,\"shareTxUntilMovement\":55324,\"totalShares\":26100000,\"maxShares\":5200000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2279.3281974228694,\"lastPrice\":2283.463324603889,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.95,\"b\":false,\"otlkMag\":5.092996087456008,\"otlkMagForecast\":45.612044914840496,\"cap\":42421050,\"spreadPerc\":0.5,\"shareTxForMovement\":81728,\"shareTxUntilMovement\":81728,\"totalShares\":58200000,\"maxShares\":11600000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1721.6760472919023,\"lastPrice\":1733.9067885910704,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.72,\"b\":false,\"otlkMag\":5.306334718751425,\"otlkMagForecast\":47.40476827196009,\"cap\":27509174,\"spreadPerc\":0.5,\"shareTxForMovement\":32194,\"shareTxUntilMovement\":32194,\"totalShares\":39500000,\"maxShares\":7900000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3323.8700746272502,\"lastPrice\":3317.3449882357804,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":false,\"otlkMag\":5.137808204599644,\"otlkMagForecast\":50.57855706403935,\"cap\":13762620,\"spreadPerc\":0.7,\"shareTxForMovement\":84662,\"shareTxUntilMovement\":84662,\"totalShares\":17500000,\"maxShares\":3500000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2975.431031194158,\"lastPrice\":2971.062244120861,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":5.035543637769916,\"otlkMagForecast\":48.511641367073175,\"cap\":59434641,\"spreadPerc\":0.7,\"shareTxForMovement\":151466,\"shareTxUntilMovement\":151466,\"totalShares\":13400000,\"maxShares\":2700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2937.7817087848407,\"lastPrice\":2946.028694838918,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.47,\"b\":true,\"otlkMag\":2.078409138969617,\"otlkMagForecast\":52.0831113027257,\"cap\":54606749,\"spreadPerc\":1.1,\"shareTxForMovement\":64029,\"shareTxUntilMovement\":64029,\"totalShares\":11100000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1095.865139138338,\"lastPrice\":1091.5709852253287,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.06,\"b\":true,\"otlkMag\":2.0376665395150497,\"otlkMagForecast\":48.667220715656896,\"cap\":15780466,\"spreadPerc\":1.3,\"shareTxForMovement\":30392,\"shareTxUntilMovement\":30392,\"totalShares\":49700000,\"maxShares\":9900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1324.2229476575658,\"lastPrice\":1321.1197766563203,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":true,\"otlkMag\":14.767326145878735,\"otlkMagForecast\":65.0893380201392,\"cap\":1432496,\"spreadPerc\":1.3,\"shareTxForMovement\":29915,\"shareTxUntilMovement\":29915,\"totalShares\":118200000,\"maxShares\":23600000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":8163.79526595261,\"lastPrice\":8152.430294290409,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":9.970268125550339,\"otlkMagForecast\":57.4431046765942,\"cap\":390653370,\"spreadPerc\":0.9,\"shareTxForMovement\":187740,\"shareTxUntilMovement\":187740,\"totalShares\":22700000,\"maxShares\":4500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":22567.101477703738,\"lastPrice\":22545.144043329743,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":12.426653967694278,\"otlkMagForecast\":62.06967809398938,\"cap\":102624052,\"spreadPerc\":0.2,\"shareTxForMovement\":114579,\"shareTxUntilMovement\":114579,\"totalShares\":20000000,\"maxShares\":4000000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":24,\"lastUpdate\":1644429223515,\"ticksUntilCycle\":44}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644422540402","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644429228440"}}