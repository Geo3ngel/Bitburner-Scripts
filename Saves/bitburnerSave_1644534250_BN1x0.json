{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":379,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":2,\"intelligence\":0,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.0823281200000001,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":11932607.171646921,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":12.32,\"intelligence_exp\":0,\"hacking_mult\":1.1796750000000003,\"strength_mult\":1.2,\"defense_mult\":1.2,\"dexterity_mult\":1.3860000000000001,\"agility_mult\":1.05,\"charisma_mult\":1.2,\"hacking_exp_mult\":1.1550000000000002,\"strength_exp_mult\":1.1,\"defense_exp_mult\":1.1,\"dexterity_exp_mult\":1.1,\"agility_exp_mult\":1.1,\"charisma_exp_mult\":1.1,\"company_rep_mult\":1.38,\"faction_rep_mult\":1.15,\"money\":2948002777.1089535,\"city\":\"Volhaven\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"alpha-0\",\"alpha-1\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35769.600000040395,\"ram\":64,\"totalMoneyGenerated\":525464041.588337,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35769.4000000404,\"ram\":64,\"totalMoneyGenerated\":524003943.102638,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35769.4000000404,\"ram\":64,\"totalMoneyGenerated\":520624803.049199,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35769.0000000404,\"ram\":64,\"totalMoneyGenerated\":518660761.81601167,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35768.200000040415,\"ram\":64,\"totalMoneyGenerated\":516369124.3146261,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35766.800000040435,\"ram\":64,\"totalMoneyGenerated\":512912624.6970846,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35764.60000004047,\"ram\":64,\"totalMoneyGenerated\":511168956.253036,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35761.60000004051,\"ram\":64,\"totalMoneyGenerated\":508903123.6073778,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35757.200000040575,\"ram\":64,\"totalMoneyGenerated\":506792345.5350512,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35751.40000004066,\"ram\":64,\"totalMoneyGenerated\":504879566.51694113,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":35359.60000004636,\"ram\":64,\"totalMoneyGenerated\":502886395.3039287,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":34540.00000005829,\"ram\":64,\"totalMoneyGenerated\":489305426.86625844,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":33606.60000007187,\"ram\":64,\"totalMoneyGenerated\":487549336.5917027,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":32652.200000083638,\"ram\":64,\"totalMoneyGenerated\":484967154.0677882,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":31521.800000079525,\"ram\":64,\"totalMoneyGenerated\":483230042.30432683,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":31516.400000079506,\"ram\":64,\"totalMoneyGenerated\":481956232.3980871,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":31096.60000007798,\"ram\":64,\"totalMoneyGenerated\":480556355.9837321,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":30471.4000000757,\"ram\":64,\"totalMoneyGenerated\":479117748.4260942,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":28044.200000066874,\"ram\":64,\"totalMoneyGenerated\":476912670.7745658,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":26923.000000062795,\"ram\":64,\"totalMoneyGenerated\":465810896.97271454,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":25116.600000056224,\"ram\":64,\"totalMoneyGenerated\":445906552.3582,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":21823.800000044244,\"ram\":64,\"totalMoneyGenerated\":400123223.32309115,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":18693.200000032863,\"ram\":64,\"totalMoneyGenerated\":350317684.8578819,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":9301.599999998782,\"ram\":64,\"totalMoneyGenerated\":186909145.40991926,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":20927.958630828227,\"onlineTimeSeconds\":2428.799999999983,\"ram\":64,\"totalMoneyGenerated\":50637123.54856013,\"name\":\"hacknet-node-24\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Tian Di Hui\",\"Ishima\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-31.1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"The Black Hand\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.17325000000000004,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.5055784005641026,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":2148.3000000003576,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":6212.688788007069,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":2480000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644534249506,\"totalPlaytime\":170724800,\"playtimeSinceLastAug\":35789200,\"playtimeSinceLastBitnode\":170724800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1593984,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":2145286070.6407773,\"hacknet\":11415965279.31799,\"hacknet_expenses\":-9343414589.18396,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2947002777.1090674,\"work\":0,\"servers\":-957440000,\"other\":-311800000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-20238592,\"codingcontract\":600000000,\"corporation\":0,\"crime\":615000,\"gang\":0,\"hacking\":20969563904.908672,\"hacknet\":38136044856.945465,\"hacknet_expenses\":-22045485514.031956,\"hospitalization\":-23090000,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":3715160488.3412523,\"work\":193300,\"servers\":-13386554276.312332,\"other\":-938999546.3940067,\"augmentations\":-19376888644.233047}},\"scriptProdSinceLastAug\":2145286070.6407773,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1644364076521},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1644364796512},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644365636510},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1644369056521},{\"ID\":\"TOR\",\"unlockedOn\":1644370256520},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1644372116520},{\"ID\":\"TRAVEL\",\"unlockedOn\":1644372296511},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1644374516517},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1644377936516},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1644411651922},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644411651933},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644411651935},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644413931922},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644414351923},{\"ID\":\"NITESEC\",\"unlockedOn\":1644416091923},{\"ID\":\"FROZE\",\"unlockedOn\":1644416137121},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1644429277114},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1644490597118},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644493537117}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.8.0.6\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetServer = ns.args[0];\\n\\twhile (true){\\n\\t\\tns.print(`Hacking ${targetServer}`);\\n\\t\\tawait ns.hack(targetServer);\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"blob:file:///3066b819-a1a0-4fc9-b19b-3425b4eb3cda\",\"moduleSequenceNumber\":2223}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":112999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet topTargets = []\\nlet exploits = 0;\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\nlet virus = \\\"/SimpleScripts/virus.js\\\"\\n\\nexport async function main(ns) {\\n\\tawait countExploits(ns);\\n\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n\\tns.print(`Vulnerable Servers: ${vulnerableServers}`);\\n\\n\\t// SCPs virus to vulnerable servers\\n\\tawait infectVulnerableServers(ns);\\n\\tns.print(`Servers infected.`)\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits){\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\t\\t\\tcase 4:\\n\\t\\t\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\t\\t\\tcase 2:\\n\\t\\t\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\t\\t\\tcase 1:\\n\\t\\t\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}catch{\\n\\t\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif(ns.hasRootAccess(server)){\\n\\t\\tvulnerableServers.push(server)\\n\\t\\tlet subServers = ns.scan(server)\\n\\t\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(virus, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\n\\t\\t// TODO: Run virus on vulnerable server(s) against selected target server(s)\\n\\t\\n\\t// TODO: Determine highest value targetable server (Profile hacking targets)\\n\\t// TODO: Target most valuable servers (make a list)\\n\\t\\t// Then send out `hack` command to all vulnerable servers targeting X server\\n\\t// ns.print(`Hacking ${targetServer}`);\\n\\t// await ns.hack(targetServer);\\n\\t// await ns.grow(targetServer);\\n\\t// await ns.weaken(targetServer);\\n\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\n\\n// TODO: Determine highest value targetable server (Profile hacking targets)\\nexport async function profileTargets(ns) {\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\t// For now, we're just going with the highest dollar amount :P\\n\\t\\tif (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(server)){\\n\\t\\t\\tif(topTargets.length < 5 && !topTargets.includes(server)){\\n\\t\\t\\t\\ttopTargets.push(server);\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tfor (let i = 0; i < topTargets.length; i++) {\\n\\t\\t\\t\\t\\tif(ns.getServerMaxMoney(topTargets[i]) < ns.getServerMaxMoney(server) && !topTargets.includes(server)){\\n\\t\\t\\t\\t\\t\\ttopTargets[i] = server;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// let server = vulnerableServers[index];\\n\\t// \\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\t// \\tlet hackSuccessChance = ns.hackSuccessChance(server);\\n\\t// \\t// let threadScale = threadsUsed\\n\\t// \\tlet weakenTime = security/weakenProgress\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(virus);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif(maxThreadCount <= 0){\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t}else{\\n\\t\\t\\tswitch(topTargets.length){\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet home = \\\"home\\\";\\n\\tlet homeThreadCount =  Math.floor((ns.getServerMaxRam(home) - ns.getServerUsedRam(home)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch(topTargets.length){\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\",\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"blob:file:///80d4b556-ae71-4ff9-928c-ca47fd4650d5\",\"moduleSequenceNumber\":113014}],\"dependents\":[],\"ramUsage\":5.2,\"server\":\"home\",\"moduleSequenceNumber\":113014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet exploits = 0;\\n\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\n\\nexport async function main(ns) {\\n\\tawait countExploits();\\n\\t\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits)\\n\\t\\ttry{\\n\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\tcase 5:\\n\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\tcase 4:\\n\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t}\\n\\t\\t}catch{\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t}\\n\\n\\t\\tif(ns.hasRootAccess(server)){\\n\\t\\t\\tlet subServers = scan(server)\\n\\t\\t\\tfor (let index = 0; index < subServers.length; ++index) {\\n\\t\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"blob:file:///d31df9bb-5e5a-4fcd-9aed-bd62053860fa\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":113001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///a3c4a664-0d0f-42d5-a9ad-8b4fd6d7f627\",\"moduleSequenceNumber\":115341}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":115341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":113003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { \\n\\tPAUSE, UNPAUSE,KILL, \\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT, \\n\\tHOME\\n\\t} from \\\"lib/customConstants.js\\\";\\nconst LVL = 0;\\nconst RAM = 1;\\nconst CORE = 2;\\nconst DEATH_MSG = \\\"AUTO_NET\\\"\\n\\nexport async function main(ns) {\\n\\tlet paused = false;\\n\\twhile (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n\\t\\tswitch (ns.readPort(AUTO_NODE_INBOUND_PORT)) {\\n\\t\\t\\tcase PAUSE:\\n\\t\\t\\t\\tpaused = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase UNPAUSE:\\n\\t\\t\\t\\tpaused = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase KILL:\\n\\t\\t\\t\\tns.tryWritePort(CONTROL_INBOUND_PORT, DEATH_MSG)\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (!paused) {\\n\\t\\t\\tlet newNodeRatio = await calcNewNodeValueRatio(ns);\\n\\n\\t\\t\\t// Find highest ratio from all current nodes!\\n\\t\\t\\tlet bestNodeToUpgrade = -1;\\n\\t\\t\\tlet bestProperty = -1; // 0-2 are level, ram, and core\\n\\t\\t\\tlet bestRatio = 0;\\n\\t\\t\\tlet lvlRatio;\\n\\t\\t\\tlet ramRatio;\\n\\t\\t\\tlet coreRatio;\\n\\t\\t\\t// Finds the best upgrade value amongst existing nodes\\n\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\tlvlRatio = await calcLevelUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\tramRatio = await calcRamUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\tcoreRatio = await calcCoreUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\t// ns.print(`Node${i}: lvl:${lvlRatio}, ram:${ramRatio}, core:${coreRatio}`);\\n\\t\\t\\t\\tif (lvlRatio > ramRatio && lvlRatio > coreRatio) {\\n\\t\\t\\t\\t\\t// Lvl ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (lvlRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = lvlRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = LVL;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else if (ramRatio > coreRatio) {\\n\\t\\t\\t\\t\\t// Ram ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (ramRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = ramRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = RAM;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Core ratio is the highest for this node\\n\\t\\t\\t\\t\\tif (coreRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\tbestRatio = coreRatio;\\n\\t\\t\\t\\t\\t\\tbestProperty = CORE;\\n\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Buys a new node or the best valued upgrade\\n\\t\\t\\tlet bal = ns.getServerMoneyAvailable(HOME);\\n\\t\\t\\t// ns.print(`NewNodw:${newNodeRatio} > BestRatio:${bestRatio}`)\\n\\t\\t\\tif (newNodeRatio > bestRatio) {\\n\\t\\t\\t\\t// Buy a new node!\\n\\t\\t\\t\\tns.print(\\\"Trying to buy a new Node...\\\")\\n\\t\\t\\t\\tif (ns.hacknet.getPurchaseNodeCost() < bal) {\\n\\t\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\t\\tns.print(\\\"Bought a new Node!\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tswitch (bestProperty) {\\n\\t\\t\\t\\t\\tcase LVL:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getLevelUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading LVL of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase RAM:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getRamUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeRam(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading RAM of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase CORE:\\n\\t\\t\\t\\t\\t\\tif (ns.hacknet.getCoreUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeCore(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading CORES of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tns.print(\\\"No best property chosen?\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(\\\"50\\\");\\n\\t}\\n}\\n\\nexport async function findWeakestNode(ns) {\\n\\t// Returns the node that produces the least, i.e. needs to be upgraded\\n\\tlet weakest = 0;\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tif (ns.hacknet.getNodeStats(i).production < ns.hacknet.getNodeStats(weakest).production) {\\n\\t\\t\\tweakest = i;\\n\\t\\t}\\n\\t}\\n\\treturn weakest;\\n}\\n\\n// export async function calcAvgNodeProduction(ns) {\\n// \\t// Returns average production of current nodes\\n// }\\n\\n///\\n/// These functions translate the cost of the next upgrade to a ratio for comparison to see what is worth saving for\\n///\\nexport async function calcLevelUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getLevelUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await levelUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`lvl: ${lvl} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio\\n}\\n\\nexport async function calcRamUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getRamUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await ramUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\treturn ratio;\\n}\\n\\nexport async function calcCoreUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getCoreUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await coreUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`core: ${core} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio;\\n}\\n\\nexport async function calcNewNodeValueRatio(ns) {\\n\\tlet totalHacknetNodeProduction = 0;\\n\\tlet numberOfNodes = await ns.hacknet.numNodes();\\n\\tfor (let i = 0; i < numberOfNodes; i++) {\\n\\t\\ttotalHacknetNodeProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\tlet valueRatio = (totalHacknetNodeProduction / numberOfNodes) / ns.hacknet.getPurchaseNodeCost();\\n\\t// ns.print(`valueRatio:${valueRatio}, totalProduction:${totalHacknetNodeProduction}, Node#${numberOfNodes}`)\\n\\tif (isNaN(valueRatio)) {\\n\\t\\tvalueRatio = 1;\\n\\t}\\n\\treturn valueRatio;\\n}\\n\\n///\\n/// Functions for gaining profit of lvl ups\\n///\\n\\nexport async function levelUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (1 * 1.5) * Math.pow(1.035, currentRam - 1) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function ramUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * (Math.pow(1.035, (2 * currentRam) - 1) - Math.pow(1.035, currentRam - 1)) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function coreUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * Math.pow(1.035, currentRam - 1) * (1 / 6);\\n}\",\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///928dcf88-3d30-4601-a9a0-18c99cfd1939\",\"moduleSequenceNumber\":139737},{\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"blob:file:///0a02c8c2-a3f6-4446-a972-290764b481a2\",\"moduleSequenceNumber\":143517}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":143517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hackPercent(server, player){\\n \\n    const balanceFactor = 240;\\n    const difficultyMult = (100 - server.hackDifficulty) / 100;\\n    const skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n    const percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / balanceFactor;\\n    if (percentMoneyHacked < 0) {\\n      return 0;\\n    }\\n    if (percentMoneyHacked > 1) {\\n      return 1;\\n    }\\n    return percentMoneyHacked * 1//BitNodeMultipliers.ScriptHackMoney;\\n}\\n \\nexport function growPercent(server, threads, player, cores = 1) {\\n \\n    const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n    const growthRate = 1.03//CONSTANTS.ServerBaseGrowthRate;\\n    let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n    if (adjGrowthRate > 1.0035/*CONSTANTS.ServerMaxGrowthRate*/) {\\n        adjGrowthRate = 1.0035/*CONSTANTS.ServerMaxGrowthRate*/;\\n    }\\n    const serverGrowthPercentage = server.serverGrowth / 100;\\n    const numServerGrowthCyclesAdjusted =\\n        numServerGrowthCycles * serverGrowthPercentage * 1//BitNodeMultipliers.ServerGrowthRate;\\n    const coreBonus = 1 + (cores - 1) / 16;\\n    return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.hacking_grow_mult * coreBonus);\\n}\\n \\nexport function weakenTime(server, player) {\\n \\n    const weakenTimeMultiplier = 4;\\n    return weakenTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function growTime(server, player) {\\n \\n    const growTimeMultiplier = 3.2;\\n    return growTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function hackTime(server, player) {\\n \\n    return utilCalculateHackingTime(server,player) * 1000;\\n}\\n \\nfunction utilCalculateIntelligenceBonus(intelligence, weight = 1) {\\n    return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n \\nfunction utilCalculateHackingTime(server, player) {\\n    \\n    const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n    const baseDiff = 500;\\n    const baseSkill = 50;\\n    const diffFactor = 2.5;\\n    let skillFactor = diffFactor * difficultyMult + baseDiff;\\n    skillFactor /= player.hacking + baseSkill;\\n    const hackTimeMultiplier = 5;\\n    const hackingTime =\\n        (hackTimeMultiplier * skillFactor) /\\n        (player.hacking_speed_mult * utilCalculateIntelligenceBonus(player.intelligence, 1));\\n    return hackingTime;\\n}\",\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":113005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as formulasFacade from '/SimpleScripts/formulasHackingFacade.js',\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// TODO: Only use formulasFacade if formulas.exe is missing.\\n\\tx = formulasFacade.hackTime(fserver, player)\\n}\",\"filename\":\"/SimpleScripts/wirus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":113006}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nvar server = ns.args[0];   //Host to hack\\nvar server2 = ns.getHostname(); //Server to run scripts on\\nvar i=0;\\nvar c=0;\\nvar player = ns.getPlayer();\\nvar fserver = ns.getServer(server);\\nvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.ns\\\"); //grabbing script RAM values\\nvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\nvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\nvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\nvar maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\nvar weakenThreads = (2000-((ns.getServerMinSecurityLevel(server))/0.05));\\nvar maxGrowThreads = ((maxRam/growscriptRam)-(weakenscriptRam*2000));\\nvar cs = ns.getServerSecurityLevel(server);\\nvar ms = ns.getServerMinSecurityLevel(server);\\nvar mm = ns.getServerMaxMoney(server);\\nvar ma = ns.getServerMoneyAvailable(server);\\n \\n \\n \\n//Priming the server.  Max money and Min security must be acheived for this to work\\nif ((ma < mm)==true)\\n{\\nns.exec('/newserver/weaken.js',server2,2000,server,0);\\nns.exec('/newserver/grow.js',server2,maxGrowThreads,server,0);\\nvar WeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\nmm = ns.getServerMaxMoney(server);\\nma = ns.getServerMoneyAvailable(server);\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n \\n//If Max Money is true, making sure security level is at its minimum\\nif((cs>ms)==true)\\n{\\n \\nns.exec('/newserver/weaken.js',server2,2000,server,0);\\nWeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n//Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\n \\nvar HPercent = (ns.formulas.hacking.hackPercent(fserver,player)*100);\\nvar GPercent = (ns.formulas.hacking.growPercent(fserver,1,player,1));\\nWeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nvar GrowTime = (ns.formulas.hacking.growTime(fserver,player));\\nvar HackTime = (ns.formulas.hacking.hackTime(fserver,player));\\n \\nvar growThreads = Math.round(((5/(GPercent-1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\nvar hackThreads = Math.round((50/HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\nweakenThreads = Math.round((weakenThreads - (growThreads*0.004))); //Getting required threads to fully weaken the server\\n \\nvar totalRamForRun = (hackscriptRam*hackThreads)+(growscriptRam*growThreads)+(weakenscriptRam*weakenThreads) //Calculating how much RAM is used for a single run\\nvar sleepTime = (WeakenTime/(maxRam/totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n \\n//if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n//{sleepTime = 500;\\n//}\\n \\nvar shiftCount = maxRam/totalRamForRun;\\nvar offset = sleepTime/2\\nvar gOffset = offset/4\\nvar hOffset = offset/2\\n \\n \\nwhile(true)\\n {  \\n     var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n     var gsleep = ((WeakenTime - GrowTime-gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n     var hsleep = ((WeakenTime - HackTime-hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n     var UsedRam = ns.getServerUsedRam(server2);\\n    \\n \\n    if((totalRamForRun>= (maxRam-UsedRam))==false) //making sure I have enough RAM to do a full run\\n    {\\n    ns.exec('/newserver/weaken.js',server2,weakenThreads,server,wsleep,i);\\n    ns.exec('/newserver/grow.js',server2,growThreads,server,gsleep,i);\\n    ns.exec('/newserver/hack.js',server2,hackThreads,server,hsleep,i);\\n    \\n    if (c<shiftCount)\\n    {await ns.sleep(sleepTime)\\n    c++\\n    }\\n    else\\n    {\\n       await ns.sleep(sleepTime+offset);\\n       c=0;\\n    }\\n    \\n    \\n    i++\\n    }\\n    else{\\n       await ns.sleep(1000) \\n    }\\n }\\n await ns.sleep(120000)\\n}\",\"filename\":\"/newserver/OpsScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":113007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":113008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":113009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":113010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst HOME = \\\"home\\\"\\n\\tvar serverName = ns.args[0]; // This way it can be used in other scripts?\\n\\tvar maxAffordableRamSize = 2;\\n\\tvar powerIter = 1;\\n\\tvar lastAffordableRamSize = maxAffordableRamSize;\\n\\tvar currentServerSizeCost = ns.getPurchasedServerCost(maxAffordableRamSize);\\n\\twhile(currentServerSizeCost < ns.getServerMoneyAvailable(HOME)){\\n\\t\\tlastAffordableRamSize = maxAffordableRamSize;\\n\\t\\tmaxAffordableRamSize = Math.pow(2, powerIter);\\n\\t\\tpowerIter++;\\n\\t\\tcurrentServerSizeCost = ns.getPurchasedServerCost(maxAffordableRamSize);\\n\\t}\\n\\tns.print(`Purchasing ${lastAffordableRamSize} for \\\\$${ns.getPurchasedServerCost(lastAffordableRamSize)}`)\\n\\tns.print(`Couldn't afford ${maxAffordableRamSize}ram for \\\\$${ns.getPurchasedServerCost(maxAffordableRamSize)}.`)\\n\\tns.purchaseServer(serverName, lastAffordableRamSize);\\n\\tawait ns.sleep(100000)\\n}\",\"filename\":\"/SimpleScripts/buyMaxServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/buyMaxServer.js\",\"url\":\"blob:file:///09ab40e9-f561-4d67-8dfa-23ef6db85fdf\",\"moduleSequenceNumber\":132886}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":132886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nvar server = ns.args[0];   //Host to hack\\nvar server2 = ns.getHostname(); //Server to run scripts on\\nvar i=0;\\nvar c=0;\\nvar player = ns.getPlayer();\\nvar fserver = ns.getServer(server);\\nvar contstantRam = ns.getScriptRam(\\\"/newserver/OpsScript.js\\\"); //grabbing script RAM values\\nvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\nvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\nvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\nvar maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n// ns.print(`ServerSecurity:${ns.getServerSecurityLevel(server)} - MinSecurity:${((ns.getServerMinSecurityLevel(server))/0.05)}`)\\n// var weakenThreads = (ns.getServerSecurityLevel(server)-((ns.getServerMinSecurityLevel(server))/0.05));\\nvar weakenThreads = (ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)) / 0.05;\\n// var maxGrowThreads = ((maxRam/growscriptRam)-(weakenscriptRam*2000));\\nvar maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * weakenThreads));\\nvar cs = ns.getServerSecurityLevel(server);\\nvar ms = ns.getServerMinSecurityLevel(server);\\nvar mm = ns.getServerMaxMoney(server);\\nvar ma = ns.getServerMoneyAvailable(server);\\n\\n// ns.print(`Security:${ns.getServerMinSecurityLevel(server)}, hackscriptRam:${hackscriptRam}, weakenThreads:${weakenThreads}`)\\n// ns.print(`Growth threads:${maxGrowThreads}`)\\nif(weakenThreads < 1){ weakenThreads = 1}\\n \\n \\n//Priming the server.  Max money and Min security must be acheived for this to work\\nif ((ma < mm)==true)\\n{\\nns.exec('/newserver/weaken.js',server2,weakenThreads,server,0);\\nns.exec('/newserver/grow.js',server2,maxGrowThreads,server,0);\\nvar WeakenTime = (weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\nmm = ns.getServerMaxMoney(server);\\nma = ns.getServerMoneyAvailable(server);\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n \\n//If Max Money is true, making sure security level is at its minimum\\nif((cs>ms)==true)\\n{\\n \\nns.exec('/newserver/weaken.js',server2,weakenThreads,server,0);\\nWeakenTime = (weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n//Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\n \\nvar HPercent = (hackPercent(fserver,player)*100);\\nvar GPercent = (growPercent(fserver,1,player,1));\\nWeakenTime = (weakenTime(fserver,player));\\nvar GrowTime = (growTime(fserver,player));\\nvar HackTime = (hackTime(fserver,player));\\n \\nvar growThreads = Math.round(((5/(GPercent-1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\nvar hackThreads = Math.round((50/HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\nweakenThreads = Math.round((weakenThreads - (growThreads*0.004))); //Getting required threads to fully weaken the server\\n \\nvar totalRamForRun = (hackscriptRam*hackThreads)+(growscriptRam*growThreads)+(weakenscriptRam*weakenThreads) //Calculating how much RAM is used for a single run\\nvar sleepTime = (WeakenTime/(maxRam/totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n \\n//if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n//{sleepTime = 500;\\n//}\\n \\nvar shiftCount = maxRam/totalRamForRun;\\nvar offset = sleepTime/2\\nvar gOffset = offset/4\\nvar hOffset = offset/2\\n \\n \\nwhile(true)\\n {  \\n     var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n     var gsleep = ((WeakenTime - GrowTime-gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n     var hsleep = ((WeakenTime - HackTime-hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n     var UsedRam = ns.getServerUsedRam(server2);\\n    \\n \\n    if((totalRamForRun>= (maxRam-UsedRam))==false) //making sure I have enough RAM to do a full run\\n    {\\n    ns.exec('/newserver/weaken.js',server2,weakenThreads,server,wsleep,i);\\n    ns.exec('/newserver/grow.js',server2,growThreads,server,gsleep,i);\\n    ns.exec('/newserver/hack.js',server2,hackThreads,server,hsleep,i);\\n    \\n    if (c<shiftCount)\\n    {await ns.sleep(sleepTime)\\n    c++\\n    }\\n    else\\n    {\\n       await ns.sleep(sleepTime+offset);\\n       c=0;\\n    }\\n    \\n    \\n    i++\\n    }\\n    else{\\n       await ns.sleep(1000) \\n    }\\n }\\n await ns.sleep(120000)\\n}\\n\\nexport function hackPercent(server, player){\\n \\n    const balanceFactor = 240;\\n    const difficultyMult = (100 - server.hackDifficulty) / 100;\\n    const skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n    const percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / balanceFactor;\\n    if (percentMoneyHacked < 0) {\\n      return 0;\\n    }\\n    if (percentMoneyHacked > 1) {\\n      return 1;\\n    }\\n    return percentMoneyHacked * 1//BitNodeMultipliers.ScriptHackMoney;\\n}\\n\\n\\nexport function growPercent(server, threads, player, cores = 1) {\\n \\n    const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n    const growthRate = 1.03//CONSTANTS.ServerBaseGrowthRate;\\n    let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n    if (adjGrowthRate > 1.0035/*CONSTANTS.ServerMaxGrowthRate*/) {\\n        adjGrowthRate = 1.0035/*CONSTANTS.ServerMaxGrowthRate*/;\\n    }\\n    const serverGrowthPercentage = server.serverGrowth / 100;\\n    const numServerGrowthCyclesAdjusted =\\n        numServerGrowthCycles * serverGrowthPercentage * 1//BitNodeMultipliers.ServerGrowthRate;\\n    const coreBonus = 1 + (cores - 1) / 16;\\n    return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.hacking_grow_mult * coreBonus);\\n}\\n \\nexport function weakenTime(server, player) {\\n \\n    const weakenTimeMultiplier = 4;\\n    return weakenTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function growTime(server, player) {\\n \\n    const growTimeMultiplier = 3.2;\\n    return growTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function hackTime(server, player) {\\n \\n    return utilCalculateHackingTime(server,player) * 1000;\\n}\\n \\nfunction utilCalculateIntelligenceBonus(intelligence, weight = 1) {\\n    return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n \\nfunction utilCalculateHackingTime(server, player) {\\n    \\n    const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n    const baseDiff = 500;\\n    const baseSkill = 50;\\n    const diffFactor = 2.5;\\n    let skillFactor = diffFactor * difficultyMult + baseDiff;\\n    skillFactor /= player.hacking + baseSkill;\\n    const hackTimeMultiplier = 5;\\n    const hackingTime =\\n        (hackTimeMultiplier * skillFactor) /\\n        (player.hacking_speed_mult * utilCalculateIntelligenceBonus(player.intelligence, 1));\\n    return hackingTime;\\n}\",\"filename\":\"/SimpleScripts/OPsScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"alpha-2\",\"moduleSequenceNumber\":113012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The goal here is to make a usable priority queue for usage in other functions.\\n// Credit for code used for priority queue goes to: https://www.geeksforgeeks.org/implementation-priority-queue-javascript/\\n\\n// User defined class to store element and its priority\\nexport class QElement {\\n\\tconstructor(element, priority) {\\n\\t\\tthis.element = element;\\n\\t\\tthis.priority = priority;\\n\\t}\\n}\\n\\n// PriorityQueue class\\nexport default class PriorityQueue {\\n\\n\\t// An array is used to implement priority\\n\\tconstructor() {\\n\\t\\tthis.items = [];\\n\\t}\\n\\n\\t// functions to be implemented enqueue function to add element to the queue as per priority\\n\\tenqueue(element, priority) {\\n\\t\\t// creating object from queue element\\n\\t\\tvar qElement = new QElement(element, priority);\\n\\t\\tvar contain = false;\\n\\n\\t\\t// iterating through the entire item array to add element at the correct location of the Queue\\n\\t\\tfor (var i = 0; i < this.items.length; i++) {\\n\\t\\t\\tif (this.items[i].priority > qElement.priority) {\\n\\t\\t\\t\\t// Once the correct location is found it is\\n\\t\\t\\t\\t// enqueued\\n\\t\\t\\t\\tthis.items.splice(i, 0, qElement);\\n\\t\\t\\t\\tcontain = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// if the element have the highest priority it is added at the end of the queue\\n\\t\\tif (!contain) {\\n\\t\\t\\tthis.items.push(qElement);\\n\\t\\t}\\n\\t}\\n\\n\\t// dequeue method to remove element from the queue\\n\\tdequeue() {\\n\\t\\t// return the dequeued element and remove it. if the queue is empty returns Underflow\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"Underflow\\\";\\n\\t\\treturn this.items.shift();\\n\\t}\\n\\n\\t// front function\\n\\tfront() {\\n\\t\\t// returns the highest priority element in the Priority queue without removing it.\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"No elements in Queue\\\";\\n\\t\\treturn this.items[0];\\n\\t}\\n\\n\\t// rear function\\n\\trear() {\\n\\t\\t// returns the lowest priority element of the queue\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"No elements in Queue\\\";\\n\\t\\treturn this.items[this.items.length - 1];\\n\\t}\\n\\n\\t// isEmpty function\\n\\tisEmpty() {\\n\\t\\t// return true if the queue is empty.\\n\\t\\treturn this.items.length == 0;\\n\\t}\\n\\n\\t// printQueue function\\n\\t// prints all the element of the queue\\n\\tprintPQueue() {\\n\\t\\tvar str = \\\"\\\";\\n\\t\\tfor (var i = 0; i < this.items.length; i++)\\n\\t\\t\\tstr += this.items[i].element + \\\" \\\";\\n\\t\\treturn str;\\n\\t}\\n\\n}\",\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":140509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default class ServerNode {\\n\\n\\tconstructor(name, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, servers) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.hackLvlReq = hackLvlReq;\\n\\t\\tthis.reqPorts = reqPorts;\\n\\t\\tthis.exploited = exploited;\\n\\t\\tthis.traversed = traversed;\\n\\t\\tthis.hasCCT = hasCCT;\\n\\t\\tthis.cctName; // Probably want to include what type it is, catagorize it, solve, somehow later down the line.\\n\\t\\tthis.maxRam = maxRam;\\n\\t\\tthis.freeRam; // Consider tracking usedRam instead? [Add when running script, remove on completed (will need to await)]\\n\\t\\tthis.reservedRam = 0;\\n\\t\\tthis.adjServerNodes = servers;\\n\\t\\t// TODO: possibly track running scripts/RAM  too?\\n\\t}\\n\\n\\tgetName(){\\n\\t\\treturn this.name;\\n\\t}\\n\\t\\n\\tgetExploitsReq() {\\n\\t\\treturn this.reqPorts;\\n\\t}\\n\\n\\tgetReqHackLvl(){\\n\\t\\treturn this.hackLvlReq;\\n\\t}\\n\\n\\t// TODO: Account for RAM usage/calculation & reservation for optimizing script usage!\\n\\t// When executing a script on the given server, add it to the usedRam value here, as well as a handle for the\\n\\t// script that was ran (so it can be killed? Or so it can be tracked?)\\n\\t// Ideally I'd like to spawn these exec's off as threads, such that when they are completed, that RAM is 'freed' here.\\n\\t// \\t\\t- This would mean calling back to the controlScript from the exec'd script.\\n\\t// Alternatively, if we know exactly how much time it's going to take, we can free the RAM after that amount of time.\\n\\n\\t// The proper method to do this would be using Netscript PORTS! (OR javascript sockets I guess if I wanted to cheat)\\n}\",\"filename\":\"/lib/ServerNode.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":140619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Common constants\\nexport const HOME = \\\"home\\\";\\n\\n// Common script names\\nexport const WEAKEN = \\\"weaken.js\\\";\\nexport const GROW = \\\"grow.js\\\";\\nexport const HACK = \\\"hack.js\\\";\\nexport const VIRUS = \\\"/SimpleScripts/virus.js\\\"\\n\\n// Port labels\\nexport const CONTROL_INBOUND_PORT = 0;\\nexport const AUTO_NODE_INBOUND_PORT = 20 \\n// Port commands\\nexport const PAUSE = \\\"PAUSE\\\";\\nexport const UNPAUSE = \\\"UNPAUSE\\\"\\nexport const KILL = \\\"KILL\\\";\",\"filename\":\"/lib/customConstants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":139737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO: Make this the ultimate controll script!\\n * The goal of this script is to basically be a glorified events manager.\\n * [] Then the hackEventCoordinator should manage how we stagger out weaken, grow, and hack commands, \\n * and what vulnerable servers run how many of the threads for each distributed attack!\\n * \\n * The contractSolver will ideally automatically solve contracts, and noify me of their completion, so I can choose rep or $$$.\\n * - possibly allow myself to assign which company to build rep for, if this is even automatable.\\n * [] MVP for now is just identifying which servers have cct files and notifying me.\\n * \\t\\t- Might be able to run them with a script? Needs further research.\\n * \\n * Should map out programs that need stop/start from this script w/ their RAM usage, so we know how much we need to\\n * reserve for their respective server! (I.E. autoNode on home takes up X ram, so when we calculate how much to \\n * use for threading, we take that reserved amount into account and avoid using it)\\n * - More along this vein, I could very well do ram calcs ahead of time and pass them on as args to other scripts to avoid\\n *   eating up unnecessary RAM. [OPTIMIZATION] \\n * - Or try to keep track of this via ports... (Seems messy)\\n * \\n * // Would be nice if we had a list of known servers we need to backdoor for FACTIONS, so it would give a toast notification!\\n */\\nimport PriorityQueue from \\\"lib/PriorityQueue.js\\\";\\nimport ServerNode from \\\"lib/ServerNode.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport { \\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n } from \\\"lib/formulasHackingFacade.js\\\";\\nvar player;\\nvar serverMap;\\nvar controlCycle;\\n// Servers to check through for value/hacking list\\nvar vulnerableServers; // List of servers that have already been cracked (Possibly not hackable yet)\\nvar serversToExploit;\\nvar hackableServers;\\nvar notHackableServers;\\nvar topTargets;\\nvar exploits;\\n// For traversal\\nlet queuedServers;\\nlet traversedServers;\\n\\n// Function labels for control cycle\\nconst EXPLOIT_CHECK = 0;\\nconst LVL_UP_CHECK = 1;\\n\\n// Timers\\nvar lastAvailableExploitsCheck;\\n\\n//Player stats to listen to\\nvar hackingLvl;\\n\\nasync function init(ns) {\\n\\tplayer = ns.getPlayer();\\n\\t// If need be, could make an \\\"Event\\\" wrapper class that is the function, \\n\\t// UUID(name, effectively), and other useful vars for ordering.\\n\\n\\t// High level functions for the main control loop!\\n\\t// Can be inserted & removed as deemed necessary!\\n\\n\\tcontrolCycle = new Map();\\n\\tcontrolCycle.set(EXPLOIT_CHECK, function (ns) { exploitCheck(ns) });\\n\\tcontrolCycle.set(LVL_UP_CHECK, function (ns) { levelUpCheck(ns) });\\n\\t// controlCycle.set() //Idk, X_PORT_LISTEN maybe? (I.E. for Node, when that is useful...)\\n\\t// Additional EventQueue?\\n\\tserverMap = new Map();\\n\\tvulnerableServers = [];\\n\\tserversToExploit = new PriorityQueue(); // Prioritized by # of exploits required\\n\\texploits = 0;\\n\\n\\thackableServers = [];\\n\\tnotHackableServers = new PriorityQueue(); // Prioritized by min hacking level required\\n\\n\\ttopTargets = []\\n\\n\\tqueuedServers = []\\n\\ttraversedServers = [HOME]\\n\\tlastAvailableExploitsCheck = 0;\\n\\thackingLvl = 1;\\n}\\n\\nexport async function main(ns) {\\n\\tinit(ns);\\n\\tcountExploits(ns);\\n\\n\\t// Traversal should generate a list of all servers, ideally seperating them into hackable/notHackable\\n\\t// Evaluating Servers & Cracking them!\\n\\ttraverseServers(ns);\\n\\n\\tlet running = true;\\n\\twhile (running) {\\n\\t\\tfor (let [key, value] of controlCycle.entries()) {\\n\\t\\t\\t// ns.print(`Key: ${key}, ${controlCycle.size}`)\\n\\t\\t\\tvalue(ns);\\n\\t\\t}\\n\\t\\tawait ns.sleep(2500);\\n\\t}\\n\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tprofileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tattackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\n// INITIAL traversal of ALL servers, to split them up into catagories for future processing!\\n// Evaluating Servers & Cracking them!\\nasync function traverseServers(ns) {\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\tns.print(`Initial servers:${queuedServers}`)\\n\\tlet server;\\n\\twhile (queuedServers.length > 0) {\\n\\t\\tserver = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\t\\tns.print(`Traversing server: ${server}`)\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n}\\n\\nasync function levelUpCheck(ns) {\\n\\tns.print(\\\"Entered Level Up Check\\\")\\n\\tif (ns.getHackingLevel() !== hackingLvl) {\\n\\t\\thackingLvl = ns.getHackingLevel();\\n\\t\\t// Checks if there are no un-hackable servers remaining, will remove this from controlCycle\\n\\t\\tif (notHackableServers.length < 1) {\\n\\t\\t\\tcontrolCycle.delete(LVL_UP_CHECK);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Servers that are now hackable will be moved onto the hackable stack/list\\n\\t\\tlet server;\\n\\t\\twhile (serverMap[notHackableServers[0]].getReqHackLvl() <= hackingLvl) {\\n\\t\\t\\tserver = notHackableServers.shift();\\n\\t\\t\\thackableServers.push(server);\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\t// sort after adding\\n\\t\\tsortHackableServers(ns);\\n\\t}\\n}\\n\\nexport async function countExploits(ns) {\\n\\tlet changed = false;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tlastAvailableExploitsCheck = getTime();\\n\\treturn changed;\\n}\\n\\nasync function exploitCheck(ns) {\\n\\tns.print(\\\"Entered Exploit Check\\\")\\n\\tif (exploits < 5 && (getTime() - lastAvailableExploitsCheck) > 10) {\\n\\t\\tlet changed = countExploits(ns);\\n\\t\\tif (changed) {\\n\\t\\t\\tcrackExploitableServers(ns);\\n\\t\\t}\\n\\t} else if (exploits === 5) {\\n\\t\\tcontrolCycle.delete(EXPLOIT_CHECK);\\n\\t\\tns.print(\\\"Canceling Exploit Check Task\\\")\\n\\t}\\n}\\n\\nasync function crackExploitableServers(ns) {\\n\\tlet server;\\n\\twhile (exploits >= serversToExploit.front().getExploitsReq()) {\\n\\t\\tserver = serversToExploit.dequeue();\\n\\t\\tcrackServer(ns, server.getName(), server.getExploitsReq);\\n\\t\\tinfectVulnerableServer(ns, server);\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n}\\n\\nasync function crackServer(ns, server, reqPorts) {\\n\\tswitch (reqPorts) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.sqlinject(server)\\n\\t\\tcase 4:\\n\\t\\t\\tns.httpworm(server)\\n\\t\\tcase 3:\\n\\t\\t\\tns.relaysmtp(server)\\n\\t\\tcase 2:\\n\\t\\t\\tns.ftpcrack(server)\\n\\t\\tcase 1:\\n\\t\\t\\tns.brutessh(server)\\n\\t\\tdefault:\\n\\t\\t\\tns.nuke(server)\\n\\t}\\n}\\n\\n// Used for initial traversal\\nexport async function processServer(ns, server) {\\n\\tns.print(`Processing Server: ${server}`)\\n\\tlet exploited = ns.hasRootAccess(server);\\n\\tif (!exploited) {\\n\\t\\tlet reqPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t// Attempt to crack\\n\\t\\tif (reqPorts <= exploits) {\\n\\t\\t\\tcrackServer(ns, server, reqPorts);\\n\\t\\t} else {\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\tserversToExploit.enqueue(server, reqPorts);\\n\\t\\t}\\n\\t}\\n\\n\\t// Add to vulnerable server list\\n\\texploited = ns.hasRootAccess(server);\\n\\tif (exploited) {\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n\\t// Continues with the traversal\\n\\tlet subServers = ns.scan(server)\\n\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\tlet subServer = subServers[index];\\n\\t\\tif (!traversedServers.includes(subServer) && !queuedServers.includes(subServer)) {\\n\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t}\\n\\t}\\n\\tns.print(`${server}'s subservers: ${subServers}`)\\n\\n\\t// Split into hackable/notHackable groupings\\n\\tlet hackLvlReq = ns.getServerRequiredHackingLevel(server);\\n\\tlet maxRam = ns.getServerMaxRam(server);\\n\\tisHackable();\\n\\tlet traversed = true;\\n\\t// TODO: hasCCT check?\\n\\tlet hasCCT = false;\\n\\t// Add server to map w/ it's relevant info stored in a ServerNode for later ease of access.\\n\\tmap.set(server, new ServerNode(server, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, subServers));\\n}\\n\\nasync function isHackable(server) {\\n\\tlet reqHackingLvl = ns.getServerRequiredHackingLevel(server);\\n\\tif (ns.getHackingLevel() >= reqHackingLvl) {\\n\\t\\thackableServers.push(server);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tnotHackableServers.enqueue(server, reqHackingLvl);\\n\\t}\\n\\treturn false;\\n}\\n\\nasync function infectVulnerableServer(ns, server) {\\n\\tawait ns.scp(WEAKEN, server);\\n\\tawait ns.scp(GROW, server);\\n\\tawait ns.scp(HACK, server);\\n}\\n\\nexport async function profileTargets(ns) {\\n\\t// TODO: What we REALLY want this function to do is SORT targets by value!\\n\\t// topTargets should no longer exist once this is accomplished!\\n\\t// Q1. How to establish server value\\n\\t// Q2. How to initially sort, and then maintain the sorted list?\\n\\t// - Probably with a datastructure capable of storing &\\n\\t//\\t sorting ServerNodes with it's own evaluation & comparison function\\n\\n\\tsortHackableServers(ns);\\n\\t// Once sorted, we want to allocate the right order & correct amount of threads distributed accross servers.\\n\\t// Then, once we have enough allocated to doing those three things (perhaps with a 2nd layer to buffer)\\n\\t// we can move on to the next highest valued server to do the same thing, and so on...\\n\\t// - To avoid having to re-allocate, we would be listening via ports for when they complete, so we know when we need to launch new tasks.\\n\\t//  - OR scheduling them such that they are back to back always (second layer)\\n}\\n\\nfunction sortHackableServers(ns){\\n\\thackableServers.sort(function (a, b) {\\n\\t\\t// Determines which server has a higher value based on amount possible to earn per second. ($/rate)\\n\\t\\tlet serverA = ns.getServer(a);\\n\\t\\tlet serverB = ns.getServer(b);\\n\\n\\t\\tlet hackValueA = hackPercent(serverA, player) * getServerMaxMoney(serverA, player);\\n\\t\\tlet timeA = weakenTime(serverA, player) + growTime(serverA, player) + hackTime(serverA, player);\\n\\t\\tlet hackValueB = hackPercent(serverB, player) * getServerMaxMoney(serverB, player);\\n\\t\\tlet timeB = weakenTime(serverB, player) + growTime(serverB, player) + hackTime(serverB, player);\\n\\n\\t\\tlet serverAValue = hackValueA / timeA;\\n\\t\\tlet serverBValue = hackValueB / timeB;\\n\\t\\treturn serverAValue > serverBValue ? 1 : serverAValue < serverBValue ? -1 : 0;\\n\\t});\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(VIRUS);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif (maxThreadCount <= 0) {\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t} else {\\n\\t\\t\\tswitch (topTargets.length) {\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet homeThreadCount = Math.floor((ns.getServerMaxRam(HOME) - ns.getServerUsedRam(HOME)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch (topTargets.length) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\\n\\n// Returns time in seconds!\\nasync function getTime() {\\n\\treturn Date.now() / 1000;\\n}\",\"filename\":\"controllScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"blob:file:///aa05a800-d6e3-4d8b-a127-399a4f72ebc1\",\"moduleSequenceNumber\":113005},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///6c418a8a-e245-44f4-a8a1-cdd198d2a994\",\"moduleSequenceNumber\":139737},{\"filename\":\"/lib/ServerNode.js\",\"url\":\"blob:file:///6855819f-ecc2-404a-844f-02543a2250be\",\"moduleSequenceNumber\":140619},{\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"blob:file:///d5023280-bdb4-4bae-968c-a380831bc508\",\"moduleSequenceNumber\":140509},{\"filename\":\"controllScript.js\",\"url\":\"blob:file:///0911ab35-30d2-4056-a5e7-6a31c6b7c440\",\"moduleSequenceNumber\":145079}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":145557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO: Make this the ultimate controll script!\\n * The goal of this script is to basically be a glorified events manager.\\n * [] Then the hackEventCoordinator should manage how we stagger out weaken, grow, and hack commands, \\n * and what vulnerable servers run how many of the threads for each distributed attack!\\n * \\n * The contractSolver will ideally automatically solve contracts, and noify me of their completion, so I can choose rep or $$$.\\n * - possibly allow myself to assign which company to build rep for, if this is even automatable.\\n * [] MVP for now is just identifying which servers have cct files and notifying me.\\n * \\t\\t- Might be able to run them with a script? Needs further research.\\n * \\n * Should map out programs that need stop/start from this script w/ their RAM usage, so we know how much we need to\\n * reserve for their respective server! (I.E. autoNode on home takes up X ram, so when we calculate how much to \\n * use for threading, we take that reserved amount into account and avoid using it)\\n * - More along this vein, I could very well do ram calcs ahead of time and pass them on as args to other scripts to avoid\\n *   eating up unnecessary RAM. [OPTIMIZATION] \\n * - Or try to keep track of this via ports... (Seems messy)\\n * \\n * // Would be nice if we had a list of known servers we need to backdoor for FACTIONS, so it would give a toast notification!\\n */\\nimport PriorityQueue from \\\"lib/PriorityQueue.js\\\";\\nimport ServerNode from \\\"lib/ServerNode.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport { \\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n } from \\\"lib/formulasHackingFacade.js\\\";\\nvar player;\\nvar serverMap;\\nvar controlCycle;\\n// Servers to check through for value/hacking list\\nvar vulnerableServers; // List of servers that have already been cracked (Possibly not hackable yet)\\nvar serversToExploit;\\nvar hackableServers;\\nvar notHackableServers;\\nvar topTargets;\\nvar exploits;\\n// For traversal\\nlet queuedServers;\\nlet traversedServers;\\n\\n// Function labels for control cycle\\nconst EXPLOIT_CHECK = 0;\\nconst LVL_UP_CHECK = 1;\\n\\n// Timers\\nvar lastAvailableExploitsCheck;\\n\\n//Player stats to listen to\\nvar hackingLvl;\\n\\nasync function init(ns) {\\n\\tplayer = ns.getPlayer();\\n\\t// If need be, could make an \\\"Event\\\" wrapper class that is the function, \\n\\t// UUID(name, effectively), and other useful vars for ordering.\\n\\n\\t// High level functions for the main control loop!\\n\\t// Can be inserted & removed as deemed necessary!\\n\\n\\tcontrolCycle = new Map();\\n\\tcontrolCycle.set(EXPLOIT_CHECK, function () { exploitCheck(ns) });\\n\\tcontrolCycle.set(LVL_UP_CHECK, function () { levelUpCheck(ns) });\\n\\t// controlCycle.set() //Idk, X_PORT_LISTEN maybe? (I.E. for Node, when that is useful...)\\n\\t// Additional EventQueue?\\n\\tserverMap = new Map();\\n\\tvulnerableServers = [];\\n\\tserversToExploit = new PriorityQueue(); // Prioritized by # of exploits required\\n\\texploits = 0;\\n\\n\\thackableServers = [];\\n\\tnotHackableServers = new PriorityQueue(); // Prioritized by min hacking level required\\n\\n\\ttopTargets = []\\n\\n\\tqueuedServers = []\\n\\ttraversedServers = [HOME]\\n\\tlastAvailableExploitsCheck = 0;\\n\\thackingLvl = 1;\\n}\\n\\nexport async function main(ns) {\\n\\tns.print(\\\"TEST\\\")\\n\\tawait ns.sleep(\\\"50\\\");\\n\\tinit(ns);\\n\\tawait countExploits(ns);\\n\\n\\t// Traversal should generate a list of all servers, ideally seperating them into hackable/notHackable\\n\\t// Evaluating Servers & Cracking them!\\n\\ttraverseServers(ns);\\n\\n\\tlet running = true;\\n\\twhile (running) {\\n\\t\\tfor (let [key, value] of controlCycle.entries()) {\\n\\t\\t\\tvalue();\\n\\t\\t}\\n\\t\\tns.sleep(25);\\n\\t}\\n\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\n// INITIAL traversal of ALL servers, to split them up into catagories for future processing!\\n// Evaluating Servers & Cracking them!\\nasync function traverseServers(ns) {\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\tlet server;\\n\\twhile (queuedServers.length > 0) {\\n\\t\\tserver = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n}\\n\\nasync function levelUpCheck(ns) {\\n\\tif (ns.getHackingLevel() !== hackingLvl) {\\n\\t\\thackingLvl = ns.getHackingLevel();\\n\\t\\t// Checks if there are no un-hackable servers remaining, will remove this from controlCycle\\n\\t\\tif (notHackableServers.length < 1) {\\n\\t\\t\\tcontrolCycle.delete(LVL_UP_CHECK);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Servers that are now hackable will be moved onto the hackable stack/list\\n\\t\\tlet server;\\n\\t\\twhile (serverMap[notHackableServers[0]].getReqHackLvl() <= hackingLvl) {\\n\\t\\t\\tserver = notHackableServers.shift();\\n\\t\\t\\thackableServers.push(server);\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\t// sort after adding\\n\\t\\tsortHackableServers(ns);\\n\\t}\\n}\\n\\nexport async function countExploits(ns) {\\n\\tlet changed = false;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tlastAvailableExploitsCheck = getTime();\\n\\treturn changed;\\n}\\n\\nasync function exploitCheck(ns) {\\n\\tif (exploits < 5 && (getTime() - lastAvailableExploitsCheck) > 10) {\\n\\t\\tlet changed = await countExploits(ns);\\n\\t\\tif (changed) {\\n\\t\\t\\tcrackExploitableServers(ns);\\n\\t\\t}\\n\\t} else if (exploits === 5) {\\n\\t\\tcontrolCycle.delete(EXPLOIT_CHECK);\\n\\t}\\n}\\n\\nasync function crackExploitableServers(ns) {\\n\\tlet server;\\n\\twhile (exploits >= serversToExploit.front().getExploitsReq()) {\\n\\t\\tserver = serversToExploit.dequeue();\\n\\t\\tcrackServer(ns, server.getName(), server.getExploitsReq);\\n\\t\\tinfectVulnerableServer(ns, server);\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n}\\n\\nasync function crackServer(ns, server, reqPorts) {\\n\\tswitch (reqPorts) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.sqlinject(server)\\n\\t\\tcase 4:\\n\\t\\t\\tns.httpworm(server)\\n\\t\\tcase 3:\\n\\t\\t\\tns.relaysmtp(server)\\n\\t\\tcase 2:\\n\\t\\t\\tns.ftpcrack(server)\\n\\t\\tcase 1:\\n\\t\\t\\tns.brutessh(server)\\n\\t\\tdefault:\\n\\t\\t\\tns.nuke(server)\\n\\t}\\n}\\n\\n// Used for initial traversal\\nexport async function processServer(ns, server) {\\n\\tlet exploited = ns.hasRootAccess(server);\\n\\tif (!exploited) {\\n\\t\\tlet reqPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t// Attempt to crack\\n\\t\\tif (reqPorts <= exploits) {\\n\\t\\t\\tcrackServer(ns, server, reqPorts);\\n\\t\\t} else {\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\tserversToExploit.enqueue(server, reqPorts);\\n\\t\\t}\\n\\t}\\n\\n\\t// Add to vulnerable server list\\n\\texploited = ns.hasRootAccess(server);\\n\\tif (exploited) {\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n\\t// Continues with the traversal\\n\\tlet subServers = ns.scan(server)\\n\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\tlet subServer = subServers[index];\\n\\t\\tif (!traversedServers.includes(subServer)) {\\n\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t}\\n\\t}\\n\\n\\t// Split into hackable/notHackable groupings\\n\\tlet hackLvlReq = ns.getServerRequiredHackingLevel(server);\\n\\tlet maxRam = ns.getServerMaxRam(server);\\n\\tisHackable();\\n\\tlet traversed = true;\\n\\t// TODO: hasCCT check?\\n\\tlet hasCCT = false;\\n\\t// Add server to map w/ it's relevant info stored in a ServerNode for later ease of access.\\n\\tmap.set(server, new ServerNode(server, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, subServers));\\n}\\n\\nasync function isHackable(server) {\\n\\tlet reqHackingLvl = ns.getServerRequiredHackingLevel(server);\\n\\tif (ns.getHackingLevel() >= reqHackingLvl) {\\n\\t\\thackableServers.push(server);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tnotHackableServers.enqueue(server, reqHackingLvl);\\n\\t}\\n\\treturn false;\\n}\\n\\n// TODO: Completely revamp/replace this with Hacking event manager.\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(VIRUS, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t\\t- Will need to keep track of what scripts are running on which servers\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\nasync function infectVulnerableServer(ns, server) {\\n\\tawait ns.scp(WEAKEN, server);\\n\\tawait ns.scp(GROW, server);\\n\\tawait ns.scp(HACK, server);\\n}\\n\\nexport async function profileTargets(ns) {\\n\\t// TODO: What we REALLY want this function to do is SORT targets by value!\\n\\t// topTargets should no longer exist once this is accomplished!\\n\\t// Q1. How to establish server value\\n\\t// Q2. How to initially sort, and then maintain the sorted list?\\n\\t// - Probably with a datastructure capable of storing &\\n\\t//\\t sorting ServerNodes with it's own evaluation & comparison function\\n\\n\\tsortHackableServers(ns);\\n\\t// Once sorted, we want to allocate the right order & correct amount of threads distributed accross servers.\\n\\t// Then, once we have enough allocated to doing those three things (perhaps with a 2nd layer to buffer)\\n\\t// we can move on to the next highest valued server to do the same thing, and so on...\\n\\t// - To avoid having to re-allocate, we would be listening via ports for when they complete, so we know when we need to launch new tasks.\\n\\t//  - OR scheduling them such that they are back to back always (second layer)\\n}\\n\\nfunction sortHackableServers(ns){\\n\\thackableServers.sort(function (a, b) {\\n\\t\\t// Determines which server has a higher value based on amount possible to earn per second. ($/rate)\\n\\t\\tlet serverA = ns.getServer(a);\\n\\t\\tlet serverB = ns.getServer(b);\\n\\n\\t\\tlet hackValueA = hackPercent(serverA, player) * getServerMaxMoney(serverA, player);\\n\\t\\tlet timeA = weakenTime(serverA, player) + growTime(serverA, player) + hackTime(serverA, player);\\n\\t\\tlet hackValueB = hackPercent(serverB, player) * getServerMaxMoney(serverB, player);\\n\\t\\tlet timeB = weakenTime(serverB, player) + growTime(serverB, player) + hackTime(serverB, player);\\n\\n\\t\\tlet serverAValue = hackValueA / timeA;\\n\\t\\tlet serverBValue = hackValueB / timeB;\\n\\t\\treturn serverAValue > serverBValue ? 1 : serverAValue < serverBValue ? -1 : 0;\\n\\t});\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(VIRUS);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif (maxThreadCount <= 0) {\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t} else {\\n\\t\\t\\tswitch (topTargets.length) {\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet homeThreadCount = Math.floor((ns.getServerMaxRam(HOME) - ns.getServerUsedRam(HOME)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch (topTargets.length) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\\n\\n// Returns time in seconds!\\nasync function getTime() {\\n\\treturn Date.now() / 1000;\\n}\",\"filename\":\"/SimpleScripts/controllScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":141048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"alpha-0\",\"alpha-1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"34.3.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":47552081680,\"moneyMax\":1188802042000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1338,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"44.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":44022592461,\"moneyMax\":1100564811525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1332,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"89.6.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":27103862675,\"moneyMax\":677596566875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":974,\"serverGrowth\":60}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"52.2.6.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":11535113870,\"moneyMax\":288377846750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1173,\"serverGrowth\":73}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"81.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":24942821199,\"moneyMax\":623570529975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1187,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-593748.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"40.9.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":20194064337,\"moneyMax\":504851608425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1162,\"serverGrowth\":75}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"83.3.1.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":15313338082,\"moneyMax\":382833452050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1100,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"6.0.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":15591968458,\"moneyMax\":389799211450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1073,\"serverGrowth\":80}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"5.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":24697863913,\"moneyMax\":617446597825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1187,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"12.0.6.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1758935147,\"moneyMax\":43973378675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1175,\"serverGrowth\":93}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"72.6.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1508,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"50.6.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1104280820,\"moneyMax\":27607020500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":906,\"serverGrowth\":77}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"28.6.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":946190556,\"moneyMax\":23654763900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":957,\"serverGrowth\":58}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262538.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[44,198,160,161,111,42,109,3,80,125,33,191,69,50,58,80,126,45,46,152,82,111,130,156,64,164,132,76,169,109,112,125,163,110,189,9,137,32,78,100,173,45,150,171,19,130,114,131,18,19],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"37.9.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":735316004,\"moneyMax\":18382900100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":943,\"serverGrowth\":67}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-248962.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":659730799,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"12.8.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":642683243,\"moneyMax\":16067081075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"85.9.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":713198723,\"moneyMax\":17829968075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":78}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"96.8.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":920665285,\"moneyMax\":23016632125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"66.1.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1153288569,\"moneyMax\":28832214225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":873,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"99.3.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":843128205,\"moneyMax\":21078205125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"67.5.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":586980902,\"moneyMax\":14674522550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":81}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204598.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(()))(a((a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"6.0.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":889887092,\"moneyMax\":22247177300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"10.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":787822161,\"moneyMax\":19695554025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"45.3.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1007665118,\"moneyMax\":25191627950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"38.9.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":923398652,\"moneyMax\":23084966300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"11.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":952304166,\"moneyMax\":23807604150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":805,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"53.4.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":878144163,\"moneyMax\":21953604075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":822,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"9.0.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":833927729,\"moneyMax\":20848193225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":760,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"19.2.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1554810016,\"moneyMax\":38870250400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"9.0.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1737834947,\"moneyMax\":43445873675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":839,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-139697.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[181,10,110,30,170,149,127,105,48,173,195,83,110,133,90,146,185,39,51,130,8,114,155,161,184,114,176,89,165,59,92,32,24,106,6,58,177,106,45,24,27,81,115,88,193,27],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"15.2.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1164351123,\"moneyMax\":29108778075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":822,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"86.4.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1325346357,\"moneyMax\":33133658925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"54.5.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1013734772,\"moneyMax\":25343369300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":808,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"40.7.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":758101801,\"moneyMax\":18952545025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":676,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"35.0.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":685888160,\"moneyMax\":17147204000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":489,\"serverGrowth\":43}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"67.3.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":740693484,\"moneyMax\":18517337100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":561,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-929639.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[11,33,41,7,20,10,12,25,34,47,30,27,16],[46,44,19,26,2,17,37,32,34,24,15,29,29],[20,6,1,44,35,33,42,19,2,12,29,30,18]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"85.7.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":246185190,\"moneyMax\":6154629750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":450,\"serverGrowth\":41}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"33.2.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":234823955,\"moneyMax\":5870598875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":378,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"9.8.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":873696014,\"moneyMax\":21842400350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":751,\"serverGrowth\":77}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"36.8.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":211352730,\"moneyMax\":5283818250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":455,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-85322.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"85.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":560643514,\"moneyMax\":14016087850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":567,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"13.4.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":424471261,\"moneyMax\":10611781525,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":414,\"serverGrowth\":35}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406760.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"77154120169\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"91.1.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":179605688,\"moneyMax\":4490142200,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":281,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"89.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":224152647,\"moneyMax\":5603816175,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":378,\"serverGrowth\":51}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"81.1.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"75.9.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":72918758,\"moneyMax\":1822968950,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":276,\"serverGrowth\":61}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"33.7.1.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[584,4,8,10],\"max-hardware\":[0,4,8,8],\"zer0\":[0,6,8,8],\"neo-net\":[0,6,8,8],\"harakiri-sushi\":[0,6,8,8]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1002.9524999999999,\"onlineMoneyMade\":584,\"onlineRunningTime\":12250.810000009511,\"pid\":469,\"ramUsage\":2,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///ac81a407-7e6f-46ad-9135-222a3e7a2802\",\"moduleSequenceNumber\":115334}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///ac81a407-7e6f-46ad-9135-222a3e7a2802\",\"moduleSequenceNumber\":115334}],\"dependents\":[],\"ramUsage\":2,\"server\":\"n00dles\",\"moduleSequenceNumber\":115334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"10.4.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[0,0,40,40],\"max-hardware\":[0,24,32,32],\"zer0\":[0,24,32,32],\"neo-net\":[0,24,32,32],\"harakiri-sushi\":[0,24,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4038.5999999999995,\"onlineMoneyMade\":0,\"onlineRunningTime\":12250.810000009511,\"pid\":470,\"ramUsage\":2,\"server\":\"foodnstuff\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///29acf9ee-f582-4f39-8b8b-b805b6a72efb\",\"moduleSequenceNumber\":115335}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///29acf9ee-f582-4f39-8b8b-b805b6a72efb\",\"moduleSequenceNumber\":115335}],\"dependents\":[],\"ramUsage\":2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":115335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"36.9.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[2264,8,40,40],\"max-hardware\":[0,24,32,32],\"zer0\":[0,32,32,32],\"neo-net\":[16,32,32,32],\"harakiri-sushi\":[0,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4188.945,\"onlineMoneyMade\":2280,\"onlineRunningTime\":12250.810000009511,\"pid\":471,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///759b75be-22fd-4a3b-ad84-67e4599cefe9\",\"moduleSequenceNumber\":115336}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///759b75be-22fd-4a3b-ad84-67e4599cefe9\",\"moduleSequenceNumber\":115336}],\"dependents\":[],\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":115336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"59.3.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[48808,32,40,40],\"max-hardware\":[0,24,32,32],\"zer0\":[0,8,32,32],\"neo-net\":[16,24,32,32],\"harakiri-sushi\":[0,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4269.315,\"onlineMoneyMade\":48824,\"onlineRunningTime\":12250.810000009511,\"pid\":472,\"ramUsage\":2,\"server\":\"joesguns\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///e03bb156-b566-480a-b449-41d22efa0fc2\",\"moduleSequenceNumber\":115337}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///e03bb156-b566-480a-b449-41d22efa0fc2\",\"moduleSequenceNumber\":115337}],\"dependents\":[],\"ramUsage\":2,\"server\":\"joesguns\",\"moduleSequenceNumber\":115337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"71.5.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[100624,32,64,80],\"max-hardware\":[0,32,64,64],\"zer0\":[0,64,64,64],\"neo-net\":[0,16,64,64],\"harakiri-sushi\":[0,48,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8184.359999999999,\"onlineMoneyMade\":100624,\"onlineRunningTime\":12250.810000009511,\"pid\":402,\"ramUsage\":2,\"server\":\"zer0\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///bb14ede7-898b-4f2d-aa51-425745517fce\",\"moduleSequenceNumber\":115329}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///bb14ede7-898b-4f2d-aa51-425745517fce\",\"moduleSequenceNumber\":115329}],\"dependents\":[],\"ramUsage\":2,\"server\":\"zer0\",\"moduleSequenceNumber\":115329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":39.584,\"minDifficulty\":8,\"moneyAvailable\":184524656,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"85.8.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[45920,16,32,40],\"max-hardware\":[0,8,32,32],\"zer0\":[0,8,32,32],\"neo-net\":[16,32,32,32],\"harakiri-sushi\":[0,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4081.785,\"onlineMoneyMade\":45936,\"onlineRunningTime\":12250.810000009511,\"pid\":404,\"ramUsage\":2,\"server\":\"nectar-net\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f13d8d6d-9061-42e0-a0d6-9ff8ecee0c6c\",\"moduleSequenceNumber\":115331}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f13d8d6d-9061-42e0-a0d6-9ff8ecee0c6c\",\"moduleSequenceNumber\":115331}],\"dependents\":[],\"ramUsage\":2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":115331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"67.8.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[98832,32,80,80],\"max-hardware\":[0,48,64,64],\"zer0\":[0,64,64,64],\"neo-net\":[32,64,64,64],\"harakiri-sushi\":[0,48,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8377.89,\"onlineMoneyMade\":98864,\"onlineRunningTime\":12250.810000009511,\"pid\":406,\"ramUsage\":2,\"server\":\"neo-net\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///66059d24-27bd-4f17-8a9c-52df9e7c914c\",\"moduleSequenceNumber\":115333}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///66059d24-27bd-4f17-8a9c-52df9e7c914c\",\"moduleSequenceNumber\":115333}],\"dependents\":[],\"ramUsage\":2,\"server\":\"neo-net\",\"moduleSequenceNumber\":115333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":18.587999999999997,\"minDifficulty\":8,\"moneyAvailable\":140.0313378056261,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"0.2.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"4.8.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[6428256,24,40,40],\"max-hardware\":[16,32,40,40],\"zer0\":[2975344,32,40,40],\"neo-net\":[16,40,40,40],\"harakiri-sushi\":[0,32,40,40]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5049.8550000000005,\"onlineMoneyMade\":9403632,\"onlineRunningTime\":12250.810000009511,\"pid\":473,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///d7abed7f-a7fe-4e71-a60e-2a8a30c3aacb\",\"moduleSequenceNumber\":115338}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///d7abed7f-a7fe-4e71-a60e-2a8a30c3aacb\",\"moduleSequenceNumber\":115338}],\"dependents\":[],\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":115338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.671999999999999,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"24.5.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[0,24,40,40],\"max-hardware\":[0,8,40,40],\"zer0\":[0,16,32,40],\"neo-net\":[16,16,32,32],\"harakiri-sushi\":[0,32,32,32]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4376.22,\"onlineMoneyMade\":16,\"onlineRunningTime\":12250.810000009511,\"pid\":474,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"threads\":8,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///1a936620-a4e2-40ae-bc52-8ec665d94a83\",\"moduleSequenceNumber\":115339}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///1a936620-a4e2-40ae-bc52-8ec665d94a83\",\"moduleSequenceNumber\":115339}],\"dependents\":[],\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":115339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.472,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"5.7.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"25.5.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[0,32,64,80],\"max-hardware\":[0,48,64,64],\"zer0\":[0,48,64,64],\"neo-net\":[32,48,64,64],\"harakiri-sushi\":[0,64,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8002.83,\"onlineMoneyMade\":32,\"onlineRunningTime\":12250.810000009511,\"pid\":405,\"ramUsage\":2,\"server\":\"max-hardware\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0bbac068-0afe-4b78-b6f6-ab3047c23043\",\"moduleSequenceNumber\":115332}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///0bbac068-0afe-4b78-b6f6-ab3047c23043\",\"moduleSequenceNumber\":115332}],\"dependents\":[],\"ramUsage\":2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":115332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.193999999999997,\"minDifficulty\":5,\"moneyAvailable\":24.28777839991361,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"89.2.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":32,\"minDifficulty\":11,\"moneyAvailable\":67093155,\"moneyMax\":1677328875,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-468994.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[131,25,158,56,24,1,14,114,90,7,15,139,86,36,71,75,45,84,158,179,95,112,163,134,70,67,178,91,117,139,41,135,190,13,159,114,163,31,80]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-367774.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[32,32,50,22,39,15,9,14],[8,23,1,10,35,22,27,44],[11,15,43,32,34,16,49,5],[7,33,36,32,36,29,2,12],[8,47,19,9,16,1,28,19],[15,44,39,36,1,49,47,37],[28,36,29,2,36,29,11,10],[1,30,26,25,50,39,16,44],[26,9,39,34,19,12,18,46]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"48.8.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":55250928,\"moneyMax\":1381273200,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":263,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-14442.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":751045360,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"29.1.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[4544,48,80,80],\"max-hardware\":[0,64,80,80],\"zer0\":[0,48,64,80],\"neo-net\":[32,48,64,64],\"harakiri-sushi\":[0,64,64,64]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8913.18,\"onlineMoneyMade\":4576,\"onlineRunningTime\":12250.810000009511,\"pid\":475,\"ramUsage\":2,\"server\":\"iron-gym\",\"threads\":16,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///d8b25d07-25f7-4082-9102-c14734b4f240\",\"moduleSequenceNumber\":115340}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///d8b25d07-25f7-4082-9102-c14734b4f240\",\"moduleSequenceNumber\":115340}],\"dependents\":[],\"ramUsage\":2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":115340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":39.62,\"minDifficulty\":10,\"moneyAvailable\":462859310.7553053,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348512.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[164,10,3,71,93,40,150,15,52,138,34,148,120,103,112,72,164,194,141,86,27,187,47,144,87,94,37,80,160,22,43,151,59,184,123,149,179,151,109,196,24,151,110,51,13,145,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"4.6.5.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":521,\"serverGrowth\":42}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"82.2.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":980,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"19.6.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":677,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-679765.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[7,6],[9,4,4],[7,6,3,5],[9,5,7,8,8],[2,1,7,1,2,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"93.8.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":534,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-644675.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"99.4.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":363,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"43.2.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573312.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,2,0,0,10,3,1,1,1,5,0,8,0,0,3,0,9,0,1,10],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"41.1.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":524,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"21.5.0.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[1116,12,16,20],\"max-hardware\":[0,8,16,16],\"zer0\":[0,12,16,16],\"neo-net\":[8,8,16,16],\"harakiri-sushi\":[0,12,16,16]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2040.8925,\"onlineMoneyMade\":1124,\"onlineRunningTime\":12250.810000009511,\"pid\":403,\"ramUsage\":2,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///e574dfa6-5e95-478a-a884-65c1f84ac9bd\",\"moduleSequenceNumber\":115330}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///e574dfa6-5e95-478a-a884-65c1f84ac9bd\",\"moduleSequenceNumber\":115330}],\"dependents\":[],\"ramUsage\":2,\"server\":\"CSEC\",\"moduleSequenceNumber\":115330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"75.8.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"96.2.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"20.8.9.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"darkweb\",\"moduleSequenceNumber\":123285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0\",\"httpPortOpen\":false,\"ip\":\"30.1.0.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1024,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[22657536,1024,3072,3072],\"max-hardware\":[1991.2499145389497,2048,3072,3072],\"zer0\":[753.5997462372156,2048,3072,3072],\"neo-net\":[2048,2048,3072,3072],\"harakiri-sushi\":[4145.931677158268,3072,3072,3072]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":424992.95999999996,\"onlineMoneyMade\":22666474.781337935,\"onlineRunningTime\":12250.810000009511,\"pid\":476,\"ramUsage\":2,\"server\":\"alpha-0\",\"threads\":512,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b323f42d-634b-42f1-8608-bdd242aea1ff\",\"moduleSequenceNumber\":118957}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b323f42d-634b-42f1-8608-bdd242aea1ff\",\"moduleSequenceNumber\":118957}],\"dependents\":[],\"ramUsage\":2,\"server\":\"alpha-0\",\"moduleSequenceNumber\":118957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-1\",\"httpPortOpen\":false,\"ip\":\"19.0.5.0\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16384,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"max-hardware\",\"zer0\",\"neo-net\",\"harakiri-sushi\"],\"dataMap\":{\"iron-gym\":[4180853.045815945,24576,49152,49152],\"max-hardware\":[326276603.2063929,49152,49152,49152],\"zer0\":[937500000,40960,49152,49152],\"neo-net\":[76115701.29845503,49152,49152,49152],\"harakiri-sushi\":[600000000,49152,49152,49152]},\"filename\":\"/SimpleScripts/virus.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7513574.400000001,\"onlineMoneyMade\":1944073157.5506635,\"onlineRunningTime\":12250.810000009511,\"pid\":477,\"ramUsage\":2,\"server\":\"alpha-1\",\"threads\":8192,\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f2b1ee70-ebca-4c54-8f28-62a29e70cc05\",\"moduleSequenceNumber\":132889}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///f2b1ee70-ebca-4c54-8f28-62a29e70cc05\",\"moduleSequenceNumber\":132889}],\"dependents\":[],\"ramUsage\":2,\"server\":\"alpha-1\",\"moduleSequenceNumber\":132889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0889,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":14.0983,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":1.1863493837427628}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":12.2815,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":11.8788,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":50281.07197436755}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":20.7014,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":33.5894,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":4015.0764533292736}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":71.1521,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":14671.598237364537}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":48.1477,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":34643.73497766725,\"lastPrice\":34695.423135516954,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":17.22490335158088,\"otlkMagForecast\":67.53740927090807,\"cap\":127391618,\"spreadPerc\":0.5,\"shareTxForMovement\":77825,\"shareTxUntilMovement\":77825,\"totalShares\":107000000,\"maxShares\":21400000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":64219.64650456955,\"lastPrice\":64317.50029135372,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":20.655440329487583,\"otlkMagForecast\":30.228897208372327,\"cap\":444036564,\"spreadPerc\":0.3,\"shareTxForMovement\":74742,\"shareTxUntilMovement\":74742,\"totalShares\":77600000,\"maxShares\":15500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":20001.877952331215,\"lastPrice\":19953.737923630968,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":14.65383320412856,\"otlkMagForecast\":65.20766024358868,\"cap\":79992692,\"spreadPerc\":0.3,\"shareTxForMovement\":51809,\"shareTxUntilMovement\":51809,\"totalShares\":109700000,\"maxShares\":21900000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":19382.622890873467,\"lastPrice\":19423.2321410408,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":13.277103594708901,\"otlkMagForecast\":37.66546418819722,\"cap\":377642282,\"spreadPerc\":0.2,\"shareTxForMovement\":46802,\"shareTxUntilMovement\":46802,\"totalShares\":74000000,\"maxShares\":14800000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":89166.51154055209,\"lastPrice\":89356.15814339409,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":13.852110949061565,\"otlkMagForecast\":62.30018363185019,\"cap\":690062506,\"spreadPerc\":0.6,\"shareTxForMovement\":75201,\"shareTxUntilMovement\":75201,\"totalShares\":46200000,\"maxShares\":9200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":67569.40149145044,\"lastPrice\":67347.06002291403,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":true,\"otlkMag\":21.75214139893804,\"otlkMagForecast\":73.91533832444978,\"cap\":920858428,\"spreadPerc\":0.4,\"shareTxForMovement\":42248,\"shareTxUntilMovement\":42248,\"totalShares\":35400000,\"maxShares\":7100000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":18649.5259689204,\"lastPrice\":18599.928552891335,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":13.164176457161524,\"otlkMagForecast\":34.71595932919106,\"cap\":249313839,\"spreadPerc\":0.3,\"shareTxForMovement\":89898,\"shareTxUntilMovement\":89898,\"totalShares\":82200000,\"maxShares\":16400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":25205.95346494443,\"lastPrice\":25107.123841944285,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":18.253879778664967,\"otlkMagForecast\":69.02252094395227,\"cap\":533329094,\"spreadPerc\":0.9,\"shareTxForMovement\":32226,\"shareTxUntilMovement\":32226,\"totalShares\":56300000,\"maxShares\":11300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":28669.162392509705,\"lastPrice\":28595.634309706104,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":5.33872531664056,\"otlkMagForecast\":55.439525006738236,\"cap\":312356425,\"spreadPerc\":0.2,\"shareTxForMovement\":88878,\"shareTxUntilMovement\":88878,\"totalShares\":50600000,\"maxShares\":10100000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11488.686738910084,\"lastPrice\":11464.666691654988,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":8.444393465521514,\"otlkMagForecast\":57.26390847955383,\"cap\":252839775,\"spreadPerc\":0.5,\"shareTxForMovement\":45844,\"shareTxUntilMovement\":45844,\"totalShares\":66900000,\"maxShares\":13400000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":21617.033604317156,\"lastPrice\":21656.14825374182,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":9.026140566668902,\"otlkMagForecast\":41.64797991788802,\"cap\":283237005,\"spreadPerc\":1,\"shareTxForMovement\":72297,\"shareTxUntilMovement\":72297,\"totalShares\":67000000,\"maxShares\":13400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":19346.775381185533,\"lastPrice\":19301.43451670504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":6.522395070399654,\"otlkMagForecast\":45.05988582358886,\"cap\":84159658,\"spreadPerc\":0.8,\"shareTxForMovement\":105183,\"shareTxUntilMovement\":105183,\"totalShares\":73600000,\"maxShares\":14700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":29400.233008922576,\"lastPrice\":29338.76427866349,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":6.228933254821171,\"otlkMagForecast\":42.25904148875932,\"cap\":265091926,\"spreadPerc\":1,\"shareTxForMovement\":88129,\"shareTxUntilMovement\":88129,\"totalShares\":39400000,\"maxShares\":7900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":7241.255395992952,\"lastPrice\":7254.5878577757885,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":8.219724719323882,\"otlkMagForecast\":42.2384735850495,\"cap\":54120614,\"spreadPerc\":0.5,\"shareTxForMovement\":104689,\"shareTxUntilMovement\":104689,\"totalShares\":32600000,\"maxShares\":6500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":21175.560281580605,\"lastPrice\":21213.876113065435,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":7.117079119337956,\"otlkMagForecast\":44.59406720300588,\"cap\":177618400,\"spreadPerc\":0.6,\"shareTxForMovement\":120926,\"shareTxUntilMovement\":120926,\"totalShares\":47100000,\"maxShares\":9400000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8909.990358300269,\"lastPrice\":8889.953651910166,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":6.49261639828345,\"otlkMagForecast\":56.81167409184683,\"cap\":70312908,\"spreadPerc\":0.7,\"shareTxForMovement\":60785,\"shareTxUntilMovement\":60785,\"totalShares\":78600000,\"maxShares\":15700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":19085.28374229014,\"lastPrice\":19128.905142928816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":8.541558036482485,\"otlkMagForecast\":40.95736944245281,\"cap\":303175875,\"spreadPerc\":1.2,\"shareTxForMovement\":43452,\"shareTxUntilMovement\":43452,\"totalShares\":25200000,\"maxShares\":5000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":14633.391284753374,\"lastPrice\":14662.65665505045,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":8.965218118830817,\"otlkMagForecast\":59.8829562818269,\"cap\":213886360,\"spreadPerc\":0.7,\"shareTxForMovement\":68780,\"shareTxUntilMovement\":68780,\"totalShares\":30400000,\"maxShares\":6100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":39759.94312238408,\"lastPrice\":39848.29428794211,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.261852772670486,\"otlkMagForecast\":55.60509816814601,\"cap\":426040347,\"spreadPerc\":0.5,\"shareTxForMovement\":57651,\"shareTxUntilMovement\":57651,\"totalShares\":22600000,\"maxShares\":4500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":8260.003482010377,\"lastPrice\":8325.293692128484,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.49,\"b\":false,\"otlkMag\":7.893664857562461,\"otlkMagForecast\":38.414918337130906,\"cap\":27819778,\"spreadPerc\":0.9,\"shareTxForMovement\":12370,\"shareTxUntilMovement\":12370,\"totalShares\":72300000,\"maxShares\":14500000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":4031.6338397480827,\"lastPrice\":4016.9694209582162,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":false,\"otlkMag\":10.17746595489829,\"otlkMagForecast\":38.34065764558077,\"cap\":34344295,\"spreadPerc\":0.5,\"shareTxForMovement\":45088,\"shareTxUntilMovement\":45088,\"totalShares\":40300000,\"maxShares\":8100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4589.314059742989,\"lastPrice\":4597.035390152352,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":true,\"otlkMag\":5.434450627105342,\"otlkMagForecast\":53.42556703502134,\"cap\":46067534,\"spreadPerc\":0.4,\"shareTxForMovement\":98905,\"shareTxUntilMovement\":98905,\"totalShares\":40200000,\"maxShares\":8000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":77417.75604017553,\"lastPrice\":76956.0420689055,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.89,\"b\":false,\"otlkMag\":12.563104343488744,\"otlkMagForecast\":36.505719648691,\"cap\":184587869,\"spreadPerc\":0.8,\"shareTxForMovement\":67445,\"shareTxUntilMovement\":67445,\"totalShares\":29000000,\"maxShares\":5800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":32706.301159448893,\"lastPrice\":32537.93836505084,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.63,\"b\":true,\"otlkMag\":1.192283465904967,\"otlkMagForecast\":54.795769685224016,\"cap\":82300324,\"spreadPerc\":0.9,\"shareTxForMovement\":82253,\"shareTxUntilMovement\":82253,\"totalShares\":45400000,\"maxShares\":9100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1945.0449293071456,\"lastPrice\":1939.687954423215,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":5.928917491844555,\"otlkMagForecast\":56.05168577404981,\"cap\":5494270,\"spreadPerc\":0.7,\"shareTxForMovement\":78540,\"shareTxUntilMovement\":78540,\"totalShares\":142300000,\"maxShares\":28500000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3189.8765587246094,\"lastPrice\":3210.1287659043746,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2,\"b\":false,\"otlkMag\":5.9597602283375055,\"otlkMagForecast\":43.003765364273924,\"cap\":1698804,\"spreadPerc\":0.8,\"shareTxForMovement\":53187,\"shareTxUntilMovement\":53187,\"totalShares\":50700000,\"maxShares\":10100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3353.716775247661,\"lastPrice\":3365.4276020264715,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":true,\"otlkMag\":6.181396203431182,\"otlkMagForecast\":56.18854735208384,\"cap\":11956691,\"spreadPerc\":1.3,\"shareTxForMovement\":70158,\"shareTxUntilMovement\":70158,\"totalShares\":15300000,\"maxShares\":3100000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1717.770991147671,\"lastPrice\":1713.6909714403907,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":1.1573511992601455,\"otlkMagForecast\":50.57688592499198,\"cap\":46056141,\"spreadPerc\":0.9,\"shareTxForMovement\":80173,\"shareTxUntilMovement\":80173,\"totalShares\":23900000,\"maxShares\":4800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":558.4364052722204,\"lastPrice\":562.9923173569035,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":true,\"otlkMag\":9.572091847506302,\"otlkMagForecast\":60.08238649456028,\"cap\":13101154,\"spreadPerc\":0.6,\"shareTxForMovement\":43672,\"shareTxUntilMovement\":43672,\"totalShares\":16800000,\"maxShares\":3400000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":3.4776655646524577,\"lastPrice\":3.508907846020484,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.83,\"b\":false,\"otlkMag\":1.694796109686301,\"otlkMagForecast\":50.55846740402206,\"cap\":4352576,\"spreadPerc\":1.2,\"shareTxForMovement\":46335,\"shareTxUntilMovement\":46335,\"totalShares\":117600000,\"maxShares\":23500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":85.94684085324508,\"lastPrice\":85.56385920329475,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.41,\"b\":false,\"otlkMag\":9.177459950551476,\"otlkMagForecast\":38.104307854353074,\"cap\":3461626,\"spreadPerc\":0.7,\"shareTxForMovement\":54316,\"shareTxUntilMovement\":54316,\"totalShares\":363600000,\"maxShares\":72700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":34405.33831498828,\"lastPrice\":34322.532391570865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":9.409167908806351,\"otlkMagForecast\":60.690371891945134,\"cap\":296315766,\"spreadPerc\":0.8,\"shareTxForMovement\":105331,\"shareTxUntilMovement\":105331,\"totalShares\":15900000,\"maxShares\":3200000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":3826.016707498607,\"lastPrice\":3817.654629461954,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":9.200749116319576,\"otlkMagForecast\":39.529878681008306,\"cap\":99715888,\"spreadPerc\":1,\"shareTxForMovement\":197143,\"shareTxUntilMovement\":197143,\"totalShares\":29400000,\"maxShares\":5900000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":26,\"lastUpdate\":1644534244320,\"ticksUntilCycle\":36}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-4,\"y\":24,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644534249584","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644534249594"}}