{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":957,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":150,\"intelligence\":0,\"hacking_chance_mult\":1.300232148267777,\"hacking_speed_mult\":1.3325505563677558,\"hacking_money_mult\":3.5093000328247625,\"hacking_grow_mult\":2.3452960827340847,\"hacking_exp\":12054362.527288012,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":11815.660632263383,\"intelligence_exp\":0,\"hacking_mult\":2.9745552881548534,\"strength_mult\":1.5535241252030578,\"defense_mult\":1.3508905436548326,\"dexterity_mult\":1.7943203646095316,\"agility_mult\":1.2411306869828775,\"charisma_mult\":1.485979598020316,\"hacking_exp_mult\":2.21937492209259,\"strength_exp_mult\":1.4918763424569046,\"defense_exp_mult\":1.4918763424569046,\"dexterity_exp_mult\":1.4918763424569046,\"agility_exp_mult\":1.4918763424569046,\"charisma_exp_mult\":1.4918763424569046,\"company_rep_mult\":1.7902516109482856,\"faction_rep_mult\":1.3562512204153678,\"money\":11464521057.565407,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Blade Industries\":\"Software Engineering Intern\"},\"companyName\":\"Blade Industries\",\"currentServer\":\"alpha-1\",\"purchasedServers\":[\"alpha-0\",\"alpha-1\",\"alpha-0-0\",\"alpha-0-1\",\"alpha-0-2\",\"alpha-0-3\",\"alpha-0-4\",\"alpha-0-5\",\"alpha-0-6\",\"alpha-0-7\",\"alpha-0-8\",\"alpha-0-9\",\"alpha-0-10\",\"alpha-0-11\",\"alpha-0-12\",\"alpha-0-13\",\"alpha-0-14\",\"alpha-0-15\",\"alpha-0-16\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44446.199999915174,\"ram\":64,\"totalMoneyGenerated\":970140586.1131097,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44445.99999991518,\"ram\":64,\"totalMoneyGenerated\":969281183.4662311,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44445.99999991518,\"ram\":64,\"totalMoneyGenerated\":969109799.097603,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44445.59999991518,\"ram\":64,\"totalMoneyGenerated\":968795453.9740852,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44444.99999991519,\"ram\":64,\"totalMoneyGenerated\":968354133.8640447,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44443.59999991521,\"ram\":64,\"totalMoneyGenerated\":967839932.800223,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44441.59999991524,\"ram\":64,\"totalMoneyGenerated\":965842916.0807984,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44438.39999991529,\"ram\":64,\"totalMoneyGenerated\":963347523.2823292,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44433.99999991535,\"ram\":64,\"totalMoneyGenerated\":962883099.4055302,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44428.59999991543,\"ram\":64,\"totalMoneyGenerated\":962419121.7790756,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44394.599999915925,\"ram\":64,\"totalMoneyGenerated\":961899250.7166603,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":44374.99999991621,\"ram\":64,\"totalMoneyGenerated\":961430499.5256788,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":43986.999999921856,\"ram\":64,\"totalMoneyGenerated\":960834976.3445897,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":43711.39999992587,\"ram\":64,\"totalMoneyGenerated\":960233731.4668949,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":42930.199999937235,\"ram\":64,\"totalMoneyGenerated\":959507099.9517903,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":42582.999999942185,\"ram\":64,\"totalMoneyGenerated\":959092877.1959367,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":42573.999999942316,\"ram\":64,\"totalMoneyGenerated\":958678110.8076415,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":42557.79999994255,\"ram\":64,\"totalMoneyGenerated\":958213502.6388203,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":42171.599999948114,\"ram\":64,\"totalMoneyGenerated\":950680248.4088006,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":42129.599999948725,\"ram\":64,\"totalMoneyGenerated\":950144898.8027923,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":41969.599999951046,\"ram\":64,\"totalMoneyGenerated\":947446491.7459884,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":39888.19999998111,\"ram\":64,\"totalMoneyGenerated\":918314790.9326737,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":38951.39999999448,\"ram\":64,\"totalMoneyGenerated\":901398966.5791932,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":38199.400000005204,\"ram\":64,\"totalMoneyGenerated\":886966432.631194,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":32971.400000081136,\"ram\":64,\"totalMoneyGenerated\":788129437.2819176,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":28053.000000066764,\"ram\":64,\"totalMoneyGenerated\":676872818.8476272,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":17015.800000026637,\"ram\":64,\"totalMoneyGenerated\":418563638.86976224,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":8074.999999994867,\"ram\":64,\"totalMoneyGenerated\":200039176.64335996,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":8063.799999994877,\"ram\":64,\"totalMoneyGenerated\":199757531.6189238,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24799.45737928543,\"onlineTimeSeconds\":7186.399999995661,\"ram\":64,\"totalMoneyGenerated\":178000196.01976326,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":17,\"moneyGainRatePerSecond\":68.95265970293005,\"onlineTimeSeconds\":1072.6000000001045,\"ram\":1,\"totalMoneyGenerated\":47173.35372993924,\"name\":\"hacknet-node-30\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Sector-12\",\"NiteSec\",\"The Black Hand\",\"BitRunners\"],\"factionInvitations\":[\"Netburners\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-43.1,\"crime_money_mult\":1.1793488873177111,\"crime_success_mult\":1.0721353521070098,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.3329062383138885,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":3.0293356582967874,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":6164.091908619378,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":55177.63017652285,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":3703200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1793488873177111,\"hacknet_node_money_mult\":2.704025870703139,\"hacknet_node_purchase_cost_mult\":0.7130299911488472,\"hacknet_node_ram_cost_mult\":0.9320653479069899,\"hacknet_node_core_cost_mult\":0.9320653479069899,\"hacknet_node_level_cost_mult\":0.7922555457209415,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644791881229,\"totalPlaytime\":428356200,\"playtimeSinceLastAug\":44475600,\"playtimeSinceLastBitnode\":428356200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":262500000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1208439692057.7622,\"hacknet\":25364265599.110714,\"hacknet_expenses\":-172006448332.55707,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":11463521057.564613,\"work\":15411731.259514824,\"servers\":-1045299200000,\"other\":-5312700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-66788096,\"codingcontract\":1050000000,\"corporation\":0,\"crime\":795000,\"gang\":0,\"hacking\":1290671117390.8145,\"hacknet\":187040651035.91202,\"hacknet_expenses\":-260295953931.08374,\"hospitalization\":-34340000,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":12683994331.789406,\"work\":15605031.259516291,\"servers\":-1100449670676.052,\"other\":-11565998898.72876,\"augmentations\":-93481422522.98804}},\"scriptProdSinceLastAug\":1208430368986.2715,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1644364076521},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1644364796512},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644365636510},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1644369056521},{\"ID\":\"TOR\",\"unlockedOn\":1644370256520},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1644372116520},{\"ID\":\"TRAVEL\",\"unlockedOn\":1644372296511},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1644374516517},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1644377936516},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1644411651922},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644411651933},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644411651935},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644413931922},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644414351923},{\"ID\":\"NITESEC\",\"unlockedOn\":1644416091923},{\"ID\":\"FROZE\",\"unlockedOn\":1644416137121},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1644429277114},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1644490597118},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644493537117},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1644650920646},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1644734510975},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1644736850977},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1644784722046}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.8.0.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":8191.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,9980],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67043,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3959,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///64d1e05f-2e35-47ed-bbf5-8e3c72f362e0\",\"moduleSequenceNumber\":507}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,46279],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67044,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":699,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///753d9b23-a49e-4f86-8695-e6b166046e8b\",\"moduleSequenceNumber\":504}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",841799.3759765625,86246],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":462.60999999998285,\"pid\":67169,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///bee1fd4a-ab4c-42af-8e91-f0d563b3591a\",\"moduleSequenceNumber\":513}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",739586.3759765625,32],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":360.40999999998866,\"pid\":67170,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///bee1fd4a-ab4c-42af-8e91-f0d563b3591a\",\"moduleSequenceNumber\":513}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/SimpleScripts/autoNet.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32250.210000082036,\"pid\":67184,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///a10ac151-d939-4ea0-aeb7-6977e7057bfa\",\"moduleSequenceNumber\":266},{\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"blob:file:///7ea52585-e09f-4d6f-9a2b-61fcc087b6e7\",\"moduleSequenceNumber\":499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"controllScript.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6600.655885208777,\"offlineMoneyMade\":0,\"offlineRunningTime\":50.717999999999996,\"onlineExpGained\":11787038.390371392,\"onlineMoneyMade\":1207724182561.2715,\"onlineRunningTime\":31811.810000080633,\"pid\":67185,\"ramUsage\":9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"blob:file:///0a28df5e-7ab1-4bbf-b08f-ad626a30928c\",\"moduleSequenceNumber\":255},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///31a7c481-4ae7-47e6-9a5a-a9ac50401951\",\"moduleSequenceNumber\":55623},{\"filename\":\"/lib/ServerNode.js\",\"url\":\"blob:file:///96c56e9a-2924-4a61-abb3-a4e8851be41c\",\"moduleSequenceNumber\":264},{\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"blob:file:///bd44c915-e695-4b1f-a8a1-9c32df3abb41\",\"moduleSequenceNumber\":263},{\"filename\":\"controllScript.js\",\"url\":\"blob:file:///79c06516-9f6d-4aca-832b-3fdf0fdcf2e1\",\"moduleSequenceNumber\":73558}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",937214.7023925781,43180],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000004,\"pid\":67186,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///bee1fd4a-ab4c-42af-8e91-f0d563b3591a\",\"moduleSequenceNumber\":513}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetServer = ns.args[0];\\n\\twhile (true){\\n\\t\\tns.print(`Hacking ${targetServer}`);\\n\\t\\tawait ns.hack(targetServer);\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/hackme.js\",\"url\":\"blob:file:///3066b819-a1a0-4fc9-b19b-3425b4eb3cda\",\"moduleSequenceNumber\":2223}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet topTargets = []\\nlet exploits = 0;\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\nlet virus = \\\"/SimpleScripts/virus.js\\\"\\n\\nexport async function main(ns) {\\n\\tawait countExploits(ns);\\n\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n\\tns.print(`Vulnerable Servers: ${vulnerableServers}`);\\n\\n\\t// SCPs virus to vulnerable servers\\n\\tawait infectVulnerableServers(ns);\\n\\tns.print(`Servers infected.`)\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits){\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\t\\t\\tcase 4:\\n\\t\\t\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\t\\t\\tcase 2:\\n\\t\\t\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\t\\t\\tcase 1:\\n\\t\\t\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}catch{\\n\\t\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif(ns.hasRootAccess(server)){\\n\\t\\tvulnerableServers.push(server)\\n\\t\\tlet subServers = ns.scan(server)\\n\\t\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(virus, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\n\\t\\t// TODO: Run virus on vulnerable server(s) against selected target server(s)\\n\\t\\n\\t// TODO: Determine highest value targetable server (Profile hacking targets)\\n\\t// TODO: Target most valuable servers (make a list)\\n\\t\\t// Then send out `hack` command to all vulnerable servers targeting X server\\n\\t// ns.print(`Hacking ${targetServer}`);\\n\\t// await ns.hack(targetServer);\\n\\t// await ns.grow(targetServer);\\n\\t// await ns.weaken(targetServer);\\n\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\n\\n// TODO: Determine highest value targetable server (Profile hacking targets)\\nexport async function profileTargets(ns) {\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\t// For now, we're just going with the highest dollar amount :P\\n\\t\\tif (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(server)){\\n\\t\\t\\tif(topTargets.length < 5 && !topTargets.includes(server)){\\n\\t\\t\\t\\ttopTargets.push(server);\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tfor (let i = 0; i < topTargets.length; i++) {\\n\\t\\t\\t\\t\\tif(ns.getServerMaxMoney(topTargets[i]) < ns.getServerMaxMoney(server) && !topTargets.includes(server)){\\n\\t\\t\\t\\t\\t\\ttopTargets[i] = server;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// let server = vulnerableServers[index];\\n\\t// \\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\t// \\tlet hackSuccessChance = ns.hackSuccessChance(server);\\n\\t// \\t// let threadScale = threadsUsed\\n\\t// \\tlet weakenTime = security/weakenProgress\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(virus);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif(maxThreadCount <= 0){\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t}else{\\n\\t\\t\\tswitch(topTargets.length){\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(virus, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet home = \\\"home\\\";\\n\\tlet homeThreadCount =  Math.floor((ns.getServerMaxRam(home) - ns.getServerUsedRam(home)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch(topTargets.length){\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\",\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/crackme.js\",\"url\":\"blob:file:///bb9f2541-c77f-45a6-bf6e-072d3fb728a6\",\"moduleSequenceNumber\":41157}],\"dependents\":[],\"ramUsage\":5.2,\"server\":\"home\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Servers to check through for value/hacking list\\nlet vulnerableServers = []\\nlet exploits = 0;\\n\\n// For traversal\\nlet queuedServers = []\\nlet traversedServers = [\\\"home\\\"]\\n\\nexport async function main(ns) {\\n\\tawait countExploits();\\n\\t\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\n\\t// Evaluating Servers & Cracking them!\\n\\twhile (queuedServers.length > 0){\\n\\t\\tlet server = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\")){\\n\\t\\texploits++;\\n\\t}\\n}\\n\\nexport async function processServer(ns, server) {\\n\\tif(!ns.hasRootAccess(server)){\\n\\t\\t// Attempt to crack\\n\\t\\tif(ns.getServerNumPortsRequired(server) <= exploits)\\n\\t\\ttry{\\n\\t\\t\\tswitch (ns.getServerNumPortsRequired(server)){\\n\\t\\t\\tcase 5:\\n\\t\\t\\t\\tns.sqlinject(server)\\n\\t\\t\\tcase 4:\\n\\t\\t\\t\\tns.httpworm(server)\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tns.relaysmtp(server)\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tns.ftpcrack(server)\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tns.brutessh(server)\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tns.nuke(server)\\n\\t\\t\\t}\\n\\t\\t}catch{\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t}\\n\\n\\t\\tif(ns.hasRootAccess(server)){\\n\\t\\t\\tlet subServers = scan(server)\\n\\t\\t\\tfor (let index = 0; index < subServers.length; ++index) {\\n\\t\\t\\t\\tlet subServer = subServers[index];\\n\\t\\t\\t\\tif (!traversedServers.includes(subServer)){\\n\\t\\t\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/tryCrackAll.js\",\"url\":\"blob:file:///d31df9bb-5e5a-4fcd-9aed-bd62053860fa\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\n\\tTODO: Make this Virus intelligent!\\n */\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\tawait ns.weaken(targets[index])\\n\\t\\t\\tawait ns.grow(targets[index])\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/SimpleScripts/virus.js\",\"url\":\"blob:file:///b4bc4e06-ebe2-4738-b43a-f96d5fe190be\",\"moduleSequenceNumber\":41740}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]]\\n\\twhile(targets.length > 0){\\n\\t\\t// targets.forEach(target =>{\\n\\t\\t// \\tns.weaken(target)\\n\\t\\t// \\tns.grow(target)\\n\\t\\t// \\tns.hack(target);\\n\\t\\t// });\\n\\t\\tfor (let index = 0; index < targets.length; index++) {\\n\\t\\t\\t// await ns.weaken(target)\\n\\t\\t\\t// await ns.grow(target)\\n\\t\\t\\tawait ns.hack(targets[index]);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME, MAX_SERVER_RAM, MAX_SERVER_COST\\n} from \\\"lib/customConstants.js\\\";\\nimport infectVulnerableServer from \\\"infect.js\\\";\\nconst LVL = 0;\\nconst RAM = 1;\\nconst CORE = 2;\\nconst DEATH_MSG = \\\"AUTO_NET\\\"\\nvar serverIter = 0;\\n\\nexport async function main(ns) {\\n\\tlet paused = false;\\n\\twhile (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n\\t\\tswitch (ns.readPort(AUTO_NODE_INBOUND_PORT)) {\\n\\t\\t\\tcase PAUSE:\\n\\t\\t\\t\\tpaused = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase UNPAUSE:\\n\\t\\t\\t\\tpaused = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase KILL:\\n\\t\\t\\t\\tns.tryWritePort(CONTROL_INBOUND_PORT, DEATH_MSG)\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (!paused) {\\n\\t\\t\\tif (!checkServerPurchase(ns)) {\\n\\t\\t\\t\\tlet newNodeRatio = await calcNewNodeValueRatio(ns);\\n\\n\\t\\t\\t\\t// Find highest ratio from all current nodes!\\n\\t\\t\\t\\tlet bestNodeToUpgrade = -1;\\n\\t\\t\\t\\tlet bestProperty = -1; // 0-2 are level, ram, and core\\n\\t\\t\\t\\tlet bestRatio = 0;\\n\\t\\t\\t\\tlet lvlRatio;\\n\\t\\t\\t\\tlet ramRatio;\\n\\t\\t\\t\\tlet coreRatio;\\n\\t\\t\\t\\t// Finds the best upgrade value amongst existing nodes\\n\\t\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\t\\tlvlRatio = await calcLevelUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\t\\tramRatio = await calcRamUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\t\\tcoreRatio = await calcCoreUpgradeValueRatio(ns, i);\\n\\t\\t\\t\\t\\t// ns.print(`Node${i}: lvl:${lvlRatio}, ram:${ramRatio}, core:${coreRatio}`);\\n\\t\\t\\t\\t\\tif (lvlRatio > ramRatio && lvlRatio > coreRatio) {\\n\\t\\t\\t\\t\\t\\t// Lvl ratio is the highest for this node\\n\\t\\t\\t\\t\\t\\tif (lvlRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\t\\tbestRatio = lvlRatio;\\n\\t\\t\\t\\t\\t\\t\\tbestProperty = LVL;\\n\\t\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} else if (ramRatio > coreRatio) {\\n\\t\\t\\t\\t\\t\\t// Ram ratio is the highest for this node\\n\\t\\t\\t\\t\\t\\tif (ramRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\t\\tbestRatio = ramRatio;\\n\\t\\t\\t\\t\\t\\t\\tbestProperty = RAM;\\n\\t\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t// Core ratio is the highest for this node\\n\\t\\t\\t\\t\\t\\tif (coreRatio > bestRatio) {\\n\\t\\t\\t\\t\\t\\t\\tbestRatio = coreRatio;\\n\\t\\t\\t\\t\\t\\t\\tbestProperty = CORE;\\n\\t\\t\\t\\t\\t\\t\\tbestNodeToUpgrade = i;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Buys a new node or the best valued upgrade\\n\\t\\t\\t\\tlet bal = ns.getServerMoneyAvailable(HOME);\\n\\t\\t\\t\\t// ns.print(`NewNodw:${newNodeRatio} > BestRatio:${bestRatio}`)\\n\\t\\t\\t\\tif (newNodeRatio > bestRatio) {\\n\\t\\t\\t\\t\\t// Buy a new node!\\n\\t\\t\\t\\t\\tns.print(\\\"Trying to buy a new Node...\\\")\\n\\t\\t\\t\\t\\tif (ns.hacknet.getPurchaseNodeCost() < bal) {\\n\\t\\t\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\t\\t\\tns.print(\\\"Bought a new Node!\\\")\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tswitch (bestProperty) {\\n\\t\\t\\t\\t\\t\\tcase LVL:\\n\\t\\t\\t\\t\\t\\t\\tif (ns.hacknet.getLevelUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading LVL of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\tcase RAM:\\n\\t\\t\\t\\t\\t\\t\\tif (ns.hacknet.getRamUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeRam(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading RAM of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\tcase CORE:\\n\\t\\t\\t\\t\\t\\t\\tif (ns.hacknet.getCoreUpgradeCost(bestNodeToUpgrade) < bal) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.hacknet.upgradeCore(bestNodeToUpgrade);\\n\\t\\t\\t\\t\\t\\t\\t\\tns.print(`Upgrading CORES of node ${bestNodeToUpgrade}`)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\t\\tns.print(\\\"No best property chosen?\\\")\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.print(`Saving for server purchase...`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(\\\"50\\\");\\n\\t}\\n}\\n\\nexport async function findWeakestNode(ns) {\\n\\t// Returns the node that produces the least, i.e. needs to be upgraded\\n\\tlet weakest = 0;\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tif (ns.hacknet.getNodeStats(i).production < ns.hacknet.getNodeStats(weakest).production) {\\n\\t\\t\\tweakest = i;\\n\\t\\t}\\n\\t}\\n\\treturn weakest;\\n}\\n\\n// export async function calcAvgNodeProduction(ns) {\\n// \\t// Returns average production of current nodes\\n// }\\n\\n///\\n/// These functions translate the cost of the next upgrade to a ratio for comparison to see what is worth saving for\\n///\\nexport async function calcLevelUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getLevelUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await levelUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`lvl: ${lvl} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio\\n}\\n\\nexport async function calcRamUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getRamUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await ramUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\treturn ratio;\\n}\\n\\nexport async function calcCoreUpgradeValueRatio(ns, nodeNum) {\\n\\tlet cost = ns.hacknet.getCoreUpgradeCost(nodeNum, 1);\\n\\tlet lvl = await ns.hacknet.getNodeStats(nodeNum).level;\\n\\tlet ram = await ns.hacknet.getNodeStats(nodeNum).ram;\\n\\tlet core = await ns.hacknet.getNodeStats(nodeNum).cores;\\n\\tlet value = await coreUpgradeProfit(lvl, ram, core);\\n\\tlet ratio = value / cost;\\n\\t// ns.print(`core: ${core} cost:${cost}/ value:${value} = Ratio:${ratio}`);\\n\\treturn ratio;\\n}\\n\\nexport async function calcNewNodeValueRatio(ns) {\\n\\tlet totalHacknetNodeProduction = 0;\\n\\tlet numberOfNodes = await ns.hacknet.numNodes();\\n\\tfor (let i = 0; i < numberOfNodes; i++) {\\n\\t\\ttotalHacknetNodeProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\tlet valueRatio = (totalHacknetNodeProduction / numberOfNodes) / ns.hacknet.getPurchaseNodeCost();\\n\\t// ns.print(`valueRatio:${valueRatio}, totalProduction:${totalHacknetNodeProduction}, Node#${numberOfNodes}`)\\n\\tif (isNaN(valueRatio)) {\\n\\t\\tvalueRatio = 1;\\n\\t}\\n\\treturn valueRatio;\\n}\\n\\n///\\n/// Functions for gaining profit of lvl ups\\n///\\n\\nexport async function levelUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (1 * 1.5) * Math.pow(1.035, currentRam - 1) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function ramUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * (Math.pow(1.035, (2 * currentRam) - 1) - Math.pow(1.035, currentRam - 1)) * ((currentLevelCore + 5) / 6);\\n}\\nexport async function coreUpgradeProfit(currentLevel, currentRam, currentLevelCore) {\\n\\treturn (currentLevel * 1.5) * Math.pow(1.035, currentRam - 1) * (1 / 6);\\n}\\n\\n///\\n///\\tCase where we absolutely should just buy a new server instead!\\n/// Returns true if it is saving up for a purchase\\nfunction checkServerPurchase(ns) {\\n\\tlet serverCost = ns.getPurchasedServerCost(MAX_SERVER_RAM);\\n\\tif (serverCost < ns.hacknet.getPurchaseNodeCost()\\n\\t\\t&& ns.getPurchasedServerLimit() > ns.getPurchasedServers().length) {\\n\\t\\t// Attempt purchase\\n\\t\\tif (serverCost < ns.getServerMoneyAvailable(HOME)) {\\n\\t\\t\\tlet serverName = `alpha-${serverIter}`;\\n\\t\\t\\twhile (ns.serverExists(serverName)) {\\n\\t\\t\\t\\tserverIter++;\\n\\t\\t\\t\\tserverName = `alpha-${serverIter}`;\\n\\t\\t\\t}\\n\\t\\t\\tns.purchaseServer(serverName, MAX_SERVER_RAM);\\n\\t\\t\\tns.print(`PURCHASED: ${serverName}`)\\n\\t\\t\\tinfectVulnerableServer(ns, serverName);\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/deployingScript.js\",\"url\":\"blob:file:///6cd56301-417f-4f56-ad56-a7814a5ef482\",\"moduleSequenceNumber\":162633},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///1a0c803c-6632-47d0-8ba9-ec69d353bd6c\",\"moduleSequenceNumber\":189546},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///22f856b3-8f46-44f9-a505-3d966cc94d47\",\"moduleSequenceNumber\":206269},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///1c47bfd4-0d45-4558-a36d-5ee1428fd531\",\"moduleSequenceNumber\":189546},{\"filename\":\"infect.js\",\"url\":\"blob:file:///a3628dca-12b6-45a6-9d46-24f12c3b49fd\",\"moduleSequenceNumber\":210011},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///9ed7aac1-99da-4706-9fe8-9cce4352e7e9\",\"moduleSequenceNumber\":189546},{\"filename\":\"/SimpleScripts/autoNet.js\",\"url\":\"blob:file:///2aea8873-d6c6-4381-8a0e-ad61de8beced\",\"moduleSequenceNumber\":210012}],\"dependents\":[],\"ramUsage\":11.2,\"server\":\"alpha-1\",\"moduleSequenceNumber\":210012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hackPercent(server, player){\\n \\n    const balanceFactor = 240;\\n    const difficultyMult = (100 - server.hackDifficulty) / 100;\\n    const skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n    const percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / balanceFactor;\\n    if (percentMoneyHacked < 0) {\\n      return 0;\\n    }\\n    if (percentMoneyHacked > 1) {\\n      return 1;\\n    }\\n    return percentMoneyHacked * 1//BitNodeMultipliers.ScriptHackMoney;\\n}\\n \\nexport function growPercent(server, threads, player, cores = 1) {\\n \\n    const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n    const growthRate = 1.03//CONSTANTS.ServerBaseGrowthRate;\\n    let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n    if (adjGrowthRate > 1.0035/*CONSTANTS.ServerMaxGrowthRate*/) {\\n        adjGrowthRate = 1.0035/*CONSTANTS.ServerMaxGrowthRate*/;\\n    }\\n    const serverGrowthPercentage = server.serverGrowth / 100;\\n    const numServerGrowthCyclesAdjusted =\\n        numServerGrowthCycles * serverGrowthPercentage * 1//BitNodeMultipliers.ServerGrowthRate;\\n    const coreBonus = 1 + (cores - 1) / 16;\\n    return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.hacking_grow_mult * coreBonus);\\n}\\n \\nexport function weakenTime(server, player) {\\n \\n    const weakenTimeMultiplier = 4;\\n    return weakenTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function growTime(server, player) {\\n \\n    const growTimeMultiplier = 3.2;\\n    return growTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function hackTime(server, player) {\\n \\n    return utilCalculateHackingTime(server,player) * 1000;\\n}\\n \\nfunction utilCalculateIntelligenceBonus(intelligence, weight = 1) {\\n    return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n \\nfunction utilCalculateHackingTime(server, player) {\\n    \\n    const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n    const baseDiff = 500;\\n    const baseSkill = 50;\\n    const diffFactor = 2.5;\\n    let skillFactor = diffFactor * difficultyMult + baseDiff;\\n    skillFactor /= player.hacking + baseSkill;\\n    const hackTimeMultiplier = 5;\\n    const hackingTime =\\n        (hackTimeMultiplier * skillFactor) /\\n        (player.hacking_speed_mult * utilCalculateIntelligenceBonus(player.intelligence, 1));\\n    return hackingTime;\\n}\",\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as formulasFacade from '/SimpleScripts/formulasHackingFacade.js',\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// TODO: Only use formulasFacade if formulas.exe is missing.\\n\\tx = formulasFacade.hackTime(fserver, player)\\n}\",\"filename\":\"/SimpleScripts/wirus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":257}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nvar server = ns.args[0];   //Host to hack\\nvar server2 = ns.getHostname(); //Server to run scripts on\\nvar i=0;\\nvar c=0;\\nvar player = ns.getPlayer();\\nvar fserver = ns.getServer(server);\\nvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.ns\\\"); //grabbing script RAM values\\nvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\nvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\nvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\nvar maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\nvar weakenThreads = (2000-((ns.getServerMinSecurityLevel(server))/0.05));\\nvar maxGrowThreads = ((maxRam/growscriptRam)-(weakenscriptRam*2000));\\nvar cs = ns.getServerSecurityLevel(server);\\nvar ms = ns.getServerMinSecurityLevel(server);\\nvar mm = ns.getServerMaxMoney(server);\\nvar ma = ns.getServerMoneyAvailable(server);\\n \\n \\n \\n//Priming the server.  Max money and Min security must be acheived for this to work\\nif ((ma < mm)==true)\\n{\\nns.exec('/newserver/weaken.js',server2,2000,server,0);\\nns.exec('/newserver/grow.js',server2,maxGrowThreads,server,0);\\nvar WeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\nmm = ns.getServerMaxMoney(server);\\nma = ns.getServerMoneyAvailable(server);\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n \\n//If Max Money is true, making sure security level is at its minimum\\nif((cs>ms)==true)\\n{\\n \\nns.exec('/newserver/weaken.js',server2,2000,server,0);\\nWeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n//Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\n \\nvar HPercent = (ns.formulas.hacking.hackPercent(fserver,player)*100);\\nvar GPercent = (ns.formulas.hacking.growPercent(fserver,1,player,1));\\nWeakenTime = (ns.formulas.hacking.weakenTime(fserver,player));\\nvar GrowTime = (ns.formulas.hacking.growTime(fserver,player));\\nvar HackTime = (ns.formulas.hacking.hackTime(fserver,player));\\n \\nvar growThreads = Math.round(((5/(GPercent-1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\nvar hackThreads = Math.round((50/HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\nweakenThreads = Math.round((weakenThreads - (growThreads*0.004))); //Getting required threads to fully weaken the server\\n \\nvar totalRamForRun = (hackscriptRam*hackThreads)+(growscriptRam*growThreads)+(weakenscriptRam*weakenThreads) //Calculating how much RAM is used for a single run\\nvar sleepTime = (WeakenTime/(maxRam/totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n \\n//if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n//{sleepTime = 500;\\n//}\\n \\nvar shiftCount = maxRam/totalRamForRun;\\nvar offset = sleepTime/2\\nvar gOffset = offset/4\\nvar hOffset = offset/2\\n \\n \\nwhile(true)\\n {  \\n     var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n     var gsleep = ((WeakenTime - GrowTime-gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n     var hsleep = ((WeakenTime - HackTime-hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n     var UsedRam = ns.getServerUsedRam(server2);\\n    \\n \\n    if((totalRamForRun>= (maxRam-UsedRam))==false) //making sure I have enough RAM to do a full run\\n    {\\n    ns.exec('/newserver/weaken.js',server2,weakenThreads,server,wsleep,i);\\n    ns.exec('/newserver/grow.js',server2,growThreads,server,gsleep,i);\\n    ns.exec('/newserver/hack.js',server2,hackThreads,server,hsleep,i);\\n    \\n    if (c<shiftCount)\\n    {await ns.sleep(sleepTime)\\n    c++\\n    }\\n    else\\n    {\\n       await ns.sleep(sleepTime+offset);\\n       c=0;\\n    }\\n    \\n    \\n    i++\\n    }\\n    else{\\n       await ns.sleep(1000) \\n    }\\n }\\n await ns.sleep(120000)\\n}\",\"filename\":\"/newserver/OpsScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst HOME = \\\"home\\\"\\n\\tvar serverName = ns.args[0]; // This way it can be used in other scripts?\\n\\tvar maxAffordableRamSize = 2;\\n\\tvar powerIter = 1;\\n\\tvar lastAffordableRamSize = maxAffordableRamSize;\\n\\tvar currentServerSizeCost = ns.getPurchasedServerCost(maxAffordableRamSize);\\n\\twhile(currentServerSizeCost < ns.getServerMoneyAvailable(HOME)){\\n\\t\\tlastAffordableRamSize = maxAffordableRamSize;\\n\\t\\tmaxAffordableRamSize = Math.pow(2, powerIter);\\n\\t\\tpowerIter++;\\n\\t\\tcurrentServerSizeCost = ns.getPurchasedServerCost(maxAffordableRamSize);\\n\\t}\\n\\tns.print(`Purchasing ${lastAffordableRamSize} for \\\\$${ns.getPurchasedServerCost(lastAffordableRamSize)}`)\\n\\tns.print(`Couldn't afford ${maxAffordableRamSize}ram for \\\\$${ns.getPurchasedServerCost(maxAffordableRamSize)}.`)\\n\\tns.purchaseServer(serverName, lastAffordableRamSize);\\n\\tawait ns.sleep(100000)\\n}\",\"filename\":\"/SimpleScripts/buyMaxServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/SimpleScripts/buyMaxServer.js\",\"url\":\"blob:file:///2604dc0b-163e-4ddf-9fdc-00de58ee3f0b\",\"moduleSequenceNumber\":138798}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":138798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nvar server = ns.args[0];   //Host to hack\\nvar server2 = ns.getHostname(); //Server to run scripts on\\nvar i=0;\\nvar c=0;\\nvar player = ns.getPlayer();\\nvar fserver = ns.getServer(server);\\nvar contstantRam = ns.getScriptRam(\\\"/newserver/OpsScript.js\\\"); //grabbing script RAM values\\nvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\nvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\nvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\nvar maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n// ns.print(`ServerSecurity:${ns.getServerSecurityLevel(server)} - MinSecurity:${((ns.getServerMinSecurityLevel(server))/0.05)}`)\\n// var weakenThreads = (ns.getServerSecurityLevel(server)-((ns.getServerMinSecurityLevel(server))/0.05));\\nvar weakenThreads = (ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)) / 0.05;\\n// var maxGrowThreads = ((maxRam/growscriptRam)-(weakenscriptRam*2000));\\nvar maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * weakenThreads));\\nvar cs = ns.getServerSecurityLevel(server);\\nvar ms = ns.getServerMinSecurityLevel(server);\\nvar mm = ns.getServerMaxMoney(server);\\nvar ma = ns.getServerMoneyAvailable(server);\\n\\n// ns.print(`Security:${ns.getServerMinSecurityLevel(server)}, hackscriptRam:${hackscriptRam}, weakenThreads:${weakenThreads}`)\\n// ns.print(`Growth threads:${maxGrowThreads}`)\\nif(weakenThreads < 1){ weakenThreads = 1}\\n \\n \\n//Priming the server.  Max money and Min security must be acheived for this to work\\nif ((ma < mm)==true)\\n{\\nns.exec('/newserver/weaken.js',server2,weakenThreads,server,0);\\nns.exec('/newserver/grow.js',server2,maxGrowThreads,server,0);\\nvar WeakenTime = (weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\nmm = ns.getServerMaxMoney(server);\\nma = ns.getServerMoneyAvailable(server);\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n \\n//If Max Money is true, making sure security level is at its minimum\\nif((cs>ms)==true)\\n{\\n \\nns.exec('/newserver/weaken.js',server2,weakenThreads,server,0);\\nWeakenTime = (weakenTime(fserver,player));\\nawait ns.sleep(WeakenTime+1000);\\ncs = ns.getServerSecurityLevel(server);\\nms = ns.getServerMinSecurityLevel(server);\\n \\n}\\n \\n//Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\nplayer = ns.getPlayer();\\nfserver = ns.getServer(server);\\n \\nvar HPercent = (hackPercent(fserver,player)*100);\\nvar GPercent = (growPercent(fserver,1,player,1));\\nWeakenTime = (weakenTime(fserver,player));\\nvar GrowTime = (growTime(fserver,player));\\nvar HackTime = (hackTime(fserver,player));\\n \\nvar growThreads = Math.round(((5/(GPercent-1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\nvar hackThreads = Math.round((50/HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\nweakenThreads = Math.round((weakenThreads - (growThreads*0.004))); //Getting required threads to fully weaken the server\\n \\nvar totalRamForRun = (hackscriptRam*hackThreads)+(growscriptRam*growThreads)+(weakenscriptRam*weakenThreads) //Calculating how much RAM is used for a single run\\nvar sleepTime = (WeakenTime/(maxRam/totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n \\n//if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n//{sleepTime = 500;\\n//}\\n \\nvar shiftCount = maxRam/totalRamForRun;\\nvar offset = sleepTime/2\\nvar gOffset = offset/4\\nvar hOffset = offset/2\\n \\n \\nwhile(true)\\n {  \\n     var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n     var gsleep = ((WeakenTime - GrowTime-gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n     var hsleep = ((WeakenTime - HackTime-hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n     var UsedRam = ns.getServerUsedRam(server2);\\n    \\n \\n    if((totalRamForRun>= (maxRam-UsedRam))==false) //making sure I have enough RAM to do a full run\\n    {\\n    ns.exec('/newserver/weaken.js',server2,weakenThreads,server,wsleep,i);\\n    ns.exec('/newserver/grow.js',server2,growThreads,server,gsleep,i);\\n    ns.exec('/newserver/hack.js',server2,hackThreads,server,hsleep,i);\\n    \\n    if (c<shiftCount)\\n    {await ns.sleep(sleepTime)\\n    c++\\n    }\\n    else\\n    {\\n       await ns.sleep(sleepTime+offset);\\n       c=0;\\n    }\\n    \\n    \\n    i++\\n    }\\n    else{\\n       await ns.sleep(1000) \\n    }\\n }\\n await ns.sleep(120000)\\n}\\n\\nexport function hackPercent(server, player){\\n \\n    const balanceFactor = 240;\\n    const difficultyMult = (100 - server.hackDifficulty) / 100;\\n    const skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n    const percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / balanceFactor;\\n    if (percentMoneyHacked < 0) {\\n      return 0;\\n    }\\n    if (percentMoneyHacked > 1) {\\n      return 1;\\n    }\\n    return percentMoneyHacked * 1//BitNodeMultipliers.ScriptHackMoney;\\n}\\n\\n\\nexport function growPercent(server, threads, player, cores = 1) {\\n \\n    const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n    const growthRate = 1.03//CONSTANTS.ServerBaseGrowthRate;\\n    let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n    if (adjGrowthRate > 1.0035/*CONSTANTS.ServerMaxGrowthRate*/) {\\n        adjGrowthRate = 1.0035/*CONSTANTS.ServerMaxGrowthRate*/;\\n    }\\n    const serverGrowthPercentage = server.serverGrowth / 100;\\n    const numServerGrowthCyclesAdjusted =\\n        numServerGrowthCycles * serverGrowthPercentage * 1//BitNodeMultipliers.ServerGrowthRate;\\n    const coreBonus = 1 + (cores - 1) / 16;\\n    return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.hacking_grow_mult * coreBonus);\\n}\\n \\nexport function weakenTime(server, player) {\\n \\n    const weakenTimeMultiplier = 4;\\n    return weakenTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function growTime(server, player) {\\n \\n    const growTimeMultiplier = 3.2;\\n    return growTimeMultiplier * utilCalculateHackingTime(server, player) * 1000;\\n}\\n \\nexport function hackTime(server, player) {\\n \\n    return utilCalculateHackingTime(server,player) * 1000;\\n}\\n \\nfunction utilCalculateIntelligenceBonus(intelligence, weight = 1) {\\n    return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n \\nfunction utilCalculateHackingTime(server, player) {\\n    \\n    const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n    const baseDiff = 500;\\n    const baseSkill = 50;\\n    const diffFactor = 2.5;\\n    let skillFactor = diffFactor * difficultyMult + baseDiff;\\n    skillFactor /= player.hacking + baseSkill;\\n    const hackTimeMultiplier = 5;\\n    const hackingTime =\\n        (hackTimeMultiplier * skillFactor) /\\n        (player.hacking_speed_mult * utilCalculateIntelligenceBonus(player.intelligence, 1));\\n    return hackingTime;\\n}\",\"filename\":\"/SimpleScripts/OPsScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"alpha-2\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The goal here is to make a usable priority queue for usage in other functions.\\n// Credit for code used for priority queue goes to: https://www.geeksforgeeks.org/implementation-priority-queue-javascript/\\n\\n// User defined class to store element and its priority\\nexport class QElement {\\n\\tconstructor(element, priority) {\\n\\t\\tthis.element = element;\\n\\t\\tthis.priority = priority;\\n\\t}\\n}\\n\\n// PriorityQueue class\\nexport default class PriorityQueue {\\n\\n\\t// An array is used to implement priority\\n\\tconstructor() {\\n\\t\\tthis.items = [];\\n\\t}\\n\\n\\t// functions to be implemented enqueue function to add element to the queue as per priority\\n\\tenqueue(element, priority) {\\n\\t\\t// creating object from queue element\\n\\t\\tvar qElement = new QElement(element, priority);\\n\\t\\tvar contain = false;\\n\\n\\t\\t// iterating through the entire item array to add element at the correct location of the Queue\\n\\t\\tfor (var i = 0; i < this.items.length; i++) {\\n\\t\\t\\tif (this.items[i].priority > qElement.priority) {\\n\\t\\t\\t\\t// Once the correct location is found it is\\n\\t\\t\\t\\t// enqueued\\n\\t\\t\\t\\tthis.items.splice(i, 0, qElement);\\n\\t\\t\\t\\tcontain = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// if the element have the highest priority it is added at the end of the queue\\n\\t\\tif (!contain) {\\n\\t\\t\\tthis.items.push(qElement);\\n\\t\\t}\\n\\t}\\n\\n\\t// dequeue method to remove element from the queue\\n\\tdequeue() {\\n\\t\\t// return the dequeued element and remove it. if the queue is empty returns Underflow\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"Underflow\\\";\\n\\t\\treturn this.items.shift();\\n\\t}\\n\\n\\t// front function\\n\\tfront() {\\n\\t\\t// returns the highest priority element in the Priority queue without removing it.\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"No elements in Queue\\\";\\n\\t\\treturn this.items[0];\\n\\t}\\n\\n\\t// rear function\\n\\trear() {\\n\\t\\t// returns the lowest priority element of the queue\\n\\t\\tif (this.isEmpty())\\n\\t\\t\\treturn \\\"No elements in Queue\\\";\\n\\t\\treturn this.items[this.items.length - 1];\\n\\t}\\n\\n\\t// isEmpty function\\n\\tisEmpty() {\\n\\t\\t// return true if the queue is empty.\\n\\t\\treturn this.items.length == 0;\\n\\t}\\n\\n\\t// printQueue function\\n\\t// prints all the element of the queue\\n\\tprintPQueue() {\\n\\t\\tvar str = \\\"\\\";\\n\\t\\tfor (var i = 0; i < this.items.length; i++)\\n\\t\\t\\tstr += this.items[i].element + \\\" \\\";\\n\\t\\treturn str;\\n\\t}\\n\\n}\",\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default class ServerNode {\\n\\n\\tconstructor(name, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, servers) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.hackLvlReq = hackLvlReq;\\n\\t\\tthis.reqPorts = reqPorts;\\n\\t\\tthis.exploited = exploited;\\n\\t\\tthis.traversed = traversed;\\n\\t\\tthis.hasCCT = hasCCT;\\n\\t\\tthis.cctName; // Probably want to include what type it is, catagorize it, solve, somehow later down the line.\\n\\t\\t// this.maxRam = maxRam;\\n\\t\\t// this.freeRam; // Consider tracking usedRam instead? [Add when running script, remove on completed (will need to await)]\\n\\t\\tthis.reservedRam = 0;\\n\\t\\tthis.adjServerNodes = servers;\\n\\t\\tthis.primingWillBeCompletedByTimeStamp = 0;\\n\\t}\\n\\n\\tgetName() {\\n\\t\\treturn this.name;\\n\\t}\\n\\n\\tgetExploitsReq() {\\n\\t\\treturn this.reqPorts;\\n\\t}\\n\\n\\tsetExploited() {\\n\\t\\tthis.exploited = true;\\n\\t}\\n\\tisExploited() {\\n\\t\\treturn this.exploited;\\n\\t}\\n\\n\\tgetReqHackLvl() {\\n\\t\\treturn this.hackLvlReq;\\n\\t}\\n\\n\\treserveRam(ram) {\\n\\t\\tthis.reservedRam += ram;\\n\\t}\\n\\tfreeRam(ram) {\\n\\t\\tthis.reservedRam -= ram;\\n\\t}\\n\\n\\tsetPriming(delay) {\\n\\t\\tthis.primingWillBeCompletedByTimeStamp = Date.now() + delay;\\n\\t}\\n\\tisPriming() {\\n\\t\\tif (this.primingWillBeCompletedByTimeStamp > Date.now()) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tgetPrimingTimeStamp(){\\n\\t\\treturn this.primingWillBeCompletedByTimeStamp;\\n\\t}\\n\\n\\t// TODO: Account for RAM usage/calculation & reservation for optimizing script usage!\\n\\t// When executing a script on the given server, add it to the usedRam value here, as well as a handle for the\\n\\t// script that was ran (so it can be killed? Or so it can be tracked?)\\n\\t// Ideally I'd like to spawn these exec's off as threads, such that when they are completed, that RAM is 'freed' here.\\n\\t// \\t\\t- This would mean calling back to the controlScript from the exec'd script.\\n\\t// Alternatively, if we know exactly how much time it's going to take, we can free the RAM after that amount of time.\\n\\n\\t// The proper method to do this would be using Netscript PORTS! (OR javascript sockets I guess if I wanted to cheat)\\n}\",\"filename\":\"/lib/ServerNode.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Common constants\\nexport const HOME = \\\"home\\\";\\nexport const MAX_SERVER_RAM = 1048576;\\nexport const MAX_SERVER_COST = 57671680000;\\n// Common script names\\nexport const WEAKEN = \\\"/lib/weaken.js\\\";\\nexport const GROW = \\\"/lib/grow.js\\\";\\nexport const HACK = \\\"/lib/hack.js\\\";\\nexport const VIRUS = \\\"/SimpleScripts/virus.js\\\"\\n\\nexport const CCT_MAP = new Map(\\n\\t[\\n\\t\\t[\\\"Find Largest Prime Factor\\\", \\\"cctSolutions/findLargestPrimeFactor.js\\\"],\\t\\t\\t// Solved\\n\\t\\t[\\\"Total Ways to Sum\\\", \\\"cctSolutions/totalWaysToSum.js\\\"],\\n\\t\\t[\\\"Array Jumping Game\\\", \\\"cctSolutions/arrayJumpingGame.js\\\"],\\n\\t\\t[\\\"Algorithmic Stock Trader I\\\", \\\"cctSolutions/algorithmicStockTrader.js\\\"],\\n\\t\\t[\\\"Algorithmic Stock Trader II\\\", \\\"cctSolutions/algorithmicStockTrader.js\\\"],\\n\\t\\t[\\\"Algorithmic Stock Trader III\\\", \\\"cctSolutions/algorithmicStockTrader.js\\\"],\\n\\t\\t[\\\"Algorithmic Stock Trader IV\\\", \\\"cctSolutions/algorithmicStockTrader.js\\\"],\\n\\t\\t[\\\"Unique Paths in a Grid I\\\", \\\"cctSolutions/uniquePathsInGrid.js\\\"],\\n\\t\\t[\\\"Unique Paths in a Grid II\\\", \\\"cctSolutions/uniquePathsInGrid.js\\\"],\\n\\t\\t[\\\"Find All Valid Math Expressions\\\", \\\"cctSolutions/findAllValidMathExpressions.js\\\"],\\n\\t\\t[\\\"Merge Overlapping Intervals\\\", \\\"cctSolutions/mergeOverlappingIntervals.js\\\"],\\n\\t\\t[\\\"Sanitize Parentheses in Expression\\\", \\\"cctSolutions/sanitizeParentheses.js\\\"],\\n\\t\\t[\\\"Spiralize Matrix\\\", \\\"cctSolutions/spiralizeMatrix.js\\\"],\\n\\t\\t[\\\"Generate IP Addresses\\\", \\\"cctSolutions/generateIpAddresses.js\\\"],\\n\\t\\t[\\\"Subarray with Maximum Sum\\\", \\\"cctSolutions/subarrayWithMaximumSum.js\\\"],\\n\\t\\t[\\\"Minimum Path Sum in a Triangle\\\", \\\"cctSolutions/minimumPathSumInATriangle.js\\\"]\\n\\t]\\n);\\n\\n// Port labels\\nexport const CONTROL_INBOUND_PORT = 0;\\nexport const AUTO_NODE_INBOUND_PORT = 20\\n// Port commands\\nexport const PAUSE = \\\"PAUSE\\\";\\nexport const UNPAUSE = \\\"UNPAUSE\\\"\\nexport const KILL = \\\"KILL\\\";\\n\\n// Server Lists\\nexport const SERVER_LIST = [\\n\\t\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\",\\n\\t\\\"darkweb\\\", \\\"zer0\\\", \\\"nectar-net\\\", \\\"max-hardware\\\", \\\"CSEC\\\", \\\"neo-net\\\", \\\"silver-helix\\\", \\\"phantasy\\\", \\\"omega-net\\\",\\n\\t\\\"the-hub\\\", \\\"johnson-ortho\\\", \\\"avmnite-02h\\\", \\\"comptek\\\", \\\"crush-fitness\\\", \\\"netlink\\\", \\\"syscore\\\", \\\"summit-uni\\\",\\n\\t\\\"rothman-uni\\\", \\\"catalyst\\\", \\\"zb-institute\\\", \\\"I.I.I.I\\\", \\\"rho-construction\\\", \\\"alpha-ent\\\", \\\"millenium-fitness\\\",\\n\\t\\\"aevum-police\\\", \\\"lexo-corp\\\", \\\"aerocorp\\\", \\\"galactic-cyber\\\", \\\"global-pharm\\\", \\\"snap-fitness\\\", \\\"deltaone\\\",\\n\\t\\\"unitalife\\\", \\\"omnia\\\", \\\"icarus\\\", \\\"univ-energy\\\", \\\"solaris\\\", \\\"defcomm\\\", \\\"zeus-med\\\", \\\"infocomm\\\", \\\"taiyang-digital\\\",\\n\\t\\\"zb-def\\\", \\\"nova-med\\\", \\\"microdyne\\\", \\\"applied-energetics\\\", \\\"run4theh111z\\\", \\\"titan-labs\\\", \\\"stormtech\\\", \\\"helios\\\",\\n\\t\\\"fulcrumtech\\\", \\\"vitalife\\\", \\\"omnitek\\\", \\\"4sigma\\\", \\\"kuai-gong\\\", \\\".\\\", \\\"blade\\\", \\\"clarkinc\\\", \\\"nwo\\\", \\\"b-and-a\\\",\\n\\t\\\"powerhouse-fitness\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"The-Cave\\\", \\\"megacorp\\\"] \\n\\t// Need some way of adding \\\"Alpha servers\\\", aka the ones I buy...\",\"filename\":\"/lib/customConstants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":189546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO: Make this the ultimate controll script!\\n * The goal of this script is to basically be a glorified events manager.\\n * \\n * [] The contractSolver will ideally automatically solve contracts, and noify me of their completion, so I can choose rep or $$$.\\n * - Requires 5b API from darkweb to run.\\n * - Could check for that too when counting executables!\\n * \\t\\t- When we first detect it, we should launch the cctScript if it isn't already running\\n * [] Now I just need to actually solve them all!\\n * // Would be nice if we had a list of known servers we need to backdoor for FACTIONS, so it would give a toast notification!\\n */\\n\\n/**\\n * [] Start breaking down my monolithic script into smaller bits for easier debugging!\\n */\\nimport PriorityQueue from \\\"lib/PriorityQueue.js\\\";\\nimport ServerNode from \\\"lib/ServerNode.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK,\\n\\tSERVER_LIST\\n} from \\\"lib/customConstants.js\\\";\\nimport {\\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n} from \\\"lib/formulasHackingFacade.js\\\";\\n\\n// import Bucket from \\\"lib/Bucket.js\\\";\\nvar player;\\nvar serverMap;\\nvar controlCycle;\\n// Servers to check through for value/hacking list\\nvar vulnerableServers; // List of servers that have already been cracked (Possibly not hackable yet)\\nvar serversToExploit;\\nvar hackableServers;\\nvar notHackableServers;\\nvar topTargets;\\nvar exploits;\\n// For traversal\\nlet queuedServers;\\nlet traversedServers;\\n\\n// Function labels for control cycle\\nconst EXPLOIT_CHECK = 0;\\nconst LVL_UP_CHECK = 1;\\nconst PRIME_ATTACK = 2;\\n\\n// Timers\\nvar lastAvailableExploitsCheck;\\n\\n//Player stats to listen to\\nvar hackingLvl;\\nvar ns2;\\n\\nasync function init(ns) {\\n\\tns2 = ns;\\n\\tplayer = ns.getPlayer();\\n\\t// If need be, could make an \\\"Event\\\" wrapper class that is the function, \\n\\t// UUID(name, effectively), and other useful vars for ordering.\\n\\n\\t// High level functions for the main control loop!\\n\\t// Can be inserted & removed as deemed necessary!\\n\\n\\tcontrolCycle = new Map();\\n\\tcontrolCycle.set(EXPLOIT_CHECK, function (ns) { exploitCheck(ns) });\\n\\tcontrolCycle.set(LVL_UP_CHECK, function (ns) { levelUpCheck(ns) });\\n\\t// controlCycle.set(EVALUATE_TARGETS, function (ns) { primeHackableServers(ns) });\\n\\tcontrolCycle.set(PRIME_ATTACK, function (ns) { multiStaggeredHack(ns) });\\n\\t// controlCycle.set() //Idk, X_PORT_LISTEN maybe? (I.E. for Node, when that is useful...)\\n\\t// Additional EventQueue?\\n\\tserverMap = new Map();\\n\\tvulnerableServers = [HOME];\\n\\tserversToExploit = new PriorityQueue(); // Prioritized by # of exploits required\\n\\texploits = 0;\\n\\n\\thackableServers = [];\\n\\tnotHackableServers = new PriorityQueue(); // Prioritized by min hacking level required\\n\\n\\ttopTargets = []\\n\\n\\tqueuedServers = []\\n\\ttraversedServers = [HOME]\\n\\tlastAvailableExploitsCheck = 0;\\n\\thackingLvl = 1;\\n}\\n\\nexport async function main(ns) {\\n\\tinit(ns);\\n\\tcountExploits(ns);\\n\\t// Traversal should generate a list of all servers, ideally seperating them into hackable/notHackable\\n\\t// Evaluating Servers & Cracking them!\\n\\ttraverseServers(ns);\\n\\t// ns.print(`Servers: ${vulnerableServers}`)\\n\\tns.exec(\\\"infect.js\\\", HOME, 1);\\n\\n\\tlet running = true;\\n\\tlet iter = 0;\\n\\twhile (running) {\\n\\t\\tfor (let [key, value] of controlCycle.entries()) {\\n\\t\\t\\t// ns.print(`Key: ${key}, ${controlCycle.size}`)\\n\\t\\t\\tvalue(ns);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\n// INITIAL traversal of ALL servers, to split them up into catagories for future processing!\\n// Evaluating Servers & Cracking them!\\nasync function traverseServers(ns) {\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\t// ns.print(`Initial servers:${queuedServers}`)\\n\\tlet server;\\n\\twhile (queuedServers.length > 0) {\\n\\t\\tserver = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\t\\t// ns.print(`Traversing server: ${server}`)\\n\\n\\t\\tprocessServer(ns, server)\\n\\t}\\n}\\n\\nasync function levelUpCheck(ns) {\\n\\tns.print(\\\"Entered Level Up Check\\\")\\n\\tif (ns.getHackingLevel() !== hackingLvl) {\\n\\t\\thackingLvl = ns.getHackingLevel();\\n\\t\\t// Checks if there are no un-hackable servers remaining, will remove this from controlCycle\\n\\t\\tif (notHackableServers.length < 1) {\\n\\t\\t\\tcontrolCycle.delete(LVL_UP_CHECK);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Servers that are now hackable will be moved onto the hackable stack/list\\n\\t\\tlet server;\\n\\t\\twhile (serverMap.get(notHackableServers[0]).getReqHackLvl() <= hackingLvl && ns.hasRootAccess(notHackableServers[0])) {\\n\\t\\t\\tserver = notHackableServers.shift();\\n\\t\\t\\thackableServers.push(server);\\n\\n\\t\\t}\\n\\t\\t// sort after adding\\n\\t\\tsortHackableServers(ns);\\n\\t}\\n}\\n\\nasync function multiStaggeredHack(ns) {\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tsortHackableServers(ns);\\n\\tns.print(`ENTERING Stagger Attack: ${hackableServers}`);\\n\\tlet topN = 5; // Maybe tweak this value later\\n\\tfor (let i = 0; i < topN; i++) {\\n\\t\\tlet server = hackableServers[i]\\n\\t\\tif (isPrimed(ns, server)) {\\n\\t\\t\\tattackServer(ns, server);\\n\\t\\t} else if (serverMap.get(server).isPriming()) {\\n\\t\\t\\t// Start setting up attack threads instead!\\n\\t\\t\\t// Priming threads have alread been initiated!\\n\\t\\t\\tattackServer(ns, server);\\n\\t\\t} else {\\n\\t\\t\\tprimeServer(ns, server);\\n\\t\\t}\\n\\t}\\n\\tns.print(`Finished multiStaggeredHack`)\\n}\\n\\nexport async function countExploits(ns) {\\n\\tlet changed = false;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tlastAvailableExploitsCheck = getTime();\\n\\treturn changed;\\n}\\n\\nasync function exploitCheck(ns) {\\n\\tns.print(\\\"Entered Exploit Check\\\")\\n\\tif (exploits < 5 && (getTime() - lastAvailableExploitsCheck) > 10) {\\n\\t\\tlet changed = countExploits(ns);\\n\\t\\tif (changed) {\\n\\t\\t\\tcrackExploitableServers(ns);\\n\\t\\t}\\n\\t} else if (exploits === 5) {\\n\\t\\tcontrolCycle.delete(EXPLOIT_CHECK);\\n\\t\\tns.print(\\\"Canceling Exploit Check Task\\\")\\n\\t}\\n}\\n\\nasync function crackExploitableServers(ns) {\\n\\tlet server;\\n\\twhile (exploits >= serversToExploit.front().getExploitsReq()) {\\n\\t\\tserver = serversToExploit.dequeue();\\n\\t\\tcrackServer(ns, server.getName(), server.getExploitsReq);\\n\\t\\tvulnerableServers.push(server);\\n\\t\\tserverMap[server].setExploited();\\n\\t}\\n\\tsortVulnerableServersByFreeRam(ns);\\n}\\n\\nasync function crackServer(ns, server, reqPorts) {\\n\\tswitch (reqPorts) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.sqlinject(server)\\n\\t\\tcase 4:\\n\\t\\t\\tns.httpworm(server)\\n\\t\\tcase 3:\\n\\t\\t\\tns.relaysmtp(server)\\n\\t\\tcase 2:\\n\\t\\t\\tns.ftpcrack(server)\\n\\t\\tcase 1:\\n\\t\\t\\tns.brutessh(server)\\n\\t\\tdefault:\\n\\t\\t\\tns.nuke(server)\\n\\t}\\n}\\n\\n// Used for initial traversal\\nexport async function processServer(ns, server) {\\n\\tns.print(`Processing Server: ${server}`)\\n\\tlet exploited = ns.hasRootAccess(server);\\n\\tlet reqPorts = ns.getServerNumPortsRequired(server);\\n\\tif (!exploited) {\\n\\t\\t// Attempt to crack\\n\\t\\tif (reqPorts <= exploits) {\\n\\t\\t\\tcrackServer(ns, server, reqPorts);\\n\\t\\t} else {\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\tserversToExploit.enqueue(server, reqPorts);\\n\\t\\t}\\n\\t}\\n\\n\\t// Add to vulnerable server list\\n\\texploited = ns.hasRootAccess(server);\\n\\tif (exploited) {\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n\\t// Continues with the traversal\\n\\tlet subServers = ns.scan(server)\\n\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\tlet subServer = subServers[index];\\n\\t\\tif (!traversedServers.includes(subServer) && !queuedServers.includes(subServer)) {\\n\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t}\\n\\t}\\n\\t// ns.print(`${server}'s subservers: ${subServers}`)\\n\\n\\t// Split into hackable/notHackable groupings\\n\\tlet hackLvlReq = ns.getServerRequiredHackingLevel(server);\\n\\tlet maxRam = ns.getServerMaxRam(server);\\n\\tisHackable(ns, server);\\n\\tlet traversed = true;\\n\\t// TODO: hasCCT check?\\n\\tlet hasCCT = false;\\n\\t// Add server to map w/ it's relevant info stored in a ServerNode for later ease of access.\\n\\tlet serverNode = new ServerNode(server, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, subServers);\\n\\tserverMap.set(server, serverNode);\\n\\tns.print(`SET SERVERNODE for ${server}, ${Array.from(serverMap.keys())} === ${vulnerableServers.length}`)\\n}\\n\\nasync function isHackable(ns, server) {\\n\\tlet reqHackingLvl = ns.getServerRequiredHackingLevel(server);\\n\\tif (ns.getHackingLevel() >= reqHackingLvl && ns.hasRootAccess(server)) {\\n\\t\\thackableServers.push(server);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tnotHackableServers.enqueue(server, reqHackingLvl);\\n\\t}\\n\\treturn false;\\n}\\n\\n// Util function\\nfunction sortHackableServers(ns) {\\n\\thackableServers.sort(function (a, b) {\\n\\t\\t// Determines which server has a higher value based on amount possible to earn per second. ($/rate)\\n\\t\\tlet serverA = ns.getServer(a);\\n\\t\\tlet serverB = ns.getServer(b);\\n\\n\\n\\t\\t// let _server = ns.getServer(server);\\n\\t\\tlet serverAValue = ns.getServerMaxMoney(a) / hackTime(serverA, player);\\n\\t\\tlet serverBValue = ns.getServerMaxMoney(b) / hackTime(serverB, player);\\n\\t\\treturn serverAValue < serverBValue ? 1 : serverAValue > serverBValue ? -1 : 0;\\n\\t});\\n}\\n\\nfunction isPrimed(ns, server) {\\n\\tlet availalbeMoney = ns.getServerMoneyAvailable(server);\\n\\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\tlet securityLvl = ns.getServerSecurityLevel(server);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(server);\\n\\treturn (availalbeMoney >= maxMoney) && (securityLvl <= minSecurity);\\n}\\n\\n// Could also use ports to ensure things are synced up via comm channels, but not sure if that would add to RAM usage..\\n// It does not! Wow. I'll totally just do that then, that seems way easier than guessing timings!\\n// Say port 1 is for weaken comms, 2 is for growth, and 3 is for hacking!\\n\\n// TODO: Try splitting this out into another class at some point?\\nasync function primeServer(ns, server) {\\n\\t/**\\n\\t * PRIMING server.\\n\\t * Growing to max, and weakening to min\\n\\t */\\n\\tns.print(`PRIMING ${server}`);\\n\\tlet _server = ns.getServer(server);\\n\\tlet cores = ns.getServer(HOME).cpuCores;\\n\\tlet neededGrowthPercent = ns.getServerMaxMoney(server) / ns.getServerMoneyAvailable(server);\\n\\tlet maxGrowThreads = Math.ceil(\\n\\t\\tMath.log10(neededGrowthPercent)\\n\\t\\t/Math.log10(growPercent(_server, 1, player, cores))\\n\\t\\t);\\n\\tvar weakenThreads = ((ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)) + (maxGrowThreads * 0.004)) / 0.05\\n\\n\\tlet timeToGrow = growTime(_server, player);\\n\\tlet timeToWeaken = weakenTime(_server, player);\\n\\t// Sets timer delay to ensure weaken is completed only AFTER grow finishes.\\n\\tlet weakenDelayTime = timeToGrow - timeToWeaken;\\n\\tif (weakenDelayTime < 0) { weakenDelayTime = 0; }\\n\\n\\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\tlet availalbeMoney = ns.getServerMoneyAvailable(server);\\n\\tif (availalbeMoney < maxMoney) {\\n\\t\\t// Grow money\\n\\t\\tdistributeAttackLoad(ns, server, GROW, maxGrowThreads, 0);\\n\\t}\\n\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(server);\\n\\tlet securityLvl = ns.getServerSecurityLevel(server);\\n\\tif (securityLvl > minSecurity) {\\n\\t\\tdistributeAttackLoad(ns, server, WEAKEN, weakenThreads, weakenDelayTime);\\n\\t}\\n\\t/**\\n\\t * Server is PRIMING\\n\\t * - Mark the serverNode as PRIMING, and set the timestamp/time it will take for weakening+delay to complete!\\n\\t */\\n\\t// ns.print(`SET PRIMING ${server} scheduled to complete at: ${Date.now()+timeToWeaken + weakenDelayTime}`);\\n\\tserverMap.get(server).setPriming(timeToWeaken + weakenDelayTime);\\n}\\n\\n// TODO: Implement blocking feature for optimal flow!\\nasync function attackServer(ns, server) {\\n\\tns.print(\\\"ATTACKING\\\")\\n\\tlet _server = ns.getServer(server);\\n\\tlet cores = ns.getServer(HOME).cpuCores;\\n\\t// Should give the amount of threads needed to grow by 200%\\n\\t// I could solve for threads from the EQ: 2.00 = growPercent^threads\\n\\t// var growThreads = Math.ceil(((5 / (growPercent(_server, 1, player, cores) - 1))));\\n\\tlet gPercent = growPercent(_server, 1, player, cores);\\n\\t// Should be the correct equation for calulating growth threads needed to double the server's money\\n\\tvar growThreads = Math.ceil(Math.log2(2) / Math.log2(gPercent));\\n\\tvar hackThreads = threadsToHackPercent(_server, 50);  //Getting the amount of threads I need to hack 50% of the funds\\n\\t// var weakenThreads = (growThreads - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n\\t//  (HackThreads * 0.002 + WeakenThreads * 0.004) / 0.053125\\n\\t// weakenThreads = Math.ceil((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\tvar weakenThreads = Math.ceil((hackThreads * 0.002 + growThreads * 0.004) / 0.05);\\n\\n\\t///\\n\\t///\\tPriming Delay\\n\\t///\\n\\tlet delay = 0;\\n\\tif(serverMap.get(server).getPrimingTimeStamp() > Date.now()){\\n\\t\\tdelay = serverMap.get(server).getPrimingTimeStamp() - Date.now()\\n\\t}\\n\\n\\tns.print(`ATTACKING: ${server} w/ ${hackThreads} hack threads`)\\n\\tdistributeAttackLoad(ns, server, HACK, hackThreads, delay);\\n\\t/**\\n\\t * PRIMING server.\\n\\t * Regrow what will be lost from the hack, and weaken what would be strengthened.\\n\\t * Calculate timing adjustments:\\n\\t */\\n\\tlet timeToHack = hackTime(_server, player);\\n\\tlet timeToGrow = growTime(_server, player);\\n\\tlet timeToWeaken = weakenTime(_server, player);\\n\\tlet growDelay = delay;\\n\\tlet weakenDelay = delay;\\n\\tif (timeToHack > timeToGrow) {\\n\\t\\tgrowDelay = timeToHack - timeToGrow + delay;\\n\\t}\\n\\tif (timeToGrow + growDelay > timeToWeaken) {\\n\\t\\tweakenDelay = timeToGrow + growDelay - weakenDelay + delay;\\n\\t}\\n\\n\\tdistributeAttackLoad(ns, server, GROW, growThreads, growDelay);\\n\\tdistributeAttackLoad(ns, server, WEAKEN, weakenThreads, weakenDelay);\\n\\tns.print(`LAUNCHED ATTACK ON ${server}`)\\n}\\n\\nfunction distributeAttackLoad(ns, targetServer, script, totalThreads, delay) { // Consider doing delays by time stamp?\\n\\tlet scriptRam = ns.getScriptRam(script);\\n\\tlet host;\\n\\tlet ram;\\n\\tlet threads;\\n\\tns.print(`Distributed ${script} attack for ${targetServer}`)\\n\\tfor (let i = 0; i < vulnerableServers.length; i++) {\\n\\t\\t// figure out how many threads we can run of our script on the given server\\n\\t\\thost = vulnerableServers[i];\\n\\t\\t// ns.print(`ATTEMPT distributing ${totalThreads} ${script} threads to\\\" ${host} w/ ${delay} delay`)\\n\\t\\tram = ns.getServerRam(host);\\n\\t\\tthreads = Math.floor((ram[0] - ram[1]) / scriptRam);\\n\\t\\tif (threads > 0) {\\n\\t\\t\\t// Subtract threads from totalThreads value!\\n\\t\\t\\tif (threads > totalThreads) {\\n\\t\\t\\t\\t// Limit to only the needed amount!\\n\\t\\t\\t\\tthreads = totalThreads;\\n\\t\\t\\t}\\n\\t\\t\\tns.print(`Distributing ${threads} threads to ${host}`)\\n\\t\\t\\ttotalThreads -= threads;\\n\\t\\t\\tns.exec(script, host, threads, targetServer, delay, randomValue());\\n\\t\\t}\\n\\t\\tif (totalThreads <= 0) {\\n\\t\\t\\tns.print(`Distributed ${script} attack for ${targetServer} to: ${host}: COMPETED ALL THREADS! ${totalThreads}`)\\n\\t\\t\\treturn; // Done distributing the attack load!\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tns.print(`Distributed ${script} attack threads remaining: ${totalThreads}`)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction randomValue() {\\n\\treturn Math.floor(Math.random() * 100000);\\n}\\n\\nasync function sortVulnerableServersByFreeRam(ns) {\\n\\tvulnerableServers.sort(function (a, b) {\\n\\t\\tlet serverAFreeRam = ns.getServerMaxRam(a) - ns.getServerUsedRam(a);\\n\\t\\tlet serverBFreeRam = ns.getServerMaxRam(b) - ns.getServerUsedRam(b);\\n\\t\\treturn serverAFreeRam < serverBFreeRam ? 1 : serverAFreeRam > serverBFreeRam ? -1 : 0;\\n\\t});\\n}\\n\\n// Returns the amount of threads needed to hack X% of a server's money. (Enter percent as int)\\nfunction threadsToHackPercent(server, percent) {\\n\\treturn Math.floor(percent / (hackPercent(server, player) * 100));\\n}\\n// Returns time in seconds!\\nasync function getTime() {\\n\\treturn Date.now() / 1000;\\n}\",\"filename\":\"controllScript.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"blob:file:///528006eb-6f52-4be1-8141-fce22b2b514d\",\"moduleSequenceNumber\":256},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///8b40b703-2ce7-4b7c-bd50-62a5dec141fd\",\"moduleSequenceNumber\":189546},{\"filename\":\"/lib/ServerNode.js\",\"url\":\"blob:file:///a30a011f-e519-4780-b969-5e5e41d23ee6\",\"moduleSequenceNumber\":265},{\"filename\":\"/lib/PriorityQueue.js\",\"url\":\"blob:file:///5678f1c7-66c9-40b9-b6be-f06e7e6a8047\",\"moduleSequenceNumber\":264},{\"filename\":\"controllScript.js\",\"url\":\"blob:file:///7bf4bc68-30f3-4780-9389-ed7f1ec1ebfb\",\"moduleSequenceNumber\":198296}],\"dependents\":[],\"ramUsage\":9,\"server\":\"home\",\"moduleSequenceNumber\":198296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO: Make this the ultimate controll script!\\n * The goal of this script is to basically be a glorified events manager.\\n * [] Then the hackEventCoordinator should manage how we stagger out weaken, grow, and hack commands, \\n * and what vulnerable servers run how many of the threads for each distributed attack!\\n * \\n * The contractSolver will ideally automatically solve contracts, and noify me of their completion, so I can choose rep or $$$.\\n * - possibly allow myself to assign which company to build rep for, if this is even automatable.\\n * [] MVP for now is just identifying which servers have cct files and notifying me.\\n * \\t\\t- Might be able to run them with a script? Needs further research.\\n * \\n * Should map out programs that need stop/start from this script w/ their RAM usage, so we know how much we need to\\n * reserve for their respective server! (I.E. autoNode on home takes up X ram, so when we calculate how much to \\n * use for threading, we take that reserved amount into account and avoid using it)\\n * - More along this vein, I could very well do ram calcs ahead of time and pass them on as args to other scripts to avoid\\n *   eating up unnecessary RAM. [OPTIMIZATION] \\n * - Or try to keep track of this via ports... (Seems messy)\\n * \\n * // Would be nice if we had a list of known servers we need to backdoor for FACTIONS, so it would give a toast notification!\\n */\\nimport PriorityQueue from \\\"lib/PriorityQueue.js\\\";\\nimport ServerNode from \\\"lib/ServerNode.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport { \\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n } from \\\"lib/formulasHackingFacade.js\\\";\\nvar player;\\nvar serverMap;\\nvar controlCycle;\\n// Servers to check through for value/hacking list\\nvar vulnerableServers; // List of servers that have already been cracked (Possibly not hackable yet)\\nvar serversToExploit;\\nvar hackableServers;\\nvar notHackableServers;\\nvar topTargets;\\nvar exploits;\\n// For traversal\\nlet queuedServers;\\nlet traversedServers;\\n\\n// Function labels for control cycle\\nconst EXPLOIT_CHECK = 0;\\nconst LVL_UP_CHECK = 1;\\n\\n// Timers\\nvar lastAvailableExploitsCheck;\\n\\n//Player stats to listen to\\nvar hackingLvl;\\n\\nasync function init(ns) {\\n\\tplayer = ns.getPlayer();\\n\\t// If need be, could make an \\\"Event\\\" wrapper class that is the function, \\n\\t// UUID(name, effectively), and other useful vars for ordering.\\n\\n\\t// High level functions for the main control loop!\\n\\t// Can be inserted & removed as deemed necessary!\\n\\n\\tcontrolCycle = new Map();\\n\\tcontrolCycle.set(EXPLOIT_CHECK, function () { exploitCheck(ns) });\\n\\tcontrolCycle.set(LVL_UP_CHECK, function () { levelUpCheck(ns) });\\n\\t// controlCycle.set() //Idk, X_PORT_LISTEN maybe? (I.E. for Node, when that is useful...)\\n\\t// Additional EventQueue?\\n\\tserverMap = new Map();\\n\\tvulnerableServers = [];\\n\\tserversToExploit = new PriorityQueue(); // Prioritized by # of exploits required\\n\\texploits = 0;\\n\\n\\thackableServers = [];\\n\\tnotHackableServers = new PriorityQueue(); // Prioritized by min hacking level required\\n\\n\\ttopTargets = []\\n\\n\\tqueuedServers = []\\n\\ttraversedServers = [HOME]\\n\\tlastAvailableExploitsCheck = 0;\\n\\thackingLvl = 1;\\n}\\n\\nexport async function main(ns) {\\n\\tns.print(\\\"TEST\\\")\\n\\tawait ns.sleep(\\\"50\\\");\\n\\tinit(ns);\\n\\tawait countExploits(ns);\\n\\n\\t// Traversal should generate a list of all servers, ideally seperating them into hackable/notHackable\\n\\t// Evaluating Servers & Cracking them!\\n\\ttraverseServers(ns);\\n\\n\\tlet running = true;\\n\\twhile (running) {\\n\\t\\tfor (let [key, value] of controlCycle.entries()) {\\n\\t\\t\\tvalue();\\n\\t\\t}\\n\\t\\tns.sleep(25);\\n\\t}\\n\\n\\t// Determines which vulnerable servers are best to hack for $$$\\n\\tawait profileTargets(ns);\\n\\tns.print(`High profile targets selected: ${topTargets}`)\\n\\t// Initiates attacks on top targets on compromised servers\\n\\tawait attackTopTargets(ns);\\n\\n\\tawait ns.sleep(10000)\\n}\\n\\n// INITIAL traversal of ALL servers, to split them up into catagories for future processing!\\n// Evaluating Servers & Cracking them!\\nasync function traverseServers(ns) {\\n\\t// Run the initial scan\\n\\tqueuedServers = ns.scan();\\n\\tlet server;\\n\\twhile (queuedServers.length > 0) {\\n\\t\\tserver = queuedServers.shift();\\n\\t\\ttraversedServers.push(server);\\n\\n\\t\\tawait processServer(ns, server)\\n\\t}\\n}\\n\\nasync function levelUpCheck(ns) {\\n\\tif (ns.getHackingLevel() !== hackingLvl) {\\n\\t\\thackingLvl = ns.getHackingLevel();\\n\\t\\t// Checks if there are no un-hackable servers remaining, will remove this from controlCycle\\n\\t\\tif (notHackableServers.length < 1) {\\n\\t\\t\\tcontrolCycle.delete(LVL_UP_CHECK);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Servers that are now hackable will be moved onto the hackable stack/list\\n\\t\\tlet server;\\n\\t\\twhile (serverMap[notHackableServers[0]].getReqHackLvl() <= hackingLvl) {\\n\\t\\t\\tserver = notHackableServers.shift();\\n\\t\\t\\thackableServers.push(server);\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\t// sort after adding\\n\\t\\tsortHackableServers(ns);\\n\\t}\\n}\\n\\nexport async function countExploits(ns) {\\n\\tlet changed = false;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\texploits++;\\n\\t\\tchanged = true;\\n\\t}\\n\\tlastAvailableExploitsCheck = getTime();\\n\\treturn changed;\\n}\\n\\nasync function exploitCheck(ns) {\\n\\tif (exploits < 5 && (getTime() - lastAvailableExploitsCheck) > 10) {\\n\\t\\tlet changed = await countExploits(ns);\\n\\t\\tif (changed) {\\n\\t\\t\\tcrackExploitableServers(ns);\\n\\t\\t}\\n\\t} else if (exploits === 5) {\\n\\t\\tcontrolCycle.delete(EXPLOIT_CHECK);\\n\\t}\\n}\\n\\nasync function crackExploitableServers(ns) {\\n\\tlet server;\\n\\twhile (exploits >= serversToExploit.front().getExploitsReq()) {\\n\\t\\tserver = serversToExploit.dequeue();\\n\\t\\tcrackServer(ns, server.getName(), server.getExploitsReq);\\n\\t\\tinfectVulnerableServer(ns, server);\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n}\\n\\nasync function crackServer(ns, server, reqPorts) {\\n\\tswitch (reqPorts) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.sqlinject(server)\\n\\t\\tcase 4:\\n\\t\\t\\tns.httpworm(server)\\n\\t\\tcase 3:\\n\\t\\t\\tns.relaysmtp(server)\\n\\t\\tcase 2:\\n\\t\\t\\tns.ftpcrack(server)\\n\\t\\tcase 1:\\n\\t\\t\\tns.brutessh(server)\\n\\t\\tdefault:\\n\\t\\t\\tns.nuke(server)\\n\\t}\\n}\\n\\n// Used for initial traversal\\nexport async function processServer(ns, server) {\\n\\tlet exploited = ns.hasRootAccess(server);\\n\\tif (!exploited) {\\n\\t\\tlet reqPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t// Attempt to crack\\n\\t\\tif (reqPorts <= exploits) {\\n\\t\\t\\tcrackServer(ns, server, reqPorts);\\n\\t\\t} else {\\n\\t\\t\\tns.print(`Can't crack ${server} yet.`);\\n\\t\\t\\tserversToExploit.enqueue(server, reqPorts);\\n\\t\\t}\\n\\t}\\n\\n\\t// Add to vulnerable server list\\n\\texploited = ns.hasRootAccess(server);\\n\\tif (exploited) {\\n\\t\\tvulnerableServers.push(server);\\n\\t}\\n\\t// Continues with the traversal\\n\\tlet subServers = ns.scan(server)\\n\\tfor (let index = 0; index < subServers.length; index++) {\\n\\t\\tlet subServer = subServers[index];\\n\\t\\tif (!traversedServers.includes(subServer)) {\\n\\t\\t\\tqueuedServers.push(subServer)\\n\\t\\t}\\n\\t}\\n\\n\\t// Split into hackable/notHackable groupings\\n\\tlet hackLvlReq = ns.getServerRequiredHackingLevel(server);\\n\\tlet maxRam = ns.getServerMaxRam(server);\\n\\tisHackable();\\n\\tlet traversed = true;\\n\\t// TODO: hasCCT check?\\n\\tlet hasCCT = false;\\n\\t// Add server to map w/ it's relevant info stored in a ServerNode for later ease of access.\\n\\tmap.set(server, new ServerNode(server, reqPorts, hackLvlReq, exploited, maxRam, traversed, hasCCT, subServers));\\n}\\n\\nasync function isHackable(server) {\\n\\tlet reqHackingLvl = ns.getServerRequiredHackingLevel(server);\\n\\tif (ns.getHackingLevel() >= reqHackingLvl) {\\n\\t\\thackableServers.push(server);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tnotHackableServers.enqueue(server, reqHackingLvl);\\n\\t}\\n\\treturn false;\\n}\\n\\n// TODO: Completely revamp/replace this with Hacking event manager.\\nexport async function infectVulnerableServers(ns) {\\n\\t// Scp virus script to servers\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\tlet server = vulnerableServers[index];\\n\\t\\tawait ns.scp(VIRUS, server)\\n\\t\\tns.print(`Infected ${server} with Virus.`)\\n\\t}\\n\\t/*\\n\\t\\tFUTURE FEATURES:\\n\\t\\t- remote controll capability: kill other server's scripts to restart w/ new targets!\\n\\t\\t\\t- Will need to keep track of what scripts are running on which servers\\n\\t\\t- determine high value targets!\\n\\t\\t- deploy Virus (attack script) on all cracked servers to attack most valuable targets! (MVTs)\\n\\t\\t- Use the maximum threads possible for attack script\\n\\t*/\\n}\\nasync function infectVulnerableServer(ns, server) {\\n\\tawait ns.scp(WEAKEN, server);\\n\\tawait ns.scp(GROW, server);\\n\\tawait ns.scp(HACK, server);\\n}\\n\\nexport async function profileTargets(ns) {\\n\\t// TODO: What we REALLY want this function to do is SORT targets by value!\\n\\t// topTargets should no longer exist once this is accomplished!\\n\\t// Q1. How to establish server value\\n\\t// Q2. How to initially sort, and then maintain the sorted list?\\n\\t// - Probably with a datastructure capable of storing &\\n\\t//\\t sorting ServerNodes with it's own evaluation & comparison function\\n\\n\\tsortHackableServers(ns);\\n\\t// Once sorted, we want to allocate the right order & correct amount of threads distributed accross servers.\\n\\t// Then, once we have enough allocated to doing those three things (perhaps with a 2nd layer to buffer)\\n\\t// we can move on to the next highest valued server to do the same thing, and so on...\\n\\t// - To avoid having to re-allocate, we would be listening via ports for when they complete, so we know when we need to launch new tasks.\\n\\t//  - OR scheduling them such that they are back to back always (second layer)\\n}\\n\\nasync function sortHackableServers(ns){\\n\\thackableServers.sort(function (a, b) {\\n\\t\\t// Determines which server has a higher value based on amount possible to earn per second. ($/rate)\\n\\t\\tlet serverA = ns.getServer(a);\\n\\t\\tlet serverB = ns.getServer(b);\\n\\n\\t\\tlet hackValueA = hackPercent(serverA, player) * getServerMaxMoney(serverA, player);\\n\\t\\tlet timeA = weakenTime(serverA, player) + growTime(serverA, player) + hackTime(serverA, player);\\n\\t\\tlet hackValueB = hackPercent(serverB, player) * getServerMaxMoney(serverB, player);\\n\\t\\tlet timeB = weakenTime(serverB, player) + growTime(serverB, player) + hackTime(serverB, player);\\n\\n\\t\\tlet serverAValue = hackValueA / timeA;\\n\\t\\tlet serverBValue = hackValueB / timeB;\\n\\t\\treturn serverAValue > serverBValue ? 1 : serverAValue < serverBValue ? -1 : 0;\\n\\t});\\n}\\n\\nexport async function attackTopTargets(ns) {\\n\\t// Iterate through list of servers, Exec-ing the virus script w/ the top targets as input for arguments.\\n\\t// The tricky bit here will be determining max amount of threads to run the virus with\\n\\t// for (let index = 0; index < topTargets.length; index++) {\\n\\tlet threadCost = ns.getScriptRam(VIRUS);\\n\\tlet server;\\n\\tlet maxRam;\\n\\tlet maxThreadCount;\\n\\tns.print(`Top Targets: ${topTargets}`)\\n\\tawait ns.sleep(10000)\\n\\tfor (let index = 0; index < vulnerableServers.length; index++) {\\n\\t\\t// const maxThreads = Math.floor(maxRam / threadCost);\\n\\t\\tserver = vulnerableServers[index];\\n\\t\\tns.killall(server)\\n\\t\\tmaxRam = ns.getServerMaxRam(server);\\n\\t\\tmaxThreadCount = Math.floor(maxRam / threadCost);\\n\\t\\tif (maxThreadCount <= 0) {\\n\\t\\t\\tns.print(`NOT ENOUGH resources on server: _${server}_ to run virus.`)\\n\\t\\t} else {\\n\\t\\t\\tswitch (topTargets.length) {\\n\\t\\t\\t\\tcase 5:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\tns.exec(VIRUS, server, maxThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tlet homeThreadCount = Math.floor((ns.getServerMaxRam(HOME) - ns.getServerUsedRam(HOME)) / threadCost);\\n\\t// Start hacking script on home server too!\\n\\n\\tswitch (topTargets.length) {\\n\\t\\tcase 5:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tns.exec(VIRUS, HOME, homeThreadCount, topTargets[0], topTargets[1], topTargets[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.print(`Not enough topTagets: ${topTargets.length}`)\\n\\t}\\n\\t// ns.exec(virus, \\\"home\\\", homeThreadCount, topTargets[0], topTargets[1], topTargets[2], topTargets[3], topTargets[4]);\\n}\\n\\n// Returns time in seconds!\\nasync function getTime() {\\n\\treturn Date.now() / 1000;\\n}\",\"filename\":\"/SimpleScripts/controllScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default class Bucket {\\n\\n\\t// Holder of host server & thread count to run an executed script with!\\n\\t// Intended as a util function for controlCycle to be generated with the `distribute` function & returned as a list\\n\\tconstructor(host, threads) {\\n\\t\\tthis.host = host;\\n\\t\\tthis.threads = threads;\\n\\t}\\n}\",\"filename\":\"/lib/Bucket.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet usedRam = ns.getServerUsedRam(\\\"home\\\")\\n\\tns.print(`TEST: ${usedRam}`)\\n\\tawait ns.sleep(10000)\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///3ad0861e-d603-4a28-8e61-91b6c60cd878\",\"moduleSequenceNumber\":44513}],\"dependents\":[],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///bee1fd4a-ab4c-42af-8e91-f0d563b3591a\",\"moduleSequenceNumber\":513}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///64d1e05f-2e35-47ed-bbf5-8e3c72f362e0\",\"moduleSequenceNumber\":507}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///753d9b23-a49e-4f86-8695-e6b166046e8b\",\"moduleSequenceNumber\":504}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport { getAllServers } from \\\"lib/util.js\\\"\\n\\nexport async function main(ns) {\\n\\tvar totalServerList = getAllServers(ns);\\n\\t// Go through all servers & infect them!\\n\\tfor (let i = 0; i < totalServerList.length; i++) {\\n\\t\\tawait infectVulnerableServer(ns, totalServerList[i]);\\n\\t}\\n}\\n\\nexport default async function infectVulnerableServer(ns, server) {\\n\\tawait ns.scp(WEAKEN, server);\\n\\tawait ns.scp(GROW, server);\\n\\tawait ns.scp(HACK, server);\\n}\",\"filename\":\"infect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/deployingScript.js\",\"url\":\"blob:file:///c537f01c-bf00-4be3-9471-54bba0599a0d\",\"moduleSequenceNumber\":162633},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///c5e823f7-6bab-4347-90ef-f9223679ed66\",\"moduleSequenceNumber\":189546},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///bc6864e9-c4e4-47cc-8e0a-ed8e1448dda1\",\"moduleSequenceNumber\":203453},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///cbf0da5b-e30c-47d6-b503-8acf6aac27b7\",\"moduleSequenceNumber\":189546},{\"filename\":\"infect.js\",\"url\":\"blob:file:///2686f7d0-80c6-4415-b843-803e6576c142\",\"moduleSequenceNumber\":205979}],\"dependents\":[],\"ramUsage\":4.45,\"server\":\"alpha-1\",\"moduleSequenceNumber\":210011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    SERVER_LIST,\\n    CCT_MAP,\\n    HOME\\n} from \\\"lib/customConstants.js\\\";\\nimport randomValue from \\\"lib/util.js\\\"\\n\\n/**\\n * REQUIRES FORMULAS TO FUNCTION!!\\n * [] TODO: Remove from list serversWithCct once it has been completed!\\n * [] Make actual logging & use it in the cctScripts to give results. (So I can debug/verify it's working\\n */\\n\\nvar serversWithCct = []\\nvar running = true;\\n\\nexport async function main(ns) {\\n    // Go through all servers & search for CCT files.\\n    while (running) {\\n        findCctFiles(ns);\\n        for (let i in serversWithCct) {\\n            var contract = serversWithCct[i];\\n            var contractType = ns.codingcontract.getContractType(contract[0], contract[1]);\\n            var solveScript = CCT_MAP.get(contractType);\\n            var version = getVersion(contractType);\\n            ns.print(`Found \\\"${contractType}\\\" on ${contract[1]} => ${solveScript}`)\\n            ns.exec(solveScript, HOME, 1, contract[0], contract[1], version, randomValue());\\n        }\\n\\n        await ns.sleep(60000);\\n    }\\n}\\n\\nfunction findCctFiles(ns) {\\n    for (let i = 0; i < SERVER_LIST.length; i++) {\\n        let server = SERVER_LIST[i];\\n        var serverContracts = ns.ls(server, \\\".cct\\\");\\n        for (let c = 0; c < serverContracts.length; c++) {\\n            serversWithCct.push([serverContracts[c], server]);\\n            ns.print(`Pushing ${serverContracts[c]} here ${SERVER_LIST[i]}`)\\n        }\\n    }\\n}\\n\\nfunction getVersion(string) {\\n    if (string.endsWith(\\\"IV\\\")) {\\n        return 4;\\n    } else if (string.endsWith(\\\"III\\\")) {\\n        return 3;\\n    } else if (string.endsWith(\\\"II\\\")) {\\n        return 2;\\n    } else if (string.endsWith(\\\"I\\\")) {\\n        return 1;\\n    }\\n    return 0;\\n}\",\"filename\":\"cctSolver.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/deployingScript.js\",\"url\":\"blob:file:///ec5bd2a0-7a3b-46ea-a9b2-65823241d46b\",\"moduleSequenceNumber\":162633},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///06e089d0-9c94-4ada-a01e-f9b94dcfd3ba\",\"moduleSequenceNumber\":189546},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///586f149b-61ce-4c50-b9c9-833a485f0500\",\"moduleSequenceNumber\":196238},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///7cc657a6-d93f-4005-9203-1e3d86c7728e\",\"moduleSequenceNumber\":189546},{\"filename\":\"cctSolver.js\",\"url\":\"blob:file:///74539315-92ad-40a1-9918-42e748884531\",\"moduleSequenceNumber\":196495}],\"dependents\":[],\"ramUsage\":10.35,\"server\":\"home\",\"moduleSequenceNumber\":196495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Question samples:\\n * How many different ways can the number 45 be written as a sum of at least two positive integers?\\n * How many different ways can the number 31 be written as a sum of at least two positive integers?\\n */\\n\\nlet precalcPartitions = [0, 0, 1, 2, 4, 6, 10, 14, 21, 29, 41, 55, 76, 100, 134, 175, 230, 296, 384, 489, 626, 791, 1001, 1254, 1574, 1957, 2435, 3009, 3717, 4564, 5603, 6841, 8348, 10142, 12309, 14882, 17976, 21636, 26014, 31184, 37337, 44582, 53173, 63260, 75174, 89133, 105557, 124753, 147272, 173524, 204225, 239942, 281588, 329930, 386154, 451275, 526822, 614153, 715219, 831819, 966466, 1121504, 1300155, 1505498, 1741629, 2012557, 2323519, 2679688, 3087734, 3554344, 4087967, 4697204, 5392782, 6185688, 7089499, 8118263, 9289090, 10619862, 12132163, 13848649, 15796475, 18004326, 20506254, 23338468, 26543659, 30167356, 34262961, 38887672, 44108108, 49995924, 56634172, 64112358, 72533806, 82010176, 92669719, 104651418, 118114303, 133230929, 150198135, 169229874, 190569291, 214481125, 241265378, 271248949, 304801364, 342325708, 384276335, 431149388, 483502843, 541946239, 607163745, 679903202, 761002155, 851376627, 952050664, 1064144450, 1188908247, 1327710075, 1482074142, 1653668664, 1844349559, 2056148050, 2291320911, 2552338240, 2841940499, 3163127351, 3519222691, 3913864294, 4351078599, 4835271869, 5371315399, 5964539503, 6620830888, 7346629511, 8149040694, 9035836075, 10015581679, 11097645015, 12292341830, 13610949894, 15065878134, 16670689207, 18440293319, 20390982756, 22540654444, 24908858008, 27517052598, 30388671977, 33549419496, 37027355199];\\n\\nexport async function main(ns) {\\n\\tvar contract = ns.args[0];\\n\\tvar host = ns.args[1];\\n\\tvar data = ns.codingcontract.getData(contract, host)\\n\\tns.codingcontract.attempt(solve(data), contract, host)\\n\\tawait ns.sleep(100000)\\n}\\n\\nfunction solve(data){\\n\\t// Wrong? (Needs proofing)\\n\\treturn precalcPartitions[data];\\n\\t//Math.pow(2,(data - 1));\\n}\\n\\n//  outputData = await solverWaysToSum(ns, inputData);\\n//                     outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\n \\n//                     ns.tprint([listServers[listIndex],\\n//                         listFiles[z],\\n//                         inputType,\\n//                         outputData,\\n//                         outputResult\\n//                     ]);\\n//                     if (!outputResult) {\\n//                         ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\n//                     }\\n//                     break;\\n\\n// async function solverWaysToSum(ns, arrayData) {\\n//     ns.tprint(\\\"solverWaysToSum()\\\");\\n//     await ns.sleep(1000);\\n//     let precalcPartitions = [0, 0, 1, 2, 4, 6, 10, 14, 21, 29, 41, 55, 76, 100, 134, 175, 230, 296, 384, 489, 626, 791, 1001, 1254, 1574, 1957, 2435, 3009, 3717, 4564, 5603, 6841, 8348, 10142, 12309, 14882, 17976, 21636, 26014, 31184, 37337, 44582, 53173, 63260, 75174, 89133, 105557, 124753, 147272, 173524, 204225, 239942, 281588, 329930, 386154, 451275, 526822, 614153, 715219, 831819, 966466, 1121504, 1300155, 1505498, 1741629, 2012557, 2323519, 2679688, 3087734, 3554344, 4087967, 4697204, 5392782, 6185688, 7089499, 8118263, 9289090, 10619862, 12132163, 13848649, 15796475, 18004326, 20506254, 23338468, 26543659, 30167356, 34262961, 38887672, 44108108, 49995924, 56634172, 64112358, 72533806, 82010176, 92669719, 104651418, 118114303, 133230929, 150198135, 169229874, 190569291, 214481125, 241265378, 271248949, 304801364, 342325708, 384276335, 431149388, 483502843, 541946239, 607163745, 679903202, 761002155, 851376627, 952050664, 1064144450, 1188908247, 1327710075, 1482074142, 1653668664, 1844349559, 2056148050, 2291320911, 2552338240, 2841940499, 3163127351, 3519222691, 3913864294, 4351078599, 4835271869, 5371315399, 5964539503, 6620830888, 7346629511, 8149040694, 9035836075, 10015581679, 11097645015, 12292341830, 13610949894, 15065878134, 16670689207, 18440293319, 20390982756, 22540654444, 24908858008, 27517052598, 30388671977, 33549419496, 37027355199];\\n\\n//     return precalcPartitions[arrayData];\\n// }\",\"filename\":\"/cctSolutions/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/cctSolutions/totalWaysToSum.js\",\"url\":\"blob:file:///97309f09-40e0-4e49-9f8f-ff5915826878\",\"moduleSequenceNumber\":97448}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar contract = ns.args[0];\\n\\tvar host = ns.args[1];\\n\\tvar data = ns.codingcontract.getData(contract, host)\\n\\tns.codingcontract.attempt(solve(data), contract, host)\\n}\\n\\nfunction solve(number){\\n\\tvar divisor = 2;\\n\\twhile (number > 1) {\\n\\t\\tif (number % divisor === 0) {\\n\\t\\t\\tnumber /= divisor;\\n\\t\\t} else {\\n\\t\\t\\tdivisor++;\\n\\t\\t}\\n\\t}\\n\\treturn divisor;\\n}\",\"filename\":\"/cctSolutions/findLargestPrimeFactor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/findLargestPrimeFactor.js\",\"url\":\"blob:file:///f841851d-3ee2-4a63-bdf4-011922a0f569\",\"moduleSequenceNumber\":138030}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":138030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/arrayJumpingGame.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/arrayJumpingGame.js\",\"url\":\"blob:file:///13b5cdad-08ab-4ec4-8fce-db4ca9578950\",\"moduleSequenceNumber\":138039}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":138039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var version;\\n\\nexport async function main(ns) {\\n\\t// Pass in the version using arguments!\\n\\tversion = ns.args[0]\\n}\",\"filename\":\"/cctSolutions/algorithmicStockTrader.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/algorithmicStockTrader.js\",\"url\":\"blob:file:///1a63de93-aa26-4606-9d2f-6b231d825fb4\",\"moduleSequenceNumber\":138042}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":138042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var version;\\n\\nexport async function main(ns) {\\n\\t// Pass in the version using arguments!\\n\\tversion = ns.args[0]\\n}\",\"filename\":\"/cctSolutions/uniquePathsInGrid.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/uniquePathsInGrid.js\",\"url\":\"blob:file:///a19452df-1e74-482b-8efc-57b66b5dbbc6\",\"moduleSequenceNumber\":138037}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":138037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/findAllValidMathExpressions.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/findAllValidMathExpressions.js\",\"url\":\"blob:file:///46c22ea5-9c86-4cb8-8e1d-ebb974e6c412\",\"moduleSequenceNumber\":138028}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":138028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/mergeOverlappingIntervals.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/mergeOverlappingIntervals.js\",\"url\":\"blob:file:///02dbfdb4-d468-4863-8a95-e178b95e6fb2\",\"moduleSequenceNumber\":196496}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":196496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    SERVER_LIST,\\n    HOME\\n} from \\\"lib/customConstants.js\\\";\\nimport DeployingScript from \\\"lib/deployingScript.js\\\";\\n\\nexport default function randomValue() {\\n\\treturn Math.floor(Math.random() * 100000);\\n}\\n\\n// TODO: Consider adding a general logging utility for outputting to an error log to a specified directory!\\n// I.E. \\nexport function debug(script, server, msg, type){\\n\\t// save it to the /log directory under it's appropriate \\\"type\\\"\\n\\t// Type will use constants for things like: ERROR, PRINT_OUT, etc.\\n\\t// E.G. an error message from controllScript.js running on n00dles would look like:\\n\\t//\\t- /log/errors/n00dles_controllScript.js.log \\n}\\n\\n/**\\n * [] Make distribute a util function if possible?\\n * // - should continue attempting until a server is found with enough RAM!\\n * \\t\\t- think of it as Queueing actions that each need to be completed before it can move onto the next!\\n * [] Change this distribution function to use a Queueing mechanism?\\n * [] OR: Have a function that HANDLES the attempts at distributing!\\n * \\t- Iterates through the func distributeScriptLoad w/ different parameters?\\n * \\t- Will need an obj to represent this data struct\\n */\\n\\n// function manageDistribution(ns){\\n// \\tvar distributionQueue = []\\n// \\tlet toDeploy = new DeployingScript()\\n// \\tcontrolCycle.set(EXPLOIT_CHECK, function (ns) { exploitCheck(ns) });\\n\\n// \\t// Will need to have a queue that manages the order...\\n// \\t// \\n// }\\n\\nfunction distributeScriptLoad(ns, script, targetServer, totalThreads, delay) {\\n\\tlet vulnerableServers = getAllServers(ns).filter(e => ns.hasRootAccess(e));\\n\\tlet scriptRam = ns.getScriptRam(script);\\n\\tlet host;\\n\\tlet ram;\\n\\tlet threads;\\n\\tns.print(`Distributed ${script} attack for ${targetServer}`)\\n\\tfor (let i = 0; i < vulnerableServers.length; i++) {\\n\\t\\t// figure out how many threads we can run of our script on the given server\\n\\t\\thost = vulnerableServers[i];\\n\\t\\t// ns.print(`ATTEMPT distributing ${totalThreads} ${script} threads to\\\" ${host} w/ ${delay} delay`)\\n\\t\\tram = ns.getServerRam(host);\\n\\t\\tthreads = Math.floor((ram[0] - ram[1]) / scriptRam);\\n\\t\\tif (threads > 0) {\\n\\t\\t\\t// Subtract threads from totalThreads value!\\n\\t\\t\\tif (threads > totalThreads) {\\n\\t\\t\\t\\t// Limit to only the needed amount!\\n\\t\\t\\t\\tthreads = totalThreads;\\n\\t\\t\\t}\\n\\t\\t\\tns.print(`Distributing ${threads} threads to ${host}`)\\n\\t\\t\\ttotalThreads -= threads;\\n\\t\\t\\tns.exec(script, host, threads, targetServer, delay, randomValue());\\n\\t\\t}\\n\\t\\tif (totalThreads <= 0) {\\n\\t\\t\\tns.print(`Distributed ${script} attack for ${targetServer} to: ${host}: COMPETED ALL THREADS! ${totalThreads}`)\\n\\t\\t\\treturn; // Done distributing the attack load!\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tns.print(`Distributed ${script} attack threads remaining: ${totalThreads}`)\\n\\t\\t}\\n\\t}\\n\\treturn totalThreads; // Returns remaining thread count to be distributed\\n}\\n\\nexport function getAllServers(ns){\\n\\tvar totalServerList = SERVER_LIST.concat(ns.getPurchasedServers());\\n\\treturn totalServerList;\\n}\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.4,\"server\":\"alpha-1\",\"moduleSequenceNumber\":206269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/sanitizeParentheses.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/sanitizeParentheses.js\",\"url\":\"blob:file:///73a6a37e-1f52-4ade-a2ce-2a407a4f27f1\",\"moduleSequenceNumber\":152119}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":152119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/spiralizeMatrix.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/spiralizeMatrix.js\",\"url\":\"blob:file:///e5d23425-70aa-48c0-a02c-305b171af265\",\"moduleSequenceNumber\":138025}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":138025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/generateIpAddresses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/cctSolutions/generateIpAddresses.js\",\"url\":\"blob:file:///a552b32a-0732-467e-9ab7-0b211769a82e\",\"moduleSequenceNumber\":54037}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/subarrayWithMaximumSum.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/cctSolutions/subarrayWithMaximumSum.js\",\"url\":\"blob:file:///2252d3c7-20da-4dec-88ab-db0a61f7de4a\",\"moduleSequenceNumber\":138041}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":138041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/cctSolutions/minimumPathSumInATriangle.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/cctSolutions/minimumPathSumInATriangle.js\",\"url\":\"blob:file:///dada3bca-3482-4c77-915d-b6cf4ec24d76\",\"moduleSequenceNumber\":55890}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent\\n} from \\\"lib/formulasHackingFacade.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport randomValue from \\\"lib/util.js\\\"\\nvar player;\\n\\nexport async function main(ns) {\\n\\tawait ns.sleep(10000)\\n\\tplayer = ns.getPlayer();\\n\\tlet server = ns.args[0]\\n\\tattackServer(ns, server)\\n}\\n\\nasync function attackServer(ns, server) {\\n\\tns.print(\\\"ATTACKING\\\")\\n\\tlet _server = ns.getServer(server);\\n\\tlet cores = ns.getServer(HOME).cpuCores;\\n\\t// Should give the amount of threads needed to grow by 200%\\n\\t// I could solve for threads from the EQ: 2.00 = growPercent^threads\\n\\t// var growThreads = Math.ceil(((5 / (growPercent(_server, 1, player, cores) - 1))));\\n\\tlet gPercent = growPercent(_server, 1, player, cores);\\n\\t// Should be the correct equation for calulating growth threads needed to double the server's money\\n\\tvar growThreads = Math.ceil(Math.log2(2) / Math.log2(gPercent));\\n\\tvar hackThreads = threadsToHackPercent(_server, 50);  //Getting the amount of threads I need to hack 50% of the funds\\n\\t// var weakenThreads = (growThreads - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n\\t//  (HackThreads * 0.002 + WeakenThreads * 0.004) / 0.053125\\n\\t// weakenThreads = Math.ceil((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\tvar weakenThreads = Math.ceil((hackThreads * 0.002 + growThreads * 0.004) / 0.05);\\n\\n\\t///\\n\\t///\\tPriming Delay\\n\\t///\\n\\tlet delay = 0;\\n\\tif(serverMap.get(server).getPrimingTimeStamp > Date.now()){\\n\\t\\tdelay = serverMap.get(server).getPrimingTimeStamp - Date.now()\\n\\t}\\n\\n\\t/**\\n\\t * PRIMING server.\\n\\t * Regrow what will be lost from the hack, and weaken what would be strengthened.\\n\\t * Calculate timing adjustments:\\n\\t */\\n\\tlet timeToHack = hackTime(_server, player);\\n\\tlet timeToGrow = growTime(_server, player);\\n\\tlet timeToWeaken = weakenTime(_server, player);\\n\\tlet growDelay = delay;\\n\\tlet weakenDelay = delay;\\n\\tif (timeToHack > timeToGrow) {\\n\\t\\tgrowDelay = timeToHack - timeToGrow + delay;\\n\\t}\\n\\tif (timeToGrow + growDelay > timeToWeaken) {\\n\\t\\tweakenDelay = timeToGrow + growDelay - weakenDelay + delay;\\n\\t}\\n\\n\\tns.print(`ATTACKING: ${server} initital bal: \\\\$${ns.getServerMoneyAvailable(server)}/\\\\$${ns.getServerMaxMoney(server)}`)\\n\\t// distributeAttackLoad(ns, server, HACK, hackThreads, delay);\\n\\tns.exec(HACK, HOME, hackThreads, targetServer, delay, randomValue());\\n\\t// distributeAttackLoad(ns, server, GROW, growThreads, growDelay);\\n\\tns.exec(GROW, HOME, growThreads, server, 0, randomValue());\\n\\t// distributeAttackLoad(ns, server, WEAKEN, weakenThreads, weakenDelay);\\n\\tns.exec(WEAKEN, HOME, weakenThreads, server, 0, randomValue());\\n\\n\\tawait ns.sleep(120000)\\n\\tns.print(`POST HACK: ${server} initital bal: \\\\$${ns.getServerMoneyAvailable(server)}/\\\\$${ns.getServerMaxMoney(server)}`)\\n}\\n\\n// Returns the amount of threads needed to hack X% of a server's money. (Enter percent as int)\\nfunction threadsToHackPercent(server, percent) {\\n\\treturn Math.floor(percent / (hackPercent(server, player) * 100));\\n}\",\"filename\":\"/test/attackScript.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/deployingScript.js\",\"url\":\"blob:file:///fdbccdf9-8883-43fe-b3bd-86f73866b240\",\"moduleSequenceNumber\":162633},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///7741e34a-c33c-4161-94c5-719280089165\",\"moduleSequenceNumber\":189546},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f3202ee0-bf4b-41a9-ac56-82e7da94599b\",\"moduleSequenceNumber\":196238},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///4a93ec83-be38-49aa-b285-7acfde8307b5\",\"moduleSequenceNumber\":189546},{\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"blob:file:///7bcfe9a9-dc0f-47c1-a5f6-a8d30b54ae10\",\"moduleSequenceNumber\":256},{\"filename\":\"/test/attackScript.js\",\"url\":\"blob:file:///8f5258e2-3c55-4a3e-a025-71eb43f326e2\",\"moduleSequenceNumber\":198295}],\"dependents\":[],\"ramUsage\":7.85,\"server\":\"home\",\"moduleSequenceNumber\":198295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tweakenTime, growTime, hackTime,\\n\\tgrowPercent, hackPercent,\\n} from \\\"lib/formulasHackingFacade.js\\\";\\nimport {\\n\\tPAUSE, UNPAUSE, KILL,\\n\\tAUTO_NODE_INBOUND_PORT,\\n\\tCONTROL_INBOUND_PORT,\\n\\tHOME,\\n\\tWEAKEN, GROW, HACK\\n} from \\\"lib/customConstants.js\\\";\\nimport randomValue from \\\"lib/util.js\\\"\\nvar player;\\n\\nexport async function main(ns) {\\n\\tawait ns.sleep(10000)\\n\\tplayer = ns.getPlayer();\\n\\tlet server = ns.args[0]\\n\\tprimeServer(ns, server)\\n}\\n\\nasync function primeServer(ns, server) {\\n\\t/**\\n\\t * PRIMING server.\\n\\t * Growing to max, and weakening to min\\n\\t */\\n\\tns.print(`PRIMING ${server}`);\\n\\tlet _server = ns.getServer(server);\\n\\tlet cores = ns.getServer(HOME).cpuCores;\\n\\tlet neededGrowthPercent = ns.getServerMaxMoney(server) / ns.getServerMoneyAvailable(server);\\n\\tlet maxGrowThreads = Math.ceil(\\n\\t\\tMath.log10(neededGrowthPercent)\\n\\t\\t/Math.log10(growPercent(_server, 1, player, cores))\\n\\t\\t);\\n\\tvar weakenThreads = ((ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)) + (maxGrowThreads * 0.004)) / 0.05\\n\\n\\n\\tlet timeToGrow = growTime(_server, player);\\n\\tlet timeToWeaken = weakenTime(_server, player);\\n\\t// Sets timer delay to ensure weaken is completed only AFTER grow finishes.\\n\\tlet weakenDelayTime = timeToGrow - timeToWeaken;\\n\\tif (weakenDelayTime < 0) { weakenDelayTime = 0; }\\n\\n\\tns.print(`PRE-PRIME: \\\\$${ns.getServerMaxMoney(server)}/\\\\$${ns.getServerMoneyAvailable(server)}`)\\n\\tlet maxMoney = ns.getServerMaxMoney(server);\\n\\tlet availalbeMoney = ns.getServerMoneyAvailable(server);\\n\\tif (availalbeMoney < maxMoney) {\\n\\t\\t// Grow money\\n\\t\\t// distributeAttackLoad(ns, server, GROW, maxGrowThreads, 0);\\n\\t\\tns.exec(GROW, HOME, maxGrowThreads, server, 0, randomValue());\\n\\n\\t}\\n\\n\\tns.print(`WEAKEN THREADS: ${weakenThreads}`)\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(server);\\n\\tlet securityLvl = ns.getServerSecurityLevel(server);\\n\\tif (securityLvl > minSecurity) {\\n\\t\\t// distributeAttackLoad(ns, server, WEAKEN, weakenThreads, weakenDelayTime);\\n\\t\\tns.exec(WEAKEN, HOME, weakenThreads, server, weakenDelayTime, randomValue());\\n\\n\\t}\\n\\n\\tns.print(`PRE-PRIME: \\\\$${ns.getServerMaxMoney(server)}/\\\\$${ns.getServerMoneyAvailable(server)}`)\\n\\tns.print(`Delaying for: ${timeToWeaken+weakenDelayTime+1000}s`)\\n\\tawait ns.sleep(timeToWeaken+weakenDelayTime+1000)\\n\\tns.print(`PRIMED: \\\\$${ns.getServerMaxMoney(server)}/\\\\$${ns.getServerMoneyAvailable(server)}`)\\n\\tns.print(`GROWTH THREADS: ${maxGrowThreads}`)\\n}\",\"filename\":\"/test/primeScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///565a78e5-df75-4366-808c-669f5e4968ee\",\"moduleSequenceNumber\":283},{\"filename\":\"/lib/customConstants.js\",\"url\":\"blob:file:///731deaaf-a705-4027-add6-ccd7b7341d6f\",\"moduleSequenceNumber\":266},{\"filename\":\"/lib/formulasHackingFacade.js\",\"url\":\"blob:file:///53b46a30-c8f9-4320-86de-9b57b9b9bcf0\",\"moduleSequenceNumber\":256},{\"filename\":\"/test/primeScript.js\",\"url\":\"blob:file:///f0a74f89-39ff-44eb-b30a-1a96eac097de\",\"moduleSequenceNumber\":36334}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":37340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n\\tWEAKEN, GROW, HACK, SERVER_LIST\\r\\n} from \\\"lib/customConstants.js\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\t// Go through all servers & infect them!\\r\\n\\tfor(let i = 0; i<SERVER_LIST.length; i++){\\r\\n\\t\\tawait infectVulnerableServer(ns, SERVER_LIST[i]);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nasync function infectVulnerableServer(ns, server) {\\r\\n\\tawait ns.scp(WEAKEN, server);\\r\\n\\tawait ns.scp(GROW, server);\\r\\n\\tawait ns.scp(HACK, server);\\r\\n}\",\"filename\":\"/lib/infect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":141077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default class DeployingScript {\\n\\n\\tconstructor(scriptName, ) {\\n\\t\\tthis.name = scriptName;\\n\\t\\t// Marks the time the last executed thread should be completed by!\\n\\t\\tthis.completedByTimeStamp = 0;\\n\\t}\\n\\n\\tgetName() {\\n\\t\\treturn this.name;\\n\\t}\\n\\n\\t// Completion of last thread's execution that is. So we can stagger following threads targeting that server appropriately\\n\\tsetTimeUtilCompletion(delay){\\n\\t\\tthis.completedByTimeStamp = delay;\\n\\t}\\n}\",\"filename\":\"/lib/deployingScript.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":162633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"alpha-0\",\"alpha-1\",\"alpha-0-0\",\"alpha-0-1\",\"alpha-0-2\",\"alpha-0-3\",\"alpha-0-4\",\"alpha-0-5\",\"alpha-0-6\",\"alpha-0-7\",\"alpha-0-8\",\"alpha-0-9\",\"alpha-0-10\",\"alpha-0-11\",\"alpha-0-12\",\"alpha-0-13\",\"alpha-0-14\",\"alpha-0-15\",\"alpha-0-16\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"99.0.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46448959769,\"moneyMax\":1161223994225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1287,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"47.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":53826956688,\"moneyMax\":1345673917200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1178,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-47924.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[25,150,183,56,111,7,186,57,32,38,73,105,115,54,165,91,180,128,11,130,68,145,1,184,117,46,166,54,88,39,42,106,167,195,60,76,77,91,23,129,129,98],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136923-BladeIndustries.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(())((a)()))()(((\",\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"43.4.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":44.12412500000001,\"minDifficulty\":28,\"moneyAvailable\":0,\"moneyMax\":625254945825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":900,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"49.7.8.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,59098],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67148,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":146,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///5e6186cd-97e0-4c0d-a5f8-22c9f2a12d6d\",\"moduleSequenceNumber\":38356}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///99a2d923-b9a7-4ecd-82ae-26e055be72fa\",\"moduleSequenceNumber\":129487}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":129487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///5e6186cd-97e0-4c0d-a5f8-22c9f2a12d6d\",\"moduleSequenceNumber\":38356}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":38356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///9c1e24bd-122e-40c1-a249-5284857c45dd\",\"moduleSequenceNumber\":514}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":34779162127,\"moneyMax\":869479053175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1012,\"serverGrowth\":68}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"50.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37405496976,\"moneyMax\":935137424400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":974,\"serverGrowth\":88}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-8133-NiteSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[7,7],[2,7,9],[3,5,9,1],[4,5,1,8,6],[4,8,9,8,7,7],[6,9,6,3,6,8,8],[6,8,4,3,1,6,7,5],[8,6,8,4,6,3,2,8,5],[1,4,5,5,8,7,4,5,2,8],[7,6,1,1,5,1,6,6,8,8,6]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"1.8.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":18724546494,\"moneyMax\":468113662350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1073,\"serverGrowth\":51}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"16.8.5.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,18246],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67147,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":73,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///89c2608f-84d5-4063-8780-209ccf11fb5b\",\"moduleSequenceNumber\":38355}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///5d353053-e717-418d-94d2-06759f5f7810\",\"moduleSequenceNumber\":112429}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///89c2608f-84d5-4063-8780-209ccf11fb5b\",\"moduleSequenceNumber\":38355}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":38355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///be484a4f-c8a4-4afd-a96d-b1bd8bb78e65\",\"moduleSequenceNumber\":516}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":20878554033,\"moneyMax\":521963850825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":920,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"39.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":29.012,\"minDifficulty\":25,\"moneyAvailable\":68647964616,\"moneyMax\":472753207550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":90}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"61.7.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":27947048585,\"moneyMax\":698676214625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1257,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-21273-NiteSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,1,5,5,7,9,0,0],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-251502-BladeIndustries.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[105,8,197,105,156,94,3,85,21,72,117,155,2,186]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"90.1.6.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,85722],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67143,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":73,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1fdb1b4c-05a8-4f3c-909f-4f7660a1fcdf\",\"moduleSequenceNumber\":3319}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///24937571-f521-4805-93df-ed7860204d54\",\"moduleSequenceNumber\":95601}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":95601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1fdb1b4c-05a8-4f3c-909f-4f7660a1fcdf\",\"moduleSequenceNumber\":3319}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":3319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///b13d1973-355a-4b99-abaf-b94ac362bd86\",\"moduleSequenceNumber\":517}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1754635705,\"moneyMax\":43865892625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1081,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"61.2.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1456,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-811550-Sector-12.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,6],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455037-BladeIndustries.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,20],[6,14],[7,17],[1,11],[22,30],[7,13],[15,19],[10,20],[4,9],[25,32],[22,26],[12,22],[9,17],[14,20],[22,27],[4,13],[1,4],[1,6]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"31.7.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1058220942,\"moneyMax\":26455523550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1067,\"serverGrowth\":68}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"54.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":949015866,\"moneyMax\":23725396650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":884,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"86.1.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":775692849,\"moneyMax\":19392321225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":49}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291183-BladeIndustries.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,-6,5,1,9,9],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"12.1.0.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,27354],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67144,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":146,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///9c7c10ca-4e50-419a-a839-31e7dc7800d4\",\"moduleSequenceNumber\":3320}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///49374c13-94f7-4985-9768-6bab4c044842\",\"moduleSequenceNumber\":3321}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":3321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///9c7c10ca-4e50-419a-a839-31e7dc7800d4\",\"moduleSequenceNumber\":3320}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":3320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///5f224291-5b7d-434f-b373-0dfb88ce8b23\",\"moduleSequenceNumber\":519}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":619411634,\"moneyMax\":15485290850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"46.2.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,35674],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67145,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///615e3510-434d-49a8-a563-8e02927b5c8b\",\"moduleSequenceNumber\":38353}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///615e3510-434d-49a8-a563-8e02927b5c8b\",\"moduleSequenceNumber\":38353}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":38353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///52b6a54f-5277-4384-a564-a081b649f5ab\",\"moduleSequenceNumber\":520}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":713400393,\"moneyMax\":17835009825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":71}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"15.8.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":937035031,\"moneyMax\":23425875775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"10.6.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,56204],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67138,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///e005b3cd-3f5a-4ec2-9659-0aeecb0d6f13\",\"moduleSequenceNumber\":5862}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///4154bade-9068-4c50-b8df-da02cc16b552\",\"moduleSequenceNumber\":109655}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///e005b3cd-3f5a-4ec2-9659-0aeecb0d6f13\",\"moduleSequenceNumber\":5862}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":5862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///c369962e-bec2-4abb-9241-e01c1fcc062e\",\"moduleSequenceNumber\":521}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1179390779,\"moneyMax\":29484769475,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":900,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"85.4.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,26347],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67141,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":73,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///09551b74-95f8-4ffc-9a92-b7cabb4eb814\",\"moduleSequenceNumber\":3318}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///09551b74-95f8-4ffc-9a92-b7cabb4eb814\",\"moduleSequenceNumber\":3318}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":3318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///f5e4636d-ea94-4a32-a7f9-3463e98e6b95\",\"moduleSequenceNumber\":523}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":865395834,\"moneyMax\":21634895850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298075-BladeIndustries.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0],[0,0,0],[1,1,0],[0,0,0],[0,0,0],[0,1,0],[0,0,1],[0,0,0]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"94.2.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,13025],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67140,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///74c3d972-f542-45a3-b5c3-4ae9d715f226\",\"moduleSequenceNumber\":5864}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///74c3d972-f542-45a3-b5c3-4ae9d715f226\",\"moduleSequenceNumber\":5864}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":5864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///f9150051-420e-40a2-9aa7-e71bc60d7835\",\"moduleSequenceNumber\":524}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":516236694,\"moneyMax\":12905917350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":74}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"50.1.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":879069846,\"moneyMax\":21976746150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":943,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"34.3.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":798770899,\"moneyMax\":19969272475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"72.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1031317644,\"moneyMax\":25782941100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-434428-BladeIndustries.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,2,0,10,0,0,10,10,0,2,4,8,5,5,2,5,1,3,0,9,0,1,9],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-720093.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[165,9,181,77,39,28,120,16]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-407855.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[53,167,197,35,87,45,96,129,142,35,144,90,146,170,119,67,140,95,169,130,174,193,192,7,129,164,153,163,157,100,90,89,29,156,6,41,21,199,14,117,83,148,147],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"20.6.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,62994],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67136,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///41d37c95-e870-4c17-8550-e4dc11c0b491\",\"moduleSequenceNumber\":5860}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///41d37c95-e870-4c17-8550-e4dc11c0b491\",\"moduleSequenceNumber\":5860}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":5860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///1f4a576d-2c9b-4323-919d-314a58ee3f65\",\"moduleSequenceNumber\":525}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":950524022,\"moneyMax\":23763100550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"43.3.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":79.45200000000001,\"minDifficulty\":19,\"moneyAvailable\":131969991.42904854,\"moneyMax\":25253014975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":815,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-79440-BladeIndustries.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,1,0,0],[0,0,0,0],[1,0,0,0],[1,0,0,1],[0,0,0,0],[0,0,0,1],[0,0,0,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"31.4.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":46.99200000000001,\"minDifficulty\":24,\"moneyAvailable\":10081526490.713968,\"moneyMax\":24332480400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":777,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"87.1.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,32503],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67139,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///c8c67c40-5168-40de-a06f-a9b71ef6c61f\",\"moduleSequenceNumber\":5863}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///c8c67c40-5168-40de-a06f-a9b71ef6c61f\",\"moduleSequenceNumber\":5863}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":5863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///0a312dd9-fabc-4d58-8757-b06ccfd30530\",\"moduleSequenceNumber\":526}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":893772428,\"moneyMax\":22344310700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"4.4.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1526948918,\"moneyMax\":38173722950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":59}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"11.3.0.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,18759],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67135,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":4,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///3840b71f-f544-4780-b296-37a192974e25\",\"moduleSequenceNumber\":5859}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///54e41aec-03b4-4c13-9fad-b6b5582e4e1d\",\"moduleSequenceNumber\":109653}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///3840b71f-f544-4780-b296-37a192974e25\",\"moduleSequenceNumber\":5859}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":5859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///65b86fd3-7117-4c95-b597-3a2fc93e6e9f\",\"moduleSequenceNumber\":527}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":26.628,\"minDifficulty\":25,\"moneyAvailable\":8453532099,\"moneyMax\":42338985800,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":837,\"serverGrowth\":89}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"10.8.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":27556108300,\"moneyMax\":27556108300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":792,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-879832.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[123,7,107,24,34,166,16,109,33,126,124,128,48,168,117,101,134,157,109,149,34,121,11,9,10,62,142,107,169,40,161],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"68.8.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":58.604,\"minDifficulty\":29,\"moneyAvailable\":18807560341.898987,\"moneyMax\":33178431700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"62.9.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,48457],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67137,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fb0242d7-3176-40c1-99db-5aca44bc309e\",\"moduleSequenceNumber\":5861}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///932189c9-987b-4ca1-89e8-4160d795d612\",\"moduleSequenceNumber\":109654}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fb0242d7-3176-40c1-99db-5aca44bc309e\",\"moduleSequenceNumber\":5861}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":5861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///02580621-4f3d-4526-b1f4-8bc416b9da53\",\"moduleSequenceNumber\":528}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1009972171,\"moneyMax\":25249304275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":794,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"67.2.8.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,39662],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67132,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":73,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///39acbb29-b26e-4f96-bf5f-88b9d0d3a125\",\"moduleSequenceNumber\":5856}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///600f791a-44b2-428f-b9dc-064f6a0b3b30\",\"moduleSequenceNumber\":109651}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///39acbb29-b26e-4f96-bf5f-88b9d0d3a125\",\"moduleSequenceNumber\":5856}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":5856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a87a3e3b-818d-4da7-be81-cb19f92c1789\",\"moduleSequenceNumber\":529}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":784734614,\"moneyMax\":19618365350,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":680,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"40.0.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,70685],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67133,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///4741ddc2-5864-44da-93ab-7e8983728284\",\"moduleSequenceNumber\":5857}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///0c94b35f-cc1c-4fc5-a6c9-64676da9db96\",\"moduleSequenceNumber\":105664}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///4741ddc2-5864-44da-93ab-7e8983728284\",\"moduleSequenceNumber\":5857}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":5857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///20373bbe-9b74-49f9-aaa5-3c60e51697aa\",\"moduleSequenceNumber\":530}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":76.82400000000025,\"minDifficulty\":14,\"moneyAvailable\":126396220.86948818,\"moneyMax\":13110256450,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":490,\"serverGrowth\":55}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"66.7.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,60169],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67134,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///519feb41-04b7-40a2-9ff3-99a32eb32b8b\",\"moduleSequenceNumber\":5858}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///da0e0efc-fdce-4d38-b97b-97c1588a12be\",\"moduleSequenceNumber\":109652}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///519feb41-04b7-40a2-9ff3-99a32eb32b8b\",\"moduleSequenceNumber\":5858}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":5858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///c43fb61a-2c34-4b2b-a732-7db948c2ac96\",\"moduleSequenceNumber\":531}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":52,\"hackDifficulty\":74.79187500000008,\"minDifficulty\":17,\"moneyAvailable\":297273834.460936,\"moneyMax\":17136110625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":538,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"11.6.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,65719],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67130,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d6b6aa6d-857e-4047-891a-8b2493d31842\",\"moduleSequenceNumber\":5854}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d6b6aa6d-857e-4047-891a-8b2493d31842\",\"moduleSequenceNumber\":5854}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":5854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///1aeef6e8-246e-4786-b8f7-5bd8d2a3599d\",\"moduleSequenceNumber\":532}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":365848313,\"moneyMax\":9146207825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":430,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"22.6.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,61573],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67125,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///75babd8d-d8f8-46b8-a40b-0a33b305628a\",\"moduleSequenceNumber\":5850}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///ad910bbc-04d6-4f17-88c9-0a99c2537729\",\"moduleSequenceNumber\":42125}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":42125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///75babd8d-d8f8-46b8-a40b-0a33b305628a\",\"moduleSequenceNumber\":5850}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":5850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///42e6d37f-1a34-4463-969f-b9ab7ed726c6\",\"moduleSequenceNumber\":533}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":186817166,\"moneyMax\":4670429150,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":400,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-516478-BladeIndustries.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[5,190,126,174,12,198,62,87,148,137,70,74,172,50,90,185,51,35,129,25,40,139,95,150,109,15,59,3,15,166,130,197,189,147,90,138,88,15,7,29,92,12,87,91,175,39,146,159]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895743.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"6048237190\",-91],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"25.4.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,76725],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67126,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ef691ffc-5f94-4cdb-8b9c-3c9c91755f36\",\"moduleSequenceNumber\":5851}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///e78ab3ce-af88-4403-956f-853153f64a51\",\"moduleSequenceNumber\":42126}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":42126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ef691ffc-5f94-4cdb-8b9c-3c9c91755f36\",\"moduleSequenceNumber\":5851}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":5851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a27c5266-c170-4c5e-a484-d5cdc1204095\",\"moduleSequenceNumber\":534}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":72.5641250000002,\"minDifficulty\":26,\"moneyAvailable\":26763094425,\"moneyMax\":26763094425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":730,\"serverGrowth\":77}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"60.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,91228],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67127,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///2f89790e-6a22-4c7a-956c-95a31a4e3650\",\"moduleSequenceNumber\":5852}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///9d335cb0-3c49-487a-8463-3df70e8035d7\",\"moduleSequenceNumber\":42127}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":42127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///2f89790e-6a22-4c7a-956c-95a31a4e3650\",\"moduleSequenceNumber\":5852}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":5852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///8cd8c182-503e-4d89-a5e2-d96ed9e4bf6a\",\"moduleSequenceNumber\":535}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":45.335875,\"minDifficulty\":15,\"moneyAvailable\":689447926.4905039,\"moneyMax\":8617165875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":447,\"serverGrowth\":42}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"61.7.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":599060050,\"moneyMax\":14976501250,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":557,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"62.3.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,7842],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67129,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":73,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///781a6865-c216-4840-8e6e-be023a6f8e82\",\"moduleSequenceNumber\":5853}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///7087f0ed-48fa-4743-84ba-dcc7664fd137\",\"moduleSequenceNumber\":105662}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///781a6865-c216-4840-8e6e-be023a6f8e82\",\"moduleSequenceNumber\":5853}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":5853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///2b58a5af-35ad-43df-be3a-bf496109a815\",\"moduleSequenceNumber\":536}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":70.94,\"minDifficulty\":22,\"moneyAvailable\":485764397.99199754,\"moneyMax\":8324784075,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":428,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"8.6.6.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,58885],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67122,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":4,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///abaa09ff-8de2-4b83-b3ee-adb98c0421bf\",\"moduleSequenceNumber\":5847}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///ea8dc993-0485-412f-a127-b8de5fada915\",\"moduleSequenceNumber\":105656}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///abaa09ff-8de2-4b83-b3ee-adb98c0421bf\",\"moduleSequenceNumber\":5847}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":5847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///360472b9-f5d6-49e9-8ff3-fb26bbdb2b87\",\"moduleSequenceNumber\":537}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":42.572624999999995,\"minDifficulty\":14,\"moneyAvailable\":337298983.9089836,\"moneyMax\":4212620675,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":285,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"48.3.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":248996809,\"moneyMax\":6224920225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":400,\"serverGrowth\":64}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"72.1.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,25937],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67123,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///5485a99a-f7e1-482d-8cc6-c23d303db988\",\"moduleSequenceNumber\":5848}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///099e648a-0a24-4a17-b21a-0b8a508dbc8a\",\"moduleSequenceNumber\":42123}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":42123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///5485a99a-f7e1-482d-8cc6-c23d303db988\",\"moduleSequenceNumber\":5848}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":5848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///09ee7c65-7af5-4d1e-8e98-90d06832da20\",\"moduleSequenceNumber\":538}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":407,\"serverGrowth\":50}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-981215.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"51071\",23],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"32.7.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":73663385,\"moneyMax\":1841584625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":295,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"83.5.1.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,54540],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67045,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///f520efc7-4067-4bc2-95de-19e4a730a194\",\"moduleSequenceNumber\":99502}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///f3d6da4b-72c3-46ab-9bbc-c2da4f085a26\",\"moduleSequenceNumber\":198298}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":198298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///ae469218-df6e-4a5a-b6ce-ece60209077b\",\"moduleSequenceNumber\":5832}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":5832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///c3212a5b-6d2a-4a1a-ac2d-df4ff95f20f3\",\"moduleSequenceNumber\":539}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"5.4.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,48812],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67046,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///d859ca0e-9d5f-42c1-a846-42602f4a42a1\",\"moduleSequenceNumber\":99503}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///081f996d-6946-4477-b9a8-f0a1485110e3\",\"moduleSequenceNumber\":198299}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":198299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fd97106a-48ad-4d61-91d1-95cd37d9478e\",\"moduleSequenceNumber\":5833}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":5833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///d2835028-6d5e-486b-b6b3-48318b14bd1a\",\"moduleSequenceNumber\":540}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":12900.417605392115,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"66.8.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,98317],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67047,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///094ef8f3-1c3b-4418-b705-ccdcd6650399\",\"moduleSequenceNumber\":99504}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///b747f97c-24d8-4f52-a6ca-3d42a0ceffd8\",\"moduleSequenceNumber\":198300}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":198300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///9c42c9a5-0546-4d0e-895e-2e12df71cd77\",\"moduleSequenceNumber\":5834}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":5834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///d099090d-33cc-4983-be19-b2e67ef6f58d\",\"moduleSequenceNumber\":541}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":36.25962499999999,\"minDifficulty\":3,\"moneyAvailable\":2935.1258254214013,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"76.9.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,34334],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67048,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///08968a88-ebc3-4e96-99f9-b6fb70d5b0be\",\"moduleSequenceNumber\":99505}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///a31c7103-5727-4695-98f2-5968ed886fa9\",\"moduleSequenceNumber\":198301}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":198301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///4075da80-3211-46ec-a8dd-ec5ddf09aa76\",\"moduleSequenceNumber\":5835}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":5835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///91ff6fd0-8963-46bb-a1ad-4fc0de10c048\",\"moduleSequenceNumber\":542}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":17.757500000000004,\"minDifficulty\":5,\"moneyAvailable\":250769.13397506886,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"63.7.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,59241],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67116,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///36782b64-d855-459b-b654-6a483ef6a686\",\"moduleSequenceNumber\":5841}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///82c05e7b-2a22-4321-9077-5d6c3486ec5d\",\"moduleSequenceNumber\":100143}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///36782b64-d855-459b-b654-6a483ef6a686\",\"moduleSequenceNumber\":5841}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":5841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///743c7248-0c00-4846-8e26-da8cc18f4271\",\"moduleSequenceNumber\":543}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"43.8.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,45009],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67114,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///35faa9aa-9dfb-45bc-8dbb-4a22b9d146e1\",\"moduleSequenceNumber\":5839}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///73abdd83-024b-4c87-a8ae-2ba7a7b85fbc\",\"moduleSequenceNumber\":100141}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///35faa9aa-9dfb-45bc-8dbb-4a22b9d146e1\",\"moduleSequenceNumber\":5839}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":5839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///379873fa-a986-4bf4-a82c-ed57f3edf9ef\",\"moduleSequenceNumber\":544}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"35.3.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,46108],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67120,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///2c6b3065-f2c0-4c6b-ad9e-cbe6c85e5206\",\"moduleSequenceNumber\":5845}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///0cd57e09-d310-49d9-b129-d8cccd6dce13\",\"moduleSequenceNumber\":100145}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///2c6b3065-f2c0-4c6b-ad9e-cbe6c85e5206\",\"moduleSequenceNumber\":5845}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":5845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///38f6544a-b154-44a0-9601-a73afc9dc818\",\"moduleSequenceNumber\":545}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"72.8.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,37171],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67121,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///10bb603a-93f1-4076-bfca-8af9cd8d1fdc\",\"moduleSequenceNumber\":5846}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///d921dc7f-e7b9-4e40-8cdf-47003d1b391b\",\"moduleSequenceNumber\":105655}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///10bb603a-93f1-4076-bfca-8af9cd8d1fdc\",\"moduleSequenceNumber\":5846}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":5846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a822dcf2-6682-4a2d-a63d-dd101dbda0c9\",\"moduleSequenceNumber\":546}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":12.98,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"39.9.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,81990],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67049,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///c50d4f55-9075-428b-8d47-c01dd306b968\",\"moduleSequenceNumber\":99506}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///665b796b-ee5a-496e-b006-2a276b181b45\",\"moduleSequenceNumber\":198302}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":198302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///f101bf94-bb5b-4244-b4fd-2fbc35290516\",\"moduleSequenceNumber\":5836}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":5836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///c4cafcd1-2702-4860-b7df-ee78a71b644b\",\"moduleSequenceNumber\":547}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"40.8.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,34295],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67050,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///ff1d9d21-1778-4840-98bf-6aa166af3be3\",\"moduleSequenceNumber\":100139}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///51445e71-d612-4136-a342-fba86c6ff301\",\"moduleSequenceNumber\":198303}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":198303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///cc59537b-7e13-4a4d-9f3f-fd1bd3875b73\",\"moduleSequenceNumber\":5837}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":5837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///d6625dcf-16c2-47c8-9b48-fe407dd34a9d\",\"moduleSequenceNumber\":548}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"71.2.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,74490],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67118,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///40c7e3ee-6275-40c4-8f95-17fcb45f1faa\",\"moduleSequenceNumber\":5843}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///4f2b7b38-5c8d-4e49-934e-0468391ccc35\",\"moduleSequenceNumber\":105653}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///40c7e3ee-6275-40c4-8f95-17fcb45f1faa\",\"moduleSequenceNumber\":5843}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":5843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///01252dff-f7d9-48ca-b811-0146d7fdeb3f\",\"moduleSequenceNumber\":549}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730494-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[166,122,161,37,113,48,68,133,67,101,179,195,114,132,163,57,162,74,32],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-243535.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,30,16,46]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"46.9.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,2272],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67115,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1b99031c-c0e5-4ea0-9c76-8357016756b3\",\"moduleSequenceNumber\":5840}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///d1d3fe3b-c7a9-41b3-aa4d-37090cc8ac15\",\"moduleSequenceNumber\":100142}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1b99031c-c0e5-4ea0-9c76-8357016756b3\",\"moduleSequenceNumber\":5840}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":5840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///196a72e8-29b4-4e57-ba05-b35d76ff92c0\",\"moduleSequenceNumber\":550}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":24.955999999999992,\"minDifficulty\":5,\"moneyAvailable\":57215.51516765794,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"48.2.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,1128],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67119,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1ace4a2c-117d-431f-bd80-11521efaa60e\",\"moduleSequenceNumber\":5844}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///019faf30-eac4-4a4a-a024-4fecdece9a7f\",\"moduleSequenceNumber\":105654}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1ace4a2c-117d-431f-bd80-11521efaa60e\",\"moduleSequenceNumber\":5844}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":5844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///2fa4c316-dc3b-46a4-8893-9f14161a6857\",\"moduleSequenceNumber\":551}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":67585717,\"moneyMax\":1689642925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":214,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"32.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":55801532,\"moneyMax\":1395038300,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":257,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"80.9.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,85971],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67051,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///279e7c04-6d92-4b5b-ac02-a4259863c720\",\"moduleSequenceNumber\":100140}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///8c4e45dc-f21c-413f-bfe0-893fe7caee91\",\"moduleSequenceNumber\":198304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":198304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///65515b84-a62e-40d3-8466-c6b8f0265dd1\",\"moduleSequenceNumber\":5838}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":5838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///8592af25-5694-4761-9581-f301a62c08db\",\"moduleSequenceNumber\":552}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"17.5.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,44452],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67131,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///c9ab242d-9b0b-4a55-9fb4-b2266b9528d3\",\"moduleSequenceNumber\":5855}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///27a75008-5980-442f-95d0-7e32eaadb311\",\"moduleSequenceNumber\":105663}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///c9ab242d-9b0b-4a55-9fb4-b2266b9528d3\",\"moduleSequenceNumber\":5855}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":5855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///24b4f134-bd72-40ae-9536-009e8d207a59\",\"moduleSequenceNumber\":553}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":504,\"serverGrowth\":38}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"84.8.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,68536],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67149,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///bf3777d0-9aed-4a2c-880d-3c8c765392a6\",\"moduleSequenceNumber\":38357}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///d0cf76d0-1576-4507-9227-6e4e743a3f95\",\"moduleSequenceNumber\":129488}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":129488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///bf3777d0-9aed-4a2c-880d-3c8c765392a6\",\"moduleSequenceNumber\":38357}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":38357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///6a5ce0e5-44f5-4b56-8fd6-055a974c2e41\",\"moduleSequenceNumber\":555}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":987,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"14.6.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":680,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"34.5.4.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,94587],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67142,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":146,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d21c8598-64e2-4fd5-a4a7-4cca886d698d\",\"moduleSequenceNumber\":5865}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///cde58324-581a-41a9-929f-fb34896a087d\",\"moduleSequenceNumber\":5866}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":5866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d21c8598-64e2-4fd5-a4a7-4cca886d698d\",\"moduleSequenceNumber\":5865}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":5865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///534df0ab-09d7-49a1-a0f5-b239dafd0473\",\"moduleSequenceNumber\":556}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":507,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"27.9.3.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,62325],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67128,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":146,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///db55688e-a1d4-446f-9e5e-b381be22b3dd\",\"moduleSequenceNumber\":3317}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///657b228b-fcd4-4884-9e7a-f2d857bbc30b\",\"moduleSequenceNumber\":42128}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":42128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///db55688e-a1d4-446f-9e5e-b381be22b3dd\",\"moduleSequenceNumber\":3317}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":3317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///044d3d26-e041-4b49-880d-f8a10f444227\",\"moduleSequenceNumber\":558}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":362,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325156.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"94617543\",35],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"5.7.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,71625],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67124,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///4747c977-59cf-4e4a-8104-62b17dede84c\",\"moduleSequenceNumber\":5849}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///7625a8ab-206a-4d97-aae7-d43fbcdb557a\",\"moduleSequenceNumber\":42124}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":42124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///4747c977-59cf-4e4a-8104-62b17dede84c\",\"moduleSequenceNumber\":5849}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":5849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///fab6debd-526e-49c3-924f-b68627f46b6b\",\"moduleSequenceNumber\":559}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":203,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-593586-BladeIndustries.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,1,-3,0,-5,-7,4,-8,9,-5,10,-6,2],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"87.6.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,11919],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67146,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d497cfa7-8139-4aea-8e9a-ecc427a6f044\",\"moduleSequenceNumber\":38354}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///b60d3aa0-cd4a-4c07-bdc7-06f04429b449\",\"moduleSequenceNumber\":109657}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d497cfa7-8139-4aea-8e9a-ecc427a6f044\",\"moduleSequenceNumber\":38354}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":38354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///3ad190dd-c2d8-4d45-bcf4-6f557f428d9e\",\"moduleSequenceNumber\":560}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":538,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"69.3.4.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,71224],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000894,\"pid\":67117,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///b2cea757-c6d0-49bc-ab20-52490125a1e5\",\"moduleSequenceNumber\":5842}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///ffdf2b32-044e-4319-8fb2-22b8c0a64c39\",\"moduleSequenceNumber\":100144}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///b2cea757-c6d0-49bc-ab20-52490125a1e5\",\"moduleSequenceNumber\":5842}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":5842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///f65a154b-faf4-4492-98dd-bdf933bcf705\",\"moduleSequenceNumber\":561}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"92.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"84.3.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"68.5.2.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0\",\"httpPortOpen\":false,\"ip\":\"26.2.8.7\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",5298654.210469208,17210],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5083.8099999975775,\"pid\":66904,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":563,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",4679737.490165853,21749],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5083.8099999975775,\"pid\":66907,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":383,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",5297570.210469208,62562],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5082.809999997578,\"pid\":66919,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":563,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",4678659.490165853,42253],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5082.809999997578,\"pid\":66922,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":383,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0,80996],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1332.8100000001639,\"pid\":67052,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":772,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",970572.4982910156,93327],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67057,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":432,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1747841.6968731245,22824],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67058,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":75,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",868591.4565429688,49425],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67060,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":261,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1564276.621727575,64848],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67061,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":62,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",3166844.7692871094,13074],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67062,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":14346,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",3166844.7692871094,86464],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67063,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":853,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",5701129.384687079,47661],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67064,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":643,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",850957.3295898438,64872],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67066,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":279,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1532534.3932382865,44480],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67067,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":39,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",906383.9155273438,11105],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67068,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":369,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",906383.9155273438,42966],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67069,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":364,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1632303.0478555667,66911],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1331.6100000001636,\"pid\":67070,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",969556.4982910156,35109],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67072,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":432,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1746825.6968731245,3199],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67073,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":75,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",867576.4565429688,43221],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67075,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":261,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1563261.621727575,93512],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67076,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":62,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",3165830.7692871094,31768],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67077,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":14346,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",3165830.7692871094,23387],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67078,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":853,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",5700115.384687079,4171],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67079,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":643,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",849944.3295898438,83102],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67081,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":279,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1531521.3932382865,24324],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67082,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":39,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",905369.9155273438,3681],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67083,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":369,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",905369.9155273438,6565],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67084,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":364,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1631289.0478555667,16601],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1330.6100000001634,\"pid\":67085,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",968543.4982910156,80556],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1329.6100000001632,\"pid\":67087,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":432,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1745812.6968731245,43982],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1329.6100000001632,\"pid\":67088,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":75,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",866563.4565429688,56365],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1329.6100000001632,\"pid\":67090,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":261,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1562248.621727575,25813],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1329.6100000001632,\"pid\":67091,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":62,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",3164816.7692871094,62287],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1329.6100000001632,\"pid\":67092,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":2885,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",843501.4565429688,57091],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67097,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":261,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1539186.621727575,65417],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67098,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":62,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",945475.4982910156,9016],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67100,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":581,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1989043.8936738875,24286],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67101,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":93,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",3141739.7692871094,7253],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67102,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":14346,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",3141739.7692871094,9386],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67103,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":853,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",5676024.384687079,29193],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67104,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":643,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",825853.3295898438,26202],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67106,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":279,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1507430.3932382865,55785],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67107,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":39,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",881277.9155273438,72133],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67108,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":369,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",881277.9155273438,79982],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1283.4100000001526,\"pid\":67109,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":162,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",0,86474],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67156,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,77059],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67157,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":7395,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",859069.3759765625,66860],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":479.80999999998187,\"pid\":67168,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":35,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",662659.3759765625,17062],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":283.409999999993,\"pid\":67171,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":806,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",662659.3759765625,97778],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":283.409999999993,\"pid\":67172,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":8,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",639347.3759765625,32564],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":260.20999999999435,\"pid\":67173,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":407,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",627184.3759765625,93129],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":248.00999999999502,\"pid\":67174,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":828,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",627184.3759765625,67400],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":248.00999999999502,\"pid\":67175,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":279,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1360839.56987835,10865],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":248.00999999999502,\"pid\":67176,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":56,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1057286.8171386719,90830],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":248.00999999999502,\"pid\":67177,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":937,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1057286.8171386719,65824],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":248.00999999999502,\"pid\":67178,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":575,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",2079436.530442553,78857],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":248.00999999999502,\"pid\":67179,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":84,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",2900283.7209472656,11760],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":248.00999999999502,\"pid\":67180,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":227,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1036029.8171386719,82484],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":226.80999999999622,\"pid\":67181,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":937,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1036029.8171386719,54023],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":226.80999999999622,\"pid\":67182,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":137,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",937214.7023925781,66513],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000004,\"pid\":67187,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":836,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",937214.7023925781,2424],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000004,\"pid\":67188,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":300,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1724023.2642655387,27938],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000004,\"pid\":67189,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":58,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1230114.0749511719,81990],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000004,\"pid\":67190,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":985,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1230114.0749511719,86791],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000004,\"pid\":67191,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":636,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",2358720.3729347805,26997],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000004,\"pid\":67192,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":91,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",3083764.225341797,23406],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000004,\"pid\":67193,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":64,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",916798.7023925781,99252],\"dataMap\":{},\"filename\":\"/lib/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":67194,\"ramUsage\":1.7,\"server\":\"alpha-0\",\"threads\":837,\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",916798.7023925781,18408],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":67195,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":300,\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1703607.2642655387,91870],\"dataMap\":{},\"filename\":\"/lib/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":67196,\"ramUsage\":1.75,\"server\":\"alpha-0\",\"threads\":14,\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/weaken.js\",\"url\":\"blob:file:///63d12ff1-89fa-4934-9947-a472341673ee\",\"moduleSequenceNumber\":142362}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0\",\"moduleSequenceNumber\":142362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///fe84b82b-151a-4c57-80f0-dda7ca44615b\",\"moduleSequenceNumber\":142361}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0\",\"moduleSequenceNumber\":142361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hack.js\",\"url\":\"blob:file:///a5d27c19-41c5-4ec9-97ac-b1885ab896d3\",\"moduleSequenceNumber\":142367}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0\",\"moduleSequenceNumber\":142367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-1\",\"httpPortOpen\":false,\"ip\":\"36.8.7.0\",\"isConnectedTo\":true,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,86272],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67158,\"ramUsage\":1.75,\"server\":\"alpha-1\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-1\",\"moduleSequenceNumber\":204484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///38394325-8f21-4d4e-8810-f8b41bae0bbf\",\"moduleSequenceNumber\":207132}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-1\",\"moduleSequenceNumber\":207132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-1\",\"moduleSequenceNumber\":204488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-0\",\"httpPortOpen\":false,\"ip\":\"28.9.5.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,32868],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67159,\"ramUsage\":1.75,\"server\":\"alpha-0-0\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-0\",\"moduleSequenceNumber\":204490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1c95ce8b-f8ba-4dae-bcea-4c9644443775\",\"moduleSequenceNumber\":207133}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-0\",\"moduleSequenceNumber\":207133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-0\",\"moduleSequenceNumber\":204494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-1\",\"httpPortOpen\":false,\"ip\":\"44.5.7.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,32389],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67160,\"ramUsage\":1.75,\"server\":\"alpha-0-1\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-1\",\"moduleSequenceNumber\":204496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///67d0432e-4a13-4cb0-a639-350606b12e11\",\"moduleSequenceNumber\":207134}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-1\",\"moduleSequenceNumber\":207134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-1\",\"moduleSequenceNumber\":204500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-2\",\"httpPortOpen\":false,\"ip\":\"78.6.6.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,15693],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67161,\"ramUsage\":1.75,\"server\":\"alpha-0-2\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-2\",\"moduleSequenceNumber\":204502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///553f8a99-7581-4dcd-b2b7-5967ee4e541c\",\"moduleSequenceNumber\":207135}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-2\",\"moduleSequenceNumber\":207135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-2\",\"moduleSequenceNumber\":204506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-3\",\"httpPortOpen\":false,\"ip\":\"98.6.7.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,99241],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67162,\"ramUsage\":1.75,\"server\":\"alpha-0-3\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-3\",\"moduleSequenceNumber\":204508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///1fc0371f-ee4d-43c2-b263-435c3f83935f\",\"moduleSequenceNumber\":207136}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-3\",\"moduleSequenceNumber\":207136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-3\",\"moduleSequenceNumber\":204512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-4\",\"httpPortOpen\":false,\"ip\":\"95.9.5.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,1346],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67163,\"ramUsage\":1.75,\"server\":\"alpha-0-4\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-4\",\"moduleSequenceNumber\":204514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///52297a3e-2878-4952-9621-a6212243697c\",\"moduleSequenceNumber\":207137}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-4\",\"moduleSequenceNumber\":207137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-4\",\"moduleSequenceNumber\":204518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-5\",\"httpPortOpen\":false,\"ip\":\"5.8.7.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,58323],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67164,\"ramUsage\":1.75,\"server\":\"alpha-0-5\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-5\",\"moduleSequenceNumber\":204520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///9644ebeb-6c62-4a26-91f7-e0d5d5f422c0\",\"moduleSequenceNumber\":207138}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-5\",\"moduleSequenceNumber\":207138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-5\",\"moduleSequenceNumber\":204524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-6\",\"httpPortOpen\":false,\"ip\":\"17.3.6.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,80637],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67165,\"ramUsage\":1.75,\"server\":\"alpha-0-6\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-6\",\"moduleSequenceNumber\":204526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///dd547772-dd9d-4808-91da-4f60ce3d6790\",\"moduleSequenceNumber\":207139}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-6\",\"moduleSequenceNumber\":207139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-6\",\"moduleSequenceNumber\":204530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-7\",\"httpPortOpen\":false,\"ip\":\"1.2.5.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,64003],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67166,\"ramUsage\":1.75,\"server\":\"alpha-0-7\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-7\",\"moduleSequenceNumber\":204532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///d2c4dd6c-4e1b-424e-9a30-985949e9557c\",\"moduleSequenceNumber\":207140}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-7\",\"moduleSequenceNumber\":207140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-7\",\"moduleSequenceNumber\":204536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-8\",\"httpPortOpen\":false,\"ip\":\"57.4.7.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",0,80541],\"dataMap\":{},\"filename\":\"/lib/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":480.8099999999818,\"pid\":67167,\"ramUsage\":1.75,\"server\":\"alpha-0-8\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/lib/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-8\",\"moduleSequenceNumber\":204538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/lib/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/grow.js\",\"url\":\"blob:file:///0fed39e7-fc60-477f-8c43-1c99434937e6\",\"moduleSequenceNumber\":207141}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-0-8\",\"moduleSequenceNumber\":207141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/lib/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-0-8\",\"moduleSequenceNumber\":204542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-9\",\"httpPortOpen\":false,\"ip\":\"81.5.8.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-10\",\"httpPortOpen\":false,\"ip\":\"30.6.9.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-11\",\"httpPortOpen\":false,\"ip\":\"1.7.3.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-12\",\"httpPortOpen\":false,\"ip\":\"48.5.6.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-13\",\"httpPortOpen\":false,\"ip\":\"12.2.9.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-14\",\"httpPortOpen\":false,\"ip\":\"75.2.3.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-15\",\"httpPortOpen\":false,\"ip\":\"83.8.9.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alpha-0-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alpha-0-16\",\"httpPortOpen\":false,\"ip\":\"65.8.8.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":170073.1803079099,\"favor\":0.008,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0929,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":127.5621,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":168401.0629981607}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":127.2045,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":76802.426858583}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":82.0957,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":57515.186608685006}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":36.9376,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":58.5699,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":6.2292,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":20.7014,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":13137.747291074429}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":35.0685,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":6.1498,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":75.3849,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":102.9214,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":48.1477,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":30020.152519935178}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":25534.008119756734,\"lastPrice\":25500.894746926206,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":16.952830852271777,\"otlkMagForecast\":66.14671078756729,\"cap\":337722245,\"spreadPerc\":0.4,\"shareTxForMovement\":62367,\"shareTxUntilMovement\":62367,\"totalShares\":92900000,\"maxShares\":18600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":20411.204426763168,\"lastPrice\":20382.84639691531,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":18.61722697740874,\"otlkMagForecast\":69.58292546706635,\"cap\":516089640,\"spreadPerc\":0.3,\"shareTxForMovement\":82192,\"shareTxUntilMovement\":82192,\"totalShares\":94400000,\"maxShares\":18900000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":20329.538603231194,\"lastPrice\":20379.821028737628,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":12.526056329128258,\"otlkMagForecast\":62.499925039198104,\"cap\":176521965,\"spreadPerc\":0.2,\"shareTxForMovement\":43084,\"shareTxUntilMovement\":43084,\"totalShares\":108900000,\"maxShares\":21800000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":18716.15870955927,\"lastPrice\":18753.77091380002,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":10.317070317217427,\"otlkMagForecast\":37.37522754553622,\"cap\":110283835,\"spreadPerc\":0.2,\"shareTxForMovement\":34824,\"shareTxUntilMovement\":34824,\"totalShares\":120400000,\"maxShares\":24100000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":26648.549276314327,\"lastPrice\":26591.001116883144,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":9.634857238132385,\"otlkMagForecast\":37.99290269185703,\"cap\":616463562,\"spreadPerc\":0.1,\"shareTxForMovement\":58821,\"shareTxUntilMovement\":58821,\"totalShares\":43900000,\"maxShares\":8800000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":360976.35207038297,\"lastPrice\":362148.18786749267,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":true,\"otlkMag\":12.87915637029863,\"otlkMagForecast\":61.9648596995537,\"cap\":1023539575,\"spreadPerc\":0.6,\"shareTxForMovement\":44942,\"shareTxUntilMovement\":44942,\"totalShares\":34200000,\"maxShares\":6800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":38007.72593084628,\"lastPrice\":37919.79817470572,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":6.864773873869029,\"otlkMagForecast\":42.30503504337273,\"cap\":439970869,\"spreadPerc\":0.6,\"shareTxForMovement\":45836,\"shareTxUntilMovement\":45836,\"totalShares\":69500000,\"maxShares\":13900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":245852.91355525903,\"lastPrice\":246780.2426799034,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":17.308493270979827,\"otlkMagForecast\":28.99991540729861,\"cap\":174110221,\"spreadPerc\":0.5,\"shareTxForMovement\":81682,\"shareTxUntilMovement\":81682,\"totalShares\":59800000,\"maxShares\":12000000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":49202.1408077396,\"lastPrice\":49337.52648317869,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":true,\"otlkMag\":6.900470947808337,\"otlkMagForecast\":55.792524447486244,\"cap\":77127026,\"spreadPerc\":0.3,\"shareTxForMovement\":93252,\"shareTxUntilMovement\":93252,\"totalShares\":51900000,\"maxShares\":10400000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":13208.435875438587,\"lastPrice\":13183.57241035658,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":11.34464374724292,\"otlkMagForecast\":60.11171210045158,\"cap\":26500053,\"spreadPerc\":0.6,\"shareTxForMovement\":40435,\"shareTxUntilMovement\":40435,\"totalShares\":57000000,\"maxShares\":11400000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":10960.78068671236,\"lastPrice\":10941.161088211917,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":7.490073360333905,\"otlkMagForecast\":58.90204678561784,\"cap\":288539929,\"spreadPerc\":1,\"shareTxForMovement\":96008,\"shareTxUntilMovement\":96008,\"totalShares\":46300000,\"maxShares\":9300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":8440.412490086503,\"lastPrice\":8459.201109863048,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.406947669597719,\"otlkMagForecast\":55.80323038042561,\"cap\":44793884,\"spreadPerc\":0.6,\"shareTxForMovement\":76648,\"shareTxUntilMovement\":76648,\"totalShares\":81100000,\"maxShares\":16200000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":29129.249693940008,\"lastPrice\":29067.24113850331,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":6.716068943786879,\"otlkMagForecast\":55.55454587633933,\"cap\":254339851,\"spreadPerc\":1,\"shareTxForMovement\":99430,\"shareTxUntilMovement\":99430,\"totalShares\":54700000,\"maxShares\":10900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":19231.116549588813,\"lastPrice\":19195.50838579924,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":8.42968009263251,\"otlkMagForecast\":59.98670949205528,\"cap\":273318045,\"spreadPerc\":0.6,\"shareTxForMovement\":52003,\"shareTxUntilMovement\":52003,\"totalShares\":35800000,\"maxShares\":7200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":25166.033707608334,\"lastPrice\":25214.27347147688,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":6.7666102828750345,\"otlkMagForecast\":54.826772222392634,\"cap\":200946152,\"spreadPerc\":0.6,\"shareTxForMovement\":122342,\"shareTxUntilMovement\":122342,\"totalShares\":39700000,\"maxShares\":7900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13420.303577828057,\"lastPrice\":13450.592506324547,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":7.172081490256311,\"otlkMagForecast\":55.19008620331021,\"cap\":149790891,\"spreadPerc\":0.5,\"shareTxForMovement\":95015,\"shareTxUntilMovement\":95015,\"totalShares\":49600000,\"maxShares\":9900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":16801.144577239087,\"lastPrice\":16760.208594523643,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":9.464331496977028,\"otlkMagForecast\":59.848442980679266,\"cap\":211174530,\"spreadPerc\":0.9,\"shareTxForMovement\":89176,\"shareTxUntilMovement\":89176,\"totalShares\":47500000,\"maxShares\":9500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":42249.825781423366,\"lastPrice\":42326.894057405676,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":13.708183557293157,\"otlkMagForecast\":36.499375739864576,\"cap\":240964853,\"spreadPerc\":0.9,\"shareTxForMovement\":106785,\"shareTxUntilMovement\":106785,\"totalShares\":31300000,\"maxShares\":6300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":43717.417868313714,\"lastPrice\":43609.555399639554,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.981834065056248,\"otlkMagForecast\":56.34706491214307,\"cap\":524564841,\"spreadPerc\":0.4,\"shareTxForMovement\":60177,\"shareTxUntilMovement\":60177,\"totalShares\":24200000,\"maxShares\":4800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":2003.1003425090469,\"lastPrice\":2019.0782948348037,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.58,\"b\":false,\"otlkMag\":5.742343097073274,\"otlkMagForecast\":43.28538203802589,\"cap\":34075736,\"spreadPerc\":1,\"shareTxForMovement\":39691,\"shareTxUntilMovement\":39691,\"totalShares\":61000000,\"maxShares\":12200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5911.661216606038,\"lastPrice\":5889.628301193203,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":true,\"otlkMag\":1.4029474393437766,\"otlkMagForecast\":56.685723594697635,\"cap\":169910715,\"spreadPerc\":0.5,\"shareTxForMovement\":59430,\"shareTxUntilMovement\":59430,\"totalShares\":40300000,\"maxShares\":8100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2086.542145312389,\"lastPrice\":2083.3216324531745,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":6.18315042360269,\"otlkMagForecast\":44.92108789599113,\"cap\":35805826,\"spreadPerc\":0.6,\"shareTxForMovement\":122321,\"shareTxUntilMovement\":122321,\"totalShares\":71200000,\"maxShares\":14200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":448.2014821024671,\"lastPrice\":450.8066147853828,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.88,\"b\":true,\"otlkMag\":6.287563060941176,\"otlkMagForecast\":56.24771792455344,\"cap\":36189948,\"spreadPerc\":0.8,\"shareTxForMovement\":83078,\"shareTxUntilMovement\":83078,\"totalShares\":50500000,\"maxShares\":10100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3607.538483972978,\"lastPrice\":3625.718626637198,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.63,\"b\":true,\"otlkMag\":8.774631524698005,\"otlkMagForecast\":56.61927196229081,\"cap\":111990790,\"spreadPerc\":1.2,\"shareTxForMovement\":36410,\"shareTxUntilMovement\":36410,\"totalShares\":31800000,\"maxShares\":6400000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1246.133263290937,\"lastPrice\":1249.9088919538221,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":5.687096031904969,\"otlkMagForecast\":55.67843012381258,\"cap\":12188450,\"spreadPerc\":1.2,\"shareTxForMovement\":108569,\"shareTxUntilMovement\":108569,\"totalShares\":85500000,\"maxShares\":17100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":24397.501561644975,\"lastPrice\":24620.774339321288,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.96,\"b\":false,\"otlkMag\":8.475450896345375,\"otlkMagForecast\":39.583433608237065,\"cap\":16695513,\"spreadPerc\":1.7,\"shareTxForMovement\":37172,\"shareTxUntilMovement\":37172,\"totalShares\":23900000,\"maxShares\":4800000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6032.943346739371,\"lastPrice\":6012.866107293448,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":5.454885188863282,\"otlkMagForecast\":53.75029131235616,\"cap\":12020603,\"spreadPerc\":0.8,\"shareTxForMovement\":34529,\"shareTxUntilMovement\":34529,\"totalShares\":26400000,\"maxShares\":5300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1416.9656368697379,\"lastPrice\":1413.8184332222756,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":5.515693067451036,\"otlkMagForecast\":44.29337113408512,\"cap\":62198165,\"spreadPerc\":0.9,\"shareTxForMovement\":112753,\"shareTxUntilMovement\":112753,\"totalShares\":12900000,\"maxShares\":2600000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":5017.89129505094,\"lastPrice\":5039.300426317433,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.38,\"b\":false,\"otlkMag\":1.6518929005186436,\"otlkMagForecast\":47.00337959448012,\"cap\":10016552,\"spreadPerc\":1.2,\"shareTxForMovement\":32855,\"shareTxUntilMovement\":32855,\"totalShares\":8600000,\"maxShares\":1700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":201.745990945434,\"lastPrice\":203.91036888075342,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.47,\"b\":true,\"otlkMag\":18.37249580858355,\"otlkMagForecast\":69.45517407362597,\"cap\":1494358,\"spreadPerc\":0.9,\"shareTxForMovement\":32498,\"shareTxUntilMovement\":32498,\"totalShares\":154400000,\"maxShares\":30900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":5961.99208624513,\"lastPrice\":5990.378519426669,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.54,\"b\":true,\"otlkMag\":8.644249956905027,\"otlkMagForecast\":58.30258472751637,\"cap\":7800425,\"spreadPerc\":0.6,\"shareTxForMovement\":35179,\"shareTxUntilMovement\":35179,\"totalShares\":178600000,\"maxShares\":35700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":27071.825740043892,\"lastPrice\":27137.94733896791,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":10.245903861358737,\"otlkMagForecast\":58.189746481610776,\"cap\":147621384,\"spreadPerc\":0.9,\"shareTxForMovement\":168572,\"shareTxUntilMovement\":168572,\"totalShares\":15600000,\"maxShares\":3100000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":33648.697223899326,\"lastPrice\":33592.61357474436,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":12.592049660940885,\"otlkMagForecast\":36.90095481748334,\"cap\":86098113,\"spreadPerc\":0.9,\"shareTxForMovement\":106164,\"shareTxUntilMovement\":106164,\"totalShares\":18500000,\"maxShares\":3700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":18,\"lastUpdate\":1644791877642,\"ticksUntilCycle\":13}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644747375545","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644791881304"}}